/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGBlueOceanApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGBlueOceanApi::SWGBlueOceanApi() {}

SWGBlueOceanApi::~SWGBlueOceanApi() {}

SWGBlueOceanApi::SWGBlueOceanApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGBlueOceanApi::getAuthenticatedUser(QString* organisation) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organisation}/user/");

    QString organisationPathParam("{"); organisationPathParam.append("organisation").append("}");
    fullPath.replace(organisationPathParam, stringValue(organisation));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getAuthenticatedUserCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getAuthenticatedUserCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    SWGSwaggyjenkinsUser* output = static_cast<SWGSwaggyjenkinsUser*>(create(json, QString("SWGSwaggyjenkinsUser")));
    worker->deleteLater();

    emit getAuthenticatedUserSignal(output);
    emit getAuthenticatedUserSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getClasses(QString* class) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/classes/{class}");

    QString classPathParam("{"); classPathParam.append("class").append("}");
    fullPath.replace(classPathParam, stringValue(class));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getClassesCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getClassesCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    worker->deleteLater();

    emit getClassesSignal(output);
    emit getClassesSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getOrganisation(QString* organisation) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organisation}");

    QString organisationPathParam("{"); organisationPathParam.append("organisation").append("}");
    fullPath.replace(organisationPathParam, stringValue(organisation));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getOrganisationCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getOrganisationCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    SWGSwaggyjenkinsOrganisation* output = static_cast<SWGSwaggyjenkinsOrganisation*>(create(json, QString("SWGSwaggyjenkinsOrganisation")));
    worker->deleteLater();

    emit getOrganisationSignal(output);
    emit getOrganisationSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getOrganisations() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getOrganisationsCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getOrganisationsCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    SWGGetOrganisations* output = static_cast<SWGGetOrganisations*>(create(json, QString("SWGGetOrganisations")));
    worker->deleteLater();

    emit getOrganisationsSignal(output);
    emit getOrganisationsSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineBranchByOrg(QString* organisation, QString* pipeline, QString* branch) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches/{branch}/");

    QString organisationPathParam("{"); organisationPathParam.append("organisation").append("}");
    fullPath.replace(organisationPathParam, stringValue(organisation));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));
    QString branchPathParam("{"); branchPathParam.append("branch").append("}");
    fullPath.replace(branchPathParam, stringValue(branch));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineBranchByOrgCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineBranchByOrgCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    SWGIojenkinsblueoceanrestimplpipelineBranchImpl* output = static_cast<SWGIojenkinsblueoceanrestimplpipelineBranchImpl*>(create(json, QString("SWGIojenkinsblueoceanrestimplpipelineBranchImpl")));
    worker->deleteLater();

    emit getPipelineBranchByOrgSignal(output);
    emit getPipelineBranchByOrgSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineBranchesByOrg(QString* organisation, QString* pipeline) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches");

    QString organisationPathParam("{"); organisationPathParam.append("organisation").append("}");
    fullPath.replace(organisationPathParam, stringValue(organisation));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineBranchesByOrgCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineBranchesByOrgCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    SWGGetMultibranchPipeline* output = static_cast<SWGGetMultibranchPipeline*>(create(json, QString("SWGGetMultibranchPipeline")));
    worker->deleteLater();

    emit getPipelineBranchesByOrgSignal(output);
    emit getPipelineBranchesByOrgSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineByOrg(QString* organisation, QString* pipeline) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organisation}/pipelines/{pipeline}");

    QString organisationPathParam("{"); organisationPathParam.append("organisation").append("}");
    fullPath.replace(organisationPathParam, stringValue(organisation));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineByOrgCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineByOrgCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    SWGSwaggyjenkinsPipeline* output = static_cast<SWGSwaggyjenkinsPipeline*>(create(json, QString("SWGSwaggyjenkinsPipeline")));
    worker->deleteLater();

    emit getPipelineByOrgSignal(output);
    emit getPipelineByOrgSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineFolderByOrg(QString* organisation, QString* folder) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organisation}/pipelines/{folder}/");

    QString organisationPathParam("{"); organisationPathParam.append("organisation").append("}");
    fullPath.replace(organisationPathParam, stringValue(organisation));
    QString folderPathParam("{"); folderPathParam.append("folder").append("}");
    fullPath.replace(folderPathParam, stringValue(folder));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineFolderByOrgCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineFolderByOrgCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    SWGIojenkinsblueoceanserviceembeddedrestPipelineFolderImpl* output = static_cast<SWGIojenkinsblueoceanserviceembeddedrestPipelineFolderImpl*>(create(json, QString("SWGIojenkinsblueoceanserviceembeddedrestPipelineFolderImpl")));
    worker->deleteLater();

    emit getPipelineFolderByOrgSignal(output);
    emit getPipelineFolderByOrgSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineFolderByOrg_1(QString* organisation, QString* pipeline, QString* folder) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organisation}/pipelines/{folder}/pipelines/{pipeline}");

    QString organisationPathParam("{"); organisationPathParam.append("organisation").append("}");
    fullPath.replace(organisationPathParam, stringValue(organisation));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));
    QString folderPathParam("{"); folderPathParam.append("folder").append("}");
    fullPath.replace(folderPathParam, stringValue(folder));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineFolderByOrg_1Callback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineFolderByOrg_1Callback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    SWGIojenkinsblueoceanserviceembeddedrestPipelineImpl* output = static_cast<SWGIojenkinsblueoceanserviceembeddedrestPipelineImpl*>(create(json, QString("SWGIojenkinsblueoceanserviceembeddedrestPipelineImpl")));
    worker->deleteLater();

    emit getPipelineFolderByOrg_1Signal(output);
    emit getPipelineFolderByOrg_1SignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelinesByOrg(QString* organisation) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organisation}/pipelines/");

    QString organisationPathParam("{"); organisationPathParam.append("organisation").append("}");
    fullPath.replace(organisationPathParam, stringValue(organisation));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelinesByOrgCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelinesByOrgCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    SWGGetPipelines* output = static_cast<SWGGetPipelines*>(create(json, QString("SWGGetPipelines")));
    worker->deleteLater();

    emit getPipelinesByOrgSignal(output);
    emit getPipelinesByOrgSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getUser(QString* organisation, QString* user) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organisation}/users/{user}");

    QString organisationPathParam("{"); organisationPathParam.append("organisation").append("}");
    fullPath.replace(organisationPathParam, stringValue(organisation));
    QString userPathParam("{"); userPathParam.append("user").append("}");
    fullPath.replace(userPathParam, stringValue(user));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getUserCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getUserCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    SWGSwaggyjenkinsUser* output = static_cast<SWGSwaggyjenkinsUser*>(create(json, QString("SWGSwaggyjenkinsUser")));
    worker->deleteLater();

    emit getUserSignal(output);
    emit getUserSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getUsers(QString* organisation) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organisation}/users/");

    QString organisationPathParam("{"); organisationPathParam.append("organisation").append("}");
    fullPath.replace(organisationPathParam, stringValue(organisation));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getUsersCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getUsersCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    SWGSwaggyjenkinsUser* output = static_cast<SWGSwaggyjenkinsUser*>(create(json, QString("SWGSwaggyjenkinsUser")));
    worker->deleteLater();

    emit getUsersSignal(output);
    emit getUsersSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::search(QString* q) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/classes/");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("q"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(q)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::searchCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::searchCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    worker->deleteLater();

    emit searchSignal(output);
    emit searchSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::search_2(QString* q) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/search/");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("q"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(q)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::search_2Callback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::search_2Callback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    worker->deleteLater();

    emit search_2Signal(output);
    emit search_2SignalE(output, error_type, error_str);
}


}
