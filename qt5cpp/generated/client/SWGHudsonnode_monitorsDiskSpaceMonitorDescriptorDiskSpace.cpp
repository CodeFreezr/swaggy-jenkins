/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace(QString* json) {
    init();
    this->fromJson(*json);
}

SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace() {
    init();
}

SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::~SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace() {
    this->cleanup();
}

void
SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::init() {
    _class = new QString("");
    timestamp = 0;
    path = new QString("");
    size = 0;
}

void
SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::cleanup() {
    
    if(_class != nullptr) {
        delete _class;
    }


    if(path != nullptr) {
        delete path;
    }

}

SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace*
SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&_class, pJson["_class"], "QString", "QString");
    ::Swagger::setValue(&timestamp, pJson["timestamp"], "qint32", "");
    ::Swagger::setValue(&path, pJson["path"], "QString", "QString");
    ::Swagger::setValue(&size, pJson["size"], "qint32", "");
}

QString
SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("_class"), _class, obj, QString("QString"));

    obj->insert("timestamp", QJsonValue(timestamp));

    toJsonValue(QString("path"), path, obj, QString("QString"));

    obj->insert("size", QJsonValue(size));

    return obj;
}

QString*
SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::getClass() {
    return _class;
}
void
SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::setClass(QString* _class) {
    this->_class = _class;
}

qint32
SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::getTimestamp() {
    return timestamp;
}
void
SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::setTimestamp(qint32 timestamp) {
    this->timestamp = timestamp;
}

QString*
SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::getPath() {
    return path;
}
void
SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::setPath(QString* path) {
    this->path = path;
}

qint32
SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::getSize() {
    return size;
}
void
SWGHudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::setSize(qint32 size) {
    this->size = size;
}


}

