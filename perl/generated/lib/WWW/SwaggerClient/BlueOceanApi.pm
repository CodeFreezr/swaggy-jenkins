=begin comment

Swaggy Jenkins

Jenkins API clients generated from Swagger / Open API specification

OpenAPI spec version: 0.1.0
Contact: blah@cliffano.com
Generated by: https://github.com/swagger-api/swagger-codegen.git

=end comment

=cut

#
# NOTE: This class is auto generated by the swagger code generator program. 
# Do not edit the class manually.
# Ref: https://github.com/swagger-api/swagger-codegen
#
package WWW::SwaggerClient::BlueOceanApi;

require 5.6.0;
use strict;
use warnings;
use utf8; 
use Exporter;
use Carp qw( croak );
use Log::Any qw($log);

use WWW::SwaggerClient::ApiClient;
use WWW::SwaggerClient::Configuration;

use base "Class::Data::Inheritable";

__PACKAGE__->mk_classdata('method_documentation' => {});

sub new {
    my $class   = shift;
    my (%self) = (
        'api_client' => WWW::SwaggerClient::ApiClient->instance,
        @_
    );

    #my $self = {
    #    #api_client => $options->{api_client}
    #    api_client => $default_api_client
    #}; 

    bless \%self, $class;

}


#
# get_authenticated_user
#
# 
# 
# @param string $organisation Name of the organisation (required)
{
    my $params = {
    'organisation' => {
        data_type => 'string',
        description => 'Name of the organisation',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_authenticated_user' } = { 
    	summary => '',
        params => $params,
        returns => 'SwaggyjenkinsUser',
        };
}
# @return SwaggyjenkinsUser
#
sub get_authenticated_user {
    my ($self, %args) = @_;

    # verify the required parameter 'organisation' is set
    unless (exists $args{'organisation'}) {
      croak("Missing the required parameter 'organisation' when calling get_authenticated_user");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organisation}/user/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organisation'}) {
        my $_base_variable = "{" . "organisation" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organisation'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SwaggyjenkinsUser', $response);
    return $_response_object;
}

#
# get_classes
#
# 
# 
# @param string $class Name of the class (required)
{
    my $params = {
    'class' => {
        data_type => 'string',
        description => 'Name of the class',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_classes' } = { 
    	summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub get_classes {
    my ($self, %args) = @_;

    # verify the required parameter 'class' is set
    unless (exists $args{'class'}) {
      croak("Missing the required parameter 'class' when calling get_classes");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/classes/{class}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'class'}) {
        my $_base_variable = "{" . "class" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'class'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# get_organisation
#
# 
# 
# @param string $organisation Name of the organisation (required)
{
    my $params = {
    'organisation' => {
        data_type => 'string',
        description => 'Name of the organisation',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_organisation' } = { 
    	summary => '',
        params => $params,
        returns => 'SwaggyjenkinsOrganisation',
        };
}
# @return SwaggyjenkinsOrganisation
#
sub get_organisation {
    my ($self, %args) = @_;

    # verify the required parameter 'organisation' is set
    unless (exists $args{'organisation'}) {
      croak("Missing the required parameter 'organisation' when calling get_organisation");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organisation}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organisation'}) {
        my $_base_variable = "{" . "organisation" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organisation'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SwaggyjenkinsOrganisation', $response);
    return $_response_object;
}

#
# get_organisations
#
# 
# 
{
    my $params = {
    };
    __PACKAGE__->method_documentation->{ 'get_organisations' } = { 
    	summary => '',
        params => $params,
        returns => 'GetOrganisations',
        };
}
# @return GetOrganisations
#
sub get_organisations {
    my ($self, %args) = @_;

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetOrganisations', $response);
    return $_response_object;
}

#
# get_pipeline_branch_by_org
#
# 
# 
# @param string $organisation Name of the organisation (required)
# @param string $pipeline Name of the pipeline (required)
# @param string $branch Name of the branch (required)
{
    my $params = {
    'organisation' => {
        data_type => 'string',
        description => 'Name of the organisation',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    'branch' => {
        data_type => 'string',
        description => 'Name of the branch',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_branch_by_org' } = { 
    	summary => '',
        params => $params,
        returns => 'IojenkinsblueoceanrestimplpipelineBranchImpl',
        };
}
# @return IojenkinsblueoceanrestimplpipelineBranchImpl
#
sub get_pipeline_branch_by_org {
    my ($self, %args) = @_;

    # verify the required parameter 'organisation' is set
    unless (exists $args{'organisation'}) {
      croak("Missing the required parameter 'organisation' when calling get_pipeline_branch_by_org");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_branch_by_org");
    }

    # verify the required parameter 'branch' is set
    unless (exists $args{'branch'}) {
      croak("Missing the required parameter 'branch' when calling get_pipeline_branch_by_org");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches/{branch}/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organisation'}) {
        my $_base_variable = "{" . "organisation" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organisation'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'branch'}) {
        my $_base_variable = "{" . "branch" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'branch'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('IojenkinsblueoceanrestimplpipelineBranchImpl', $response);
    return $_response_object;
}

#
# get_pipeline_branches_by_org
#
# 
# 
# @param string $organisation Name of the organisation (required)
# @param string $pipeline Name of the pipeline (required)
{
    my $params = {
    'organisation' => {
        data_type => 'string',
        description => 'Name of the organisation',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_branches_by_org' } = { 
    	summary => '',
        params => $params,
        returns => 'GetMultibranchPipeline',
        };
}
# @return GetMultibranchPipeline
#
sub get_pipeline_branches_by_org {
    my ($self, %args) = @_;

    # verify the required parameter 'organisation' is set
    unless (exists $args{'organisation'}) {
      croak("Missing the required parameter 'organisation' when calling get_pipeline_branches_by_org");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_branches_by_org");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organisation'}) {
        my $_base_variable = "{" . "organisation" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organisation'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetMultibranchPipeline', $response);
    return $_response_object;
}

#
# get_pipeline_by_org
#
# 
# 
# @param string $organisation Name of the organisation (required)
# @param string $pipeline Name of the pipeline (required)
{
    my $params = {
    'organisation' => {
        data_type => 'string',
        description => 'Name of the organisation',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_by_org' } = { 
    	summary => '',
        params => $params,
        returns => 'SwaggyjenkinsPipeline',
        };
}
# @return SwaggyjenkinsPipeline
#
sub get_pipeline_by_org {
    my ($self, %args) = @_;

    # verify the required parameter 'organisation' is set
    unless (exists $args{'organisation'}) {
      croak("Missing the required parameter 'organisation' when calling get_pipeline_by_org");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_by_org");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organisation}/pipelines/{pipeline}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organisation'}) {
        my $_base_variable = "{" . "organisation" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organisation'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SwaggyjenkinsPipeline', $response);
    return $_response_object;
}

#
# get_pipeline_folder_by_org
#
# 
# 
# @param string $organisation Name of the organisation (required)
# @param string $folder Name of the folder (required)
{
    my $params = {
    'organisation' => {
        data_type => 'string',
        description => 'Name of the organisation',
        required => '1',
    },
    'folder' => {
        data_type => 'string',
        description => 'Name of the folder',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_folder_by_org' } = { 
    	summary => '',
        params => $params,
        returns => 'IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl',
        };
}
# @return IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl
#
sub get_pipeline_folder_by_org {
    my ($self, %args) = @_;

    # verify the required parameter 'organisation' is set
    unless (exists $args{'organisation'}) {
      croak("Missing the required parameter 'organisation' when calling get_pipeline_folder_by_org");
    }

    # verify the required parameter 'folder' is set
    unless (exists $args{'folder'}) {
      croak("Missing the required parameter 'folder' when calling get_pipeline_folder_by_org");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organisation}/pipelines/{folder}/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organisation'}) {
        my $_base_variable = "{" . "organisation" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organisation'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'folder'}) {
        my $_base_variable = "{" . "folder" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'folder'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl', $response);
    return $_response_object;
}

#
# get_pipeline_folder_by_org_0
#
# 
# 
# @param string $organisation Name of the organisation (required)
# @param string $pipeline Name of the pipeline (required)
# @param string $folder Name of the folder (required)
{
    my $params = {
    'organisation' => {
        data_type => 'string',
        description => 'Name of the organisation',
        required => '1',
    },
    'pipeline' => {
        data_type => 'string',
        description => 'Name of the pipeline',
        required => '1',
    },
    'folder' => {
        data_type => 'string',
        description => 'Name of the folder',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipeline_folder_by_org_0' } = { 
    	summary => '',
        params => $params,
        returns => 'IojenkinsblueoceanserviceembeddedrestPipelineImpl',
        };
}
# @return IojenkinsblueoceanserviceembeddedrestPipelineImpl
#
sub get_pipeline_folder_by_org_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'organisation' is set
    unless (exists $args{'organisation'}) {
      croak("Missing the required parameter 'organisation' when calling get_pipeline_folder_by_org_0");
    }

    # verify the required parameter 'pipeline' is set
    unless (exists $args{'pipeline'}) {
      croak("Missing the required parameter 'pipeline' when calling get_pipeline_folder_by_org_0");
    }

    # verify the required parameter 'folder' is set
    unless (exists $args{'folder'}) {
      croak("Missing the required parameter 'folder' when calling get_pipeline_folder_by_org_0");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organisation}/pipelines/{folder}/pipelines/{pipeline}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organisation'}) {
        my $_base_variable = "{" . "organisation" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organisation'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'pipeline'}) {
        my $_base_variable = "{" . "pipeline" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'pipeline'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'folder'}) {
        my $_base_variable = "{" . "folder" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'folder'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('IojenkinsblueoceanserviceembeddedrestPipelineImpl', $response);
    return $_response_object;
}

#
# get_pipelines_by_org
#
# 
# 
# @param string $organisation Name of the organisation (required)
{
    my $params = {
    'organisation' => {
        data_type => 'string',
        description => 'Name of the organisation',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_pipelines_by_org' } = { 
    	summary => '',
        params => $params,
        returns => 'GetPipelines',
        };
}
# @return GetPipelines
#
sub get_pipelines_by_org {
    my ($self, %args) = @_;

    # verify the required parameter 'organisation' is set
    unless (exists $args{'organisation'}) {
      croak("Missing the required parameter 'organisation' when calling get_pipelines_by_org");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organisation}/pipelines/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organisation'}) {
        my $_base_variable = "{" . "organisation" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organisation'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('GetPipelines', $response);
    return $_response_object;
}

#
# get_user
#
# 
# 
# @param string $organisation Name of the organisation (required)
# @param string $user Name of the user (required)
{
    my $params = {
    'organisation' => {
        data_type => 'string',
        description => 'Name of the organisation',
        required => '1',
    },
    'user' => {
        data_type => 'string',
        description => 'Name of the user',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_user' } = { 
    	summary => '',
        params => $params,
        returns => 'SwaggyjenkinsUser',
        };
}
# @return SwaggyjenkinsUser
#
sub get_user {
    my ($self, %args) = @_;

    # verify the required parameter 'organisation' is set
    unless (exists $args{'organisation'}) {
      croak("Missing the required parameter 'organisation' when calling get_user");
    }

    # verify the required parameter 'user' is set
    unless (exists $args{'user'}) {
      croak("Missing the required parameter 'user' when calling get_user");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organisation}/users/{user}';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organisation'}) {
        my $_base_variable = "{" . "organisation" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organisation'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    # path params
    if ( exists $args{'user'}) {
        my $_base_variable = "{" . "user" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'user'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SwaggyjenkinsUser', $response);
    return $_response_object;
}

#
# get_users
#
# 
# 
# @param string $organisation Name of the organisation (required)
{
    my $params = {
    'organisation' => {
        data_type => 'string',
        description => 'Name of the organisation',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'get_users' } = { 
    	summary => '',
        params => $params,
        returns => 'SwaggyjenkinsUser',
        };
}
# @return SwaggyjenkinsUser
#
sub get_users {
    my ($self, %args) = @_;

    # verify the required parameter 'organisation' is set
    unless (exists $args{'organisation'}) {
      croak("Missing the required parameter 'organisation' when calling get_users");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/organizations/{organisation}/users/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # path params
    if ( exists $args{'organisation'}) {
        my $_base_variable = "{" . "organisation" . "}";
        my $_base_value = $self->{api_client}->to_path_value($args{'organisation'});
        $_resource_path =~ s/$_base_variable/$_base_value/g;
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('SwaggyjenkinsUser', $response);
    return $_response_object;
}

#
# search
#
# 
# 
# @param string $q Query string containing an array of class names (required)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Query string containing an array of class names',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'search' } = { 
    	summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub search {
    my ($self, %args) = @_;

    # verify the required parameter 'q' is set
    unless (exists $args{'q'}) {
      croak("Missing the required parameter 'q' when calling search");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/classes/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

#
# search_0
#
# 
# 
# @param string $q Query string (required)
{
    my $params = {
    'q' => {
        data_type => 'string',
        description => 'Query string',
        required => '1',
    },
    };
    __PACKAGE__->method_documentation->{ 'search_0' } = { 
    	summary => '',
        params => $params,
        returns => 'string',
        };
}
# @return string
#
sub search_0 {
    my ($self, %args) = @_;

    # verify the required parameter 'q' is set
    unless (exists $args{'q'}) {
      croak("Missing the required parameter 'q' when calling search_0");
    }

    # parse inputs
    my $_resource_path = '/blue/rest/search/';

    my $_method = 'GET';
    my $query_params = {};
    my $header_params = {};
    my $form_params = {};

    # 'Accept' and 'Content-Type' header
    my $_header_accept = $self->{api_client}->select_header_accept('application/json');
    if ($_header_accept) {
        $header_params->{'Accept'} = $_header_accept;
    }
    $header_params->{'Content-Type'} = $self->{api_client}->select_header_content_type();

    # query params
    if ( exists $args{'q'}) {
        $query_params->{'q'} = $self->{api_client}->to_query_value($args{'q'});
    }

    my $_body_data;
    # authentication setting, if any
    my $auth_settings = [qw()];

    # make the API Call
    my $response = $self->{api_client}->call_api($_resource_path, $_method,
                                           $query_params, $form_params,
                                           $header_params, $_body_data, $auth_settings);
    if (!$response) {
        return;
    }
    my $_response_object = $self->{api_client}->deserialize('string', $response);
    return $_response_object;
}

1;
