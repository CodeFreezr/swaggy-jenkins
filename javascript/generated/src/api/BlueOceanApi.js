/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GetMultibranchPipeline', 'model/GetOrganisations', 'model/GetPipelines', 'model/IojenkinsblueoceanrestimplpipelineBranchImpl', 'model/IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl', 'model/IojenkinsblueoceanserviceembeddedrestPipelineImpl', 'model/SwaggyjenkinsOrganisation', 'model/SwaggyjenkinsPipeline', 'model/SwaggyjenkinsUser'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GetMultibranchPipeline'), require('../model/GetOrganisations'), require('../model/GetPipelines'), require('../model/IojenkinsblueoceanrestimplpipelineBranchImpl'), require('../model/IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl'), require('../model/IojenkinsblueoceanserviceembeddedrestPipelineImpl'), require('../model/SwaggyjenkinsOrganisation'), require('../model/SwaggyjenkinsPipeline'), require('../model/SwaggyjenkinsUser'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggyJenkins) {
      root.SwaggyJenkins = {};
    }
    root.SwaggyJenkins.BlueOceanApi = factory(root.SwaggyJenkins.ApiClient, root.SwaggyJenkins.GetMultibranchPipeline, root.SwaggyJenkins.GetOrganisations, root.SwaggyJenkins.GetPipelines, root.SwaggyJenkins.IojenkinsblueoceanrestimplpipelineBranchImpl, root.SwaggyJenkins.IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl, root.SwaggyJenkins.IojenkinsblueoceanserviceembeddedrestPipelineImpl, root.SwaggyJenkins.SwaggyjenkinsOrganisation, root.SwaggyJenkins.SwaggyjenkinsPipeline, root.SwaggyJenkins.SwaggyjenkinsUser);
  }
}(this, function(ApiClient, GetMultibranchPipeline, GetOrganisations, GetPipelines, IojenkinsblueoceanrestimplpipelineBranchImpl, IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl, IojenkinsblueoceanserviceembeddedrestPipelineImpl, SwaggyjenkinsOrganisation, SwaggyjenkinsPipeline, SwaggyjenkinsUser) {
  'use strict';

  /**
   * BlueOcean service.
   * @module api/BlueOceanApi
   * @version 0.0.2
   */

  /**
   * Constructs a new BlueOceanApi. 
   * @alias module:api/BlueOceanApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getAuthenticatedUser operation.
     * @callback module:api/BlueOceanApi~getAuthenticatedUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwaggyjenkinsUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve authenticated user details for an organisation
     * @param {String} organisation Name of the organisation
     * @param {module:api/BlueOceanApi~getAuthenticatedUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwaggyjenkinsUser}
     */
    this.getAuthenticatedUser = function(organisation, callback) {
      var postBody = null;

      // verify the required parameter 'organisation' is set
      if (organisation === undefined || organisation === null) {
        throw new Error("Missing the required parameter 'organisation' when calling getAuthenticatedUser");
      }


      var pathParams = {
        'organisation': organisation
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SwaggyjenkinsUser;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organisation}/user/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getClasses operation.
     * @callback module:api/BlueOceanApi~getClassesCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of class names supported by a given class
     * @param {String} _class Name of the class
     * @param {module:api/BlueOceanApi~getClassesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getClasses = function(_class, callback) {
      var postBody = null;

      // verify the required parameter '_class' is set
      if (_class === undefined || _class === null) {
        throw new Error("Missing the required parameter '_class' when calling getClasses");
      }


      var pathParams = {
        'class': _class
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/blue/rest/classes/{class}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisation operation.
     * @callback module:api/BlueOceanApi~getOrganisationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwaggyjenkinsOrganisation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve organisation details
     * @param {String} organisation Name of the organisation
     * @param {module:api/BlueOceanApi~getOrganisationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwaggyjenkinsOrganisation}
     */
    this.getOrganisation = function(organisation, callback) {
      var postBody = null;

      // verify the required parameter 'organisation' is set
      if (organisation === undefined || organisation === null) {
        throw new Error("Missing the required parameter 'organisation' when calling getOrganisation");
      }


      var pathParams = {
        'organisation': organisation
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SwaggyjenkinsOrganisation;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organisation}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrganisations operation.
     * @callback module:api/BlueOceanApi~getOrganisationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrganisations} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all organisations details
     * @param {module:api/BlueOceanApi~getOrganisationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrganisations}
     */
    this.getOrganisations = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetOrganisations;

      return this.apiClient.callApi(
        '/blue/rest/organizations/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineBranchByOrg operation.
     * @callback module:api/BlueOceanApi~getPipelineBranchByOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IojenkinsblueoceanrestimplpipelineBranchImpl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve branch details for an organisation pipeline
     * @param {String} organisation Name of the organisation
     * @param {String} pipeline Name of the pipeline
     * @param {String} branch Name of the branch
     * @param {module:api/BlueOceanApi~getPipelineBranchByOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IojenkinsblueoceanrestimplpipelineBranchImpl}
     */
    this.getPipelineBranchByOrg = function(organisation, pipeline, branch, callback) {
      var postBody = null;

      // verify the required parameter 'organisation' is set
      if (organisation === undefined || organisation === null) {
        throw new Error("Missing the required parameter 'organisation' when calling getPipelineBranchByOrg");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineBranchByOrg");
      }

      // verify the required parameter 'branch' is set
      if (branch === undefined || branch === null) {
        throw new Error("Missing the required parameter 'branch' when calling getPipelineBranchByOrg");
      }


      var pathParams = {
        'organisation': organisation,
        'pipeline': pipeline,
        'branch': branch
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = IojenkinsblueoceanrestimplpipelineBranchImpl;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches/{branch}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineBranchesByOrg operation.
     * @callback module:api/BlueOceanApi~getPipelineBranchesByOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetMultibranchPipeline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all branches details for an organisation pipeline
     * @param {String} organisation Name of the organisation
     * @param {String} pipeline Name of the pipeline
     * @param {module:api/BlueOceanApi~getPipelineBranchesByOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetMultibranchPipeline}
     */
    this.getPipelineBranchesByOrg = function(organisation, pipeline, callback) {
      var postBody = null;

      // verify the required parameter 'organisation' is set
      if (organisation === undefined || organisation === null) {
        throw new Error("Missing the required parameter 'organisation' when calling getPipelineBranchesByOrg");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineBranchesByOrg");
      }


      var pathParams = {
        'organisation': organisation,
        'pipeline': pipeline
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetMultibranchPipeline;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineByOrg operation.
     * @callback module:api/BlueOceanApi~getPipelineByOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwaggyjenkinsPipeline} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve pipeline details for an organisation
     * @param {String} organisation Name of the organisation
     * @param {String} pipeline Name of the pipeline
     * @param {module:api/BlueOceanApi~getPipelineByOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwaggyjenkinsPipeline}
     */
    this.getPipelineByOrg = function(organisation, pipeline, callback) {
      var postBody = null;

      // verify the required parameter 'organisation' is set
      if (organisation === undefined || organisation === null) {
        throw new Error("Missing the required parameter 'organisation' when calling getPipelineByOrg");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineByOrg");
      }


      var pathParams = {
        'organisation': organisation,
        'pipeline': pipeline
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SwaggyjenkinsPipeline;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organisation}/pipelines/{pipeline}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineFolderByOrg operation.
     * @callback module:api/BlueOceanApi~getPipelineFolderByOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve pipeline folder for an organisation
     * @param {String} organisation Name of the organisation
     * @param {String} folder Name of the folder
     * @param {module:api/BlueOceanApi~getPipelineFolderByOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl}
     */
    this.getPipelineFolderByOrg = function(organisation, folder, callback) {
      var postBody = null;

      // verify the required parameter 'organisation' is set
      if (organisation === undefined || organisation === null) {
        throw new Error("Missing the required parameter 'organisation' when calling getPipelineFolderByOrg");
      }

      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling getPipelineFolderByOrg");
      }


      var pathParams = {
        'organisation': organisation,
        'folder': folder
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organisation}/pipelines/{folder}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelineFolderByOrg_0 operation.
     * @callback module:api/BlueOceanApi~getPipelineFolderByOrg_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/IojenkinsblueoceanserviceembeddedrestPipelineImpl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve pipeline details for an organisation folder
     * @param {String} organisation Name of the organisation
     * @param {String} pipeline Name of the pipeline
     * @param {String} folder Name of the folder
     * @param {module:api/BlueOceanApi~getPipelineFolderByOrg_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IojenkinsblueoceanserviceembeddedrestPipelineImpl}
     */
    this.getPipelineFolderByOrg_0 = function(organisation, pipeline, folder, callback) {
      var postBody = null;

      // verify the required parameter 'organisation' is set
      if (organisation === undefined || organisation === null) {
        throw new Error("Missing the required parameter 'organisation' when calling getPipelineFolderByOrg_0");
      }

      // verify the required parameter 'pipeline' is set
      if (pipeline === undefined || pipeline === null) {
        throw new Error("Missing the required parameter 'pipeline' when calling getPipelineFolderByOrg_0");
      }

      // verify the required parameter 'folder' is set
      if (folder === undefined || folder === null) {
        throw new Error("Missing the required parameter 'folder' when calling getPipelineFolderByOrg_0");
      }


      var pathParams = {
        'organisation': organisation,
        'pipeline': pipeline,
        'folder': folder
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = IojenkinsblueoceanserviceembeddedrestPipelineImpl;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organisation}/pipelines/{folder}/pipelines/{pipeline}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getPipelinesByOrg operation.
     * @callback module:api/BlueOceanApi~getPipelinesByOrgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetPipelines} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve all pipelines details for an organisation
     * @param {String} organisation Name of the organisation
     * @param {module:api/BlueOceanApi~getPipelinesByOrgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetPipelines}
     */
    this.getPipelinesByOrg = function(organisation, callback) {
      var postBody = null;

      // verify the required parameter 'organisation' is set
      if (organisation === undefined || organisation === null) {
        throw new Error("Missing the required parameter 'organisation' when calling getPipelinesByOrg");
      }


      var pathParams = {
        'organisation': organisation
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = GetPipelines;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organisation}/pipelines/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/BlueOceanApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwaggyjenkinsUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve user details for an organisation
     * @param {String} organisation Name of the organisation
     * @param {String} user Name of the user
     * @param {module:api/BlueOceanApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwaggyjenkinsUser}
     */
    this.getUser = function(organisation, user, callback) {
      var postBody = null;

      // verify the required parameter 'organisation' is set
      if (organisation === undefined || organisation === null) {
        throw new Error("Missing the required parameter 'organisation' when calling getUser");
      }

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling getUser");
      }


      var pathParams = {
        'organisation': organisation,
        'user': user
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SwaggyjenkinsUser;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organisation}/users/{user}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback module:api/BlueOceanApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SwaggyjenkinsUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve users details for an organisation
     * @param {String} organisation Name of the organisation
     * @param {module:api/BlueOceanApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SwaggyjenkinsUser}
     */
    this.getUsers = function(organisation, callback) {
      var postBody = null;

      // verify the required parameter 'organisation' is set
      if (organisation === undefined || organisation === null) {
        throw new Error("Missing the required parameter 'organisation' when calling getUsers");
      }


      var pathParams = {
        'organisation': organisation
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = SwaggyjenkinsUser;

      return this.apiClient.callApi(
        '/blue/rest/organizations/{organisation}/users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the search operation.
     * @callback module:api/BlueOceanApi~searchCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get classes details
     * @param {String} q Query string containing an array of class names
     * @param {module:api/BlueOceanApi~searchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.search = function(q, callback) {
      var postBody = null;

      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling search");
      }


      var pathParams = {
      };
      var queryParams = {
        'q': q
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/blue/rest/classes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the search_0 operation.
     * @callback module:api/BlueOceanApi~search_0Callback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for any resource details
     * @param {String} q Query string
     * @param {module:api/BlueOceanApi~search_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.search_0 = function(q, callback) {
      var postBody = null;

      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling search_0");
      }


      var pathParams = {
      };
      var queryParams = {
        'q': q
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/blue/rest/search/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
