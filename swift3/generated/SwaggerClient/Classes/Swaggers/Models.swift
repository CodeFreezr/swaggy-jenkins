// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case Error(Int, Data?, Error)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject, AnyObject?) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject, AnyObject?) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0, $1) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> T {
        let key = discriminator;
        if let decoder = decoders[key] {
            return decoder(source, nil) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0, instance: nil) }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value, instance: nil)
        }
        return dictionary
    }

    static func decode<T>(clazz: T.Type, source: AnyObject, instance: AnyObject?) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return (source as! NSNumber).int32Value as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.int64Value as! T;
        }
        if T.self is UUID.Type && source is String {
            return UUID(uuidString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is Data.Type && source is String {
            return Data(base64Encoded: source as! String) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source, instance) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source, instance: nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject, instance: AnyObject?) -> Date in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return date
                    }
                }
            }
            if let sourceInt = source as? Int64 {
                // treat as a java date
                return Date(timeIntervalSince1970: Double(sourceInt / 1000) )
            }
            fatalError("formatter failed to parse \(source)")
        } 

        // Decoder for [GetClassesByClass]
        Decoders.addDecoder(clazz: [GetClassesByClass].self) { (source: AnyObject, instance: AnyObject?) -> [GetClassesByClass] in
            return Decoders.decode(clazz: [GetClassesByClass].self, source: source)
        }
        // Decoder for GetClassesByClass
        Decoders.addDecoder(clazz: GetClassesByClass.self) { (source: AnyObject, instance: AnyObject?) -> GetClassesByClass in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GetClassesByClass() : instance as! GetClassesByClass
            
            result.classes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["classes"] as AnyObject?)
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [GetMultibranchPipeline]
        Decoders.addDecoder(clazz: [GetMultibranchPipeline].self) { (source: AnyObject, instance: AnyObject?) -> [GetMultibranchPipeline] in
            return Decoders.decode(clazz: [GetMultibranchPipeline].self, source: source)
        }
        // Decoder for GetMultibranchPipeline
        Decoders.addDecoder(clazz: GetMultibranchPipeline.self) { (source: AnyObject, instance: AnyObject?) -> GetMultibranchPipeline in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GetMultibranchPipeline() : instance as! GetMultibranchPipeline
            
            result.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?)
            result.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"] as AnyObject?)
            result.latestRun = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["latestRun"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?)
            result.weatherScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"] as AnyObject?)
            result.branchNames = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["branchNames"] as AnyObject?)
            result.numberOfFailingBranches = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfFailingBranches"] as AnyObject?)
            result.numberOfFailingPullRequests = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfFailingPullRequests"] as AnyObject?)
            result.numberOfSuccessfulBranches = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfSuccessfulBranches"] as AnyObject?)
            result.numberOfSuccessfulPullRequests = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfSuccessfulPullRequests"] as AnyObject?)
            result.totalNumberOfBranches = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalNumberOfBranches"] as AnyObject?)
            result.totalNumberOfPullRequests = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalNumberOfPullRequests"] as AnyObject?)
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [GetOrganisations]
        Decoders.addDecoder(clazz: [GetOrganisations].self) { (source: AnyObject, instance: AnyObject?) -> [GetOrganisations] in
            return Decoders.decode(clazz: [GetOrganisations].self, source: source)
        }
        // Decoder for GetOrganisations
        Decoders.addDecoder(clazz: GetOrganisations.self) { (source: AnyObject, instance: AnyObject?) -> GetOrganisations in
            let sourceArray = source as! [AnyObject]
            return sourceArray.map({ Decoders.decode(clazz: SwaggyjenkinsOrganisation.self, source: $0, instance: nil) })
        }


        // Decoder for [GetPipelineBranches]
        Decoders.addDecoder(clazz: [GetPipelineBranches].self) { (source: AnyObject, instance: AnyObject?) -> [GetPipelineBranches] in
            return Decoders.decode(clazz: [GetPipelineBranches].self, source: source)
        }
        // Decoder for GetPipelineBranches
        Decoders.addDecoder(clazz: GetPipelineBranches.self) { (source: AnyObject, instance: AnyObject?) -> GetPipelineBranches in
            let sourceArray = source as! [AnyObject]
            return sourceArray.map({ Decoders.decode(clazz: GetPipelineBranchesitem.self, source: $0, instance: nil) })
        }


        // Decoder for [GetPipelineBranchesitem]
        Decoders.addDecoder(clazz: [GetPipelineBranchesitem].self) { (source: AnyObject, instance: AnyObject?) -> [GetPipelineBranchesitem] in
            return Decoders.decode(clazz: [GetPipelineBranchesitem].self, source: source)
        }
        // Decoder for GetPipelineBranchesitem
        Decoders.addDecoder(clazz: GetPipelineBranchesitem.self) { (source: AnyObject, instance: AnyObject?) -> GetPipelineBranchesitem in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GetPipelineBranchesitem() : instance as! GetPipelineBranchesitem
            
            result.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?)
            result.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.weatherScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"] as AnyObject?)
            result.latestRun = Decoders.decodeOptional(clazz: GetPipelineBranchesitemLatestRun.self, source: sourceDictionary["latestRun"] as AnyObject?)
            result.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?)
            result.pullRequest = Decoders.decodeOptional(clazz: GetPipelineBranchesitemPullRequest.self, source: sourceDictionary["pullRequest"] as AnyObject?)
            result.totalNumberOfPullRequests = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalNumberOfPullRequests"] as AnyObject?)
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [GetPipelineBranchesitemLatestRun]
        Decoders.addDecoder(clazz: [GetPipelineBranchesitemLatestRun].self) { (source: AnyObject, instance: AnyObject?) -> [GetPipelineBranchesitemLatestRun] in
            return Decoders.decode(clazz: [GetPipelineBranchesitemLatestRun].self, source: source)
        }
        // Decoder for GetPipelineBranchesitemLatestRun
        Decoders.addDecoder(clazz: GetPipelineBranchesitemLatestRun.self) { (source: AnyObject, instance: AnyObject?) -> GetPipelineBranchesitemLatestRun in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GetPipelineBranchesitemLatestRun() : instance as! GetPipelineBranchesitemLatestRun
            
            result.durationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"] as AnyObject?)
            result.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"] as AnyObject?)
            result.enQueueTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enQueueTime"] as AnyObject?)
            result.endTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endTime"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?)
            result.pipeline = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pipeline"] as AnyObject?)
            result.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"] as AnyObject?)
            result.runSummary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["runSummary"] as AnyObject?)
            result.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"] as AnyObject?)
            result.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.commitId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commitId"] as AnyObject?)
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [GetPipelineBranchesitemPullRequest]
        Decoders.addDecoder(clazz: [GetPipelineBranchesitemPullRequest].self) { (source: AnyObject, instance: AnyObject?) -> [GetPipelineBranchesitemPullRequest] in
            return Decoders.decode(clazz: [GetPipelineBranchesitemPullRequest].self, source: source)
        }
        // Decoder for GetPipelineBranchesitemPullRequest
        Decoders.addDecoder(clazz: GetPipelineBranchesitemPullRequest.self) { (source: AnyObject, instance: AnyObject?) -> GetPipelineBranchesitemPullRequest in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GetPipelineBranchesitemPullRequest() : instance as! GetPipelineBranchesitemPullRequest
            
            result.links = Decoders.decodeOptional(clazz: GetPipelineBranchesitemPullRequestLinks.self, source: sourceDictionary["_links"] as AnyObject?)
            result.author = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["author"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?)
            result.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [GetPipelineBranchesitemPullRequestLinks]
        Decoders.addDecoder(clazz: [GetPipelineBranchesitemPullRequestLinks].self) { (source: AnyObject, instance: AnyObject?) -> [GetPipelineBranchesitemPullRequestLinks] in
            return Decoders.decode(clazz: [GetPipelineBranchesitemPullRequestLinks].self, source: source)
        }
        // Decoder for GetPipelineBranchesitemPullRequestLinks
        Decoders.addDecoder(clazz: GetPipelineBranchesitemPullRequestLinks.self) { (source: AnyObject, instance: AnyObject?) -> GetPipelineBranchesitemPullRequestLinks in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? GetPipelineBranchesitemPullRequestLinks() : instance as! GetPipelineBranchesitemPullRequestLinks
            
            result._self = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["self"] as AnyObject?)
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [GetPipelines]
        Decoders.addDecoder(clazz: [GetPipelines].self) { (source: AnyObject, instance: AnyObject?) -> [GetPipelines] in
            return Decoders.decode(clazz: [GetPipelines].self, source: source)
        }
        // Decoder for GetPipelines
        Decoders.addDecoder(clazz: GetPipelines.self) { (source: AnyObject, instance: AnyObject?) -> GetPipelines in
            let sourceArray = source as! [AnyObject]
            return sourceArray.map({ Decoders.decode(clazz: SwaggyjenkinsPipeline.self, source: $0, instance: nil) })
        }


        // Decoder for [GetUsers]
        Decoders.addDecoder(clazz: [GetUsers].self) { (source: AnyObject, instance: AnyObject?) -> [GetUsers] in
            return Decoders.decode(clazz: [GetUsers].self, source: source)
        }
        // Decoder for GetUsers
        Decoders.addDecoder(clazz: GetUsers.self) { (source: AnyObject, instance: AnyObject?) -> GetUsers in
            let sourceArray = source as! [AnyObject]
            return sourceArray.map({ Decoders.decode(clazz: SwaggyjenkinsUser.self, source: $0, instance: nil) })
        }


        // Decoder for [HudsonmodelAllView]
        Decoders.addDecoder(clazz: [HudsonmodelAllView].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelAllView] in
            return Decoders.decode(clazz: [HudsonmodelAllView].self, source: source)
        }
        // Decoder for HudsonmodelAllView
        Decoders.addDecoder(clazz: HudsonmodelAllView.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelAllView in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelAllView() : instance as! HudsonmodelAllView
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelCauseAction]
        Decoders.addDecoder(clazz: [HudsonmodelCauseAction].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelCauseAction] in
            return Decoders.decode(clazz: [HudsonmodelCauseAction].self, source: source)
        }
        // Decoder for HudsonmodelCauseAction
        Decoders.addDecoder(clazz: HudsonmodelCauseAction.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelCauseAction in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelCauseAction() : instance as! HudsonmodelCauseAction
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.causes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["causes"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelCauseUserIdCause]
        Decoders.addDecoder(clazz: [HudsonmodelCauseUserIdCause].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelCauseUserIdCause] in
            return Decoders.decode(clazz: [HudsonmodelCauseUserIdCause].self, source: source)
        }
        // Decoder for HudsonmodelCauseUserIdCause
        Decoders.addDecoder(clazz: HudsonmodelCauseUserIdCause.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelCauseUserIdCause in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelCauseUserIdCause() : instance as! HudsonmodelCauseUserIdCause
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shortDescription"] as AnyObject?)
            result.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"] as AnyObject?)
            result.userName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userName"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelComputerSet]
        Decoders.addDecoder(clazz: [HudsonmodelComputerSet].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelComputerSet] in
            return Decoders.decode(clazz: [HudsonmodelComputerSet].self, source: source)
        }
        // Decoder for HudsonmodelComputerSet
        Decoders.addDecoder(clazz: HudsonmodelComputerSet.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelComputerSet in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelComputerSet() : instance as! HudsonmodelComputerSet
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.busyExecutors = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["busyExecutors"] as AnyObject?)
            result.computer = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["computer"] as AnyObject?)
            result.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?)
            result.totalExecutors = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalExecutors"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelFreeStyleBuild]
        Decoders.addDecoder(clazz: [HudsonmodelFreeStyleBuild].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelFreeStyleBuild] in
            return Decoders.decode(clazz: [HudsonmodelFreeStyleBuild].self, source: source)
        }
        // Decoder for HudsonmodelFreeStyleBuild
        Decoders.addDecoder(clazz: HudsonmodelFreeStyleBuild.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelFreeStyleBuild in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelFreeStyleBuild() : instance as! HudsonmodelFreeStyleBuild
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            result.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"] as AnyObject?)
            result.building = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["building"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?)
            result.duration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"] as AnyObject?)
            result.estimatedDuration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDuration"] as AnyObject?)
            result.executor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["executor"] as AnyObject?)
            result.fullDisplayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullDisplayName"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.keepLog = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["keepLog"] as AnyObject?)
            result.queueId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["queueId"] as AnyObject?)
            result.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"] as AnyObject?)
            result.timestamp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timestamp"] as AnyObject?)
            result.builtOn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["builtOn"] as AnyObject?)
            result.changeSet = Decoders.decodeOptional(clazz: HudsonscmEmptyChangeLogSet.self, source: sourceDictionary["changeSet"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelFreeStyleProject]
        Decoders.addDecoder(clazz: [HudsonmodelFreeStyleProject].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelFreeStyleProject] in
            return Decoders.decode(clazz: [HudsonmodelFreeStyleProject].self, source: source)
        }
        // Decoder for HudsonmodelFreeStyleProject
        Decoders.addDecoder(clazz: HudsonmodelFreeStyleProject.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelFreeStyleProject in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelFreeStyleProject() : instance as! HudsonmodelFreeStyleProject
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            result.color = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["color"] as AnyObject?)
            result.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?)
            result.displayNameOrNull = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayNameOrNull"] as AnyObject?)
            result.fullDisplayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullDisplayName"] as AnyObject?)
            result.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"] as AnyObject?)
            result.buildable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["buildable"] as AnyObject?)
            result.builds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["builds"] as AnyObject?)
            result.firstBuild = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleBuild.self, source: sourceDictionary["firstBuild"] as AnyObject?)
            result.healthReport = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["healthReport"] as AnyObject?)
            result.inQueue = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["inQueue"] as AnyObject?)
            result.keepDependencies = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["keepDependencies"] as AnyObject?)
            result.lastBuild = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleBuild.self, source: sourceDictionary["lastBuild"] as AnyObject?)
            result.lastCompletedBuild = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleBuild.self, source: sourceDictionary["lastCompletedBuild"] as AnyObject?)
            result.lastFailedBuild = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastFailedBuild"] as AnyObject?)
            result.lastStableBuild = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleBuild.self, source: sourceDictionary["lastStableBuild"] as AnyObject?)
            result.lastSuccessfulBuild = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleBuild.self, source: sourceDictionary["lastSuccessfulBuild"] as AnyObject?)
            result.lastUnstableBuild = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUnstableBuild"] as AnyObject?)
            result.lastUnsuccessfulBuild = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUnsuccessfulBuild"] as AnyObject?)
            result.nextBuildNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["nextBuildNumber"] as AnyObject?)
            result.queueItem = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueItem"] as AnyObject?)
            result.concurrentBuild = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["concurrentBuild"] as AnyObject?)
            result.scm = Decoders.decodeOptional(clazz: HudsonscmNullSCM.self, source: sourceDictionary["scm"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelFreeStyleProjectactions]
        Decoders.addDecoder(clazz: [HudsonmodelFreeStyleProjectactions].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelFreeStyleProjectactions] in
            return Decoders.decode(clazz: [HudsonmodelFreeStyleProjectactions].self, source: source)
        }
        // Decoder for HudsonmodelFreeStyleProjectactions
        Decoders.addDecoder(clazz: HudsonmodelFreeStyleProjectactions.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelFreeStyleProjectactions in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelFreeStyleProjectactions() : instance as! HudsonmodelFreeStyleProjectactions
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelFreeStyleProjecthealthReport]
        Decoders.addDecoder(clazz: [HudsonmodelFreeStyleProjecthealthReport].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelFreeStyleProjecthealthReport] in
            return Decoders.decode(clazz: [HudsonmodelFreeStyleProjecthealthReport].self, source: source)
        }
        // Decoder for HudsonmodelFreeStyleProjecthealthReport
        Decoders.addDecoder(clazz: HudsonmodelFreeStyleProjecthealthReport.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelFreeStyleProjecthealthReport in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelFreeStyleProjecthealthReport() : instance as! HudsonmodelFreeStyleProjecthealthReport
            
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.iconClassName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconClassName"] as AnyObject?)
            result.iconUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconUrl"] as AnyObject?)
            result.score = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["score"] as AnyObject?)
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelHudson]
        Decoders.addDecoder(clazz: [HudsonmodelHudson].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelHudson] in
            return Decoders.decode(clazz: [HudsonmodelHudson].self, source: source)
        }
        // Decoder for HudsonmodelHudson
        Decoders.addDecoder(clazz: HudsonmodelHudson.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelHudson in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelHudson() : instance as! HudsonmodelHudson
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.assignedLabels = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["assignedLabels"] as AnyObject?)
            result.mode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mode"] as AnyObject?)
            result.nodeDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nodeDescription"] as AnyObject?)
            result.nodeName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nodeName"] as AnyObject?)
            result.numExecutors = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numExecutors"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.jobs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["jobs"] as AnyObject?)
            result.primaryView = Decoders.decodeOptional(clazz: HudsonmodelAllView.self, source: sourceDictionary["primaryView"] as AnyObject?)
            result.quietingDown = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["quietingDown"] as AnyObject?)
            result.slaveAgentPort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["slaveAgentPort"] as AnyObject?)
            result.unlabeledLoad = Decoders.decodeOptional(clazz: JenkinsmodelUnlabeledLoadStatistics.self, source: sourceDictionary["unlabeledLoad"] as AnyObject?)
            result.useCrumbs = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["useCrumbs"] as AnyObject?)
            result.useSecurity = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["useSecurity"] as AnyObject?)
            result.views = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["views"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelHudsonMasterComputer]
        Decoders.addDecoder(clazz: [HudsonmodelHudsonMasterComputer].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelHudsonMasterComputer] in
            return Decoders.decode(clazz: [HudsonmodelHudsonMasterComputer].self, source: source)
        }
        // Decoder for HudsonmodelHudsonMasterComputer
        Decoders.addDecoder(clazz: HudsonmodelHudsonMasterComputer.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelHudsonMasterComputer in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelHudsonMasterComputer() : instance as! HudsonmodelHudsonMasterComputer
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?)
            result.executors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["executors"] as AnyObject?)
            result.icon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icon"] as AnyObject?)
            result.iconClassName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconClassName"] as AnyObject?)
            result.idle = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["idle"] as AnyObject?)
            result.jnlpAgent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["jnlpAgent"] as AnyObject?)
            result.launchSupported = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["launchSupported"] as AnyObject?)
            result.loadStatistics = Decoders.decodeOptional(clazz: HudsonmodelLabel1.self, source: sourceDictionary["loadStatistics"] as AnyObject?)
            result.manualLaunchAllowed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["manualLaunchAllowed"] as AnyObject?)
            result.monitorData = Decoders.decodeOptional(clazz: HudsonmodelHudsonMasterComputerMonitorData.self, source: sourceDictionary["monitorData"] as AnyObject?)
            result.numExecutors = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numExecutors"] as AnyObject?)
            result.offline = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["offline"] as AnyObject?)
            result.offlineCause = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["offlineCause"] as AnyObject?)
            result.offlineCauseReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["offlineCauseReason"] as AnyObject?)
            result.temporarilyOffline = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["temporarilyOffline"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelHudsonMasterComputerMonitorData]
        Decoders.addDecoder(clazz: [HudsonmodelHudsonMasterComputerMonitorData].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelHudsonMasterComputerMonitorData] in
            return Decoders.decode(clazz: [HudsonmodelHudsonMasterComputerMonitorData].self, source: source)
        }
        // Decoder for HudsonmodelHudsonMasterComputerMonitorData
        Decoders.addDecoder(clazz: HudsonmodelHudsonMasterComputerMonitorData.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelHudsonMasterComputerMonitorData in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelHudsonMasterComputerMonitorData() : instance as! HudsonmodelHudsonMasterComputerMonitorData
            
            result.hudsonNodeMonitorsSwapSpaceMonitor = Decoders.decodeOptional(clazz: HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2.self, source: sourceDictionary["hudson.node_monitors.SwapSpaceMonitor"] as AnyObject?)
            result.hudsonNodeMonitorsTemporarySpaceMonitor = Decoders.decodeOptional(clazz: HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace.self, source: sourceDictionary["hudson.node_monitors.TemporarySpaceMonitor"] as AnyObject?)
            result.hudsonNodeMonitorsDiskSpaceMonitor = Decoders.decodeOptional(clazz: HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace.self, source: sourceDictionary["hudson.node_monitors.DiskSpaceMonitor"] as AnyObject?)
            result.hudsonNodeMonitorsArchitectureMonitor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hudson.node_monitors.ArchitectureMonitor"] as AnyObject?)
            result.hudsonNodeMonitorsResponseTimeMonitor = Decoders.decodeOptional(clazz: HudsonnodeMonitorsResponseTimeMonitorData.self, source: sourceDictionary["hudson.node_monitors.ResponseTimeMonitor"] as AnyObject?)
            result.hudsonNodeMonitorsClockMonitor = Decoders.decodeOptional(clazz: HudsonutilClockDifference.self, source: sourceDictionary["hudson.node_monitors.ClockMonitor"] as AnyObject?)
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelHudsonMasterComputerexecutors]
        Decoders.addDecoder(clazz: [HudsonmodelHudsonMasterComputerexecutors].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelHudsonMasterComputerexecutors] in
            return Decoders.decode(clazz: [HudsonmodelHudsonMasterComputerexecutors].self, source: source)
        }
        // Decoder for HudsonmodelHudsonMasterComputerexecutors
        Decoders.addDecoder(clazz: HudsonmodelHudsonMasterComputerexecutors.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelHudsonMasterComputerexecutors in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelHudsonMasterComputerexecutors() : instance as! HudsonmodelHudsonMasterComputerexecutors
            
            result.currentExecutable = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleBuild.self, source: sourceDictionary["currentExecutable"] as AnyObject?)
            result.idle = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["idle"] as AnyObject?)
            result.likelyStuck = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["likelyStuck"] as AnyObject?)
            result.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?)
            result.progress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["progress"] as AnyObject?)
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelHudsonassignedLabels]
        Decoders.addDecoder(clazz: [HudsonmodelHudsonassignedLabels].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelHudsonassignedLabels] in
            return Decoders.decode(clazz: [HudsonmodelHudsonassignedLabels].self, source: source)
        }
        // Decoder for HudsonmodelHudsonassignedLabels
        Decoders.addDecoder(clazz: HudsonmodelHudsonassignedLabels.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelHudsonassignedLabels in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelHudsonassignedLabels() : instance as! HudsonmodelHudsonassignedLabels
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelLabel1]
        Decoders.addDecoder(clazz: [HudsonmodelLabel1].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelLabel1] in
            return Decoders.decode(clazz: [HudsonmodelLabel1].self, source: source)
        }
        // Decoder for HudsonmodelLabel1
        Decoders.addDecoder(clazz: HudsonmodelLabel1.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelLabel1 in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelLabel1() : instance as! HudsonmodelLabel1
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelListView]
        Decoders.addDecoder(clazz: [HudsonmodelListView].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelListView] in
            return Decoders.decode(clazz: [HudsonmodelListView].self, source: source)
        }
        // Decoder for HudsonmodelListView
        Decoders.addDecoder(clazz: HudsonmodelListView.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelListView in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelListView() : instance as! HudsonmodelListView
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.jobs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["jobs"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelQueue]
        Decoders.addDecoder(clazz: [HudsonmodelQueue].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelQueue] in
            return Decoders.decode(clazz: [HudsonmodelQueue].self, source: source)
        }
        // Decoder for HudsonmodelQueue
        Decoders.addDecoder(clazz: HudsonmodelQueue.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelQueue in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelQueue() : instance as! HudsonmodelQueue
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelQueueBlockedItem]
        Decoders.addDecoder(clazz: [HudsonmodelQueueBlockedItem].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelQueueBlockedItem] in
            return Decoders.decode(clazz: [HudsonmodelQueueBlockedItem].self, source: source)
        }
        // Decoder for HudsonmodelQueueBlockedItem
        Decoders.addDecoder(clazz: HudsonmodelQueueBlockedItem.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelQueueBlockedItem in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelQueueBlockedItem() : instance as! HudsonmodelQueueBlockedItem
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"] as AnyObject?)
            result.blocked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["blocked"] as AnyObject?)
            result.buildable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["buildable"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.inQueueSince = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inQueueSince"] as AnyObject?)
            result.params = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["params"] as AnyObject?)
            result.stuck = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stuck"] as AnyObject?)
            result.task = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleProject.self, source: sourceDictionary["task"] as AnyObject?)
            result.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            result.why = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["why"] as AnyObject?)
            result.buildableStartMilliseconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["buildableStartMilliseconds"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelQueueLeftItem]
        Decoders.addDecoder(clazz: [HudsonmodelQueueLeftItem].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelQueueLeftItem] in
            return Decoders.decode(clazz: [HudsonmodelQueueLeftItem].self, source: source)
        }
        // Decoder for HudsonmodelQueueLeftItem
        Decoders.addDecoder(clazz: HudsonmodelQueueLeftItem.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelQueueLeftItem in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelQueueLeftItem() : instance as! HudsonmodelQueueLeftItem
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"] as AnyObject?)
            result.blocked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["blocked"] as AnyObject?)
            result.buildable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["buildable"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?)
            result.inQueueSince = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inQueueSince"] as AnyObject?)
            result.params = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["params"] as AnyObject?)
            result.stuck = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stuck"] as AnyObject?)
            result.task = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleProject.self, source: sourceDictionary["task"] as AnyObject?)
            result.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            result.why = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["why"] as AnyObject?)
            result.cancelled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["cancelled"] as AnyObject?)
            result.executable = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleBuild.self, source: sourceDictionary["executable"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelStringParameterDefinition]
        Decoders.addDecoder(clazz: [HudsonmodelStringParameterDefinition].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelStringParameterDefinition] in
            return Decoders.decode(clazz: [HudsonmodelStringParameterDefinition].self, source: source)
        }
        // Decoder for HudsonmodelStringParameterDefinition
        Decoders.addDecoder(clazz: HudsonmodelStringParameterDefinition.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelStringParameterDefinition in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelStringParameterDefinition() : instance as! HudsonmodelStringParameterDefinition
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.defaultParameterValue = Decoders.decodeOptional(clazz: HudsonmodelStringParameterValue.self, source: sourceDictionary["defaultParameterValue"] as AnyObject?)
            result.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonmodelStringParameterValue]
        Decoders.addDecoder(clazz: [HudsonmodelStringParameterValue].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonmodelStringParameterValue] in
            return Decoders.decode(clazz: [HudsonmodelStringParameterValue].self, source: source)
        }
        // Decoder for HudsonmodelStringParameterValue
        Decoders.addDecoder(clazz: HudsonmodelStringParameterValue.self) { (source: AnyObject, instance: AnyObject?) -> HudsonmodelStringParameterValue in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonmodelStringParameterValue() : instance as! HudsonmodelStringParameterValue
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace]
        Decoders.addDecoder(clazz: [HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace] in
            return Decoders.decode(clazz: [HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace].self, source: source)
        }
        // Decoder for HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace
        Decoders.addDecoder(clazz: HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace.self) { (source: AnyObject, instance: AnyObject?) -> HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace() : instance as! HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.timestamp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timestamp"] as AnyObject?)
            result.path = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["path"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonnodeMonitorsResponseTimeMonitorData]
        Decoders.addDecoder(clazz: [HudsonnodeMonitorsResponseTimeMonitorData].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonnodeMonitorsResponseTimeMonitorData] in
            return Decoders.decode(clazz: [HudsonnodeMonitorsResponseTimeMonitorData].self, source: source)
        }
        // Decoder for HudsonnodeMonitorsResponseTimeMonitorData
        Decoders.addDecoder(clazz: HudsonnodeMonitorsResponseTimeMonitorData.self) { (source: AnyObject, instance: AnyObject?) -> HudsonnodeMonitorsResponseTimeMonitorData in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonnodeMonitorsResponseTimeMonitorData() : instance as! HudsonnodeMonitorsResponseTimeMonitorData
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.timestamp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timestamp"] as AnyObject?)
            result.average = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["average"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2]
        Decoders.addDecoder(clazz: [HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2] in
            return Decoders.decode(clazz: [HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2].self, source: source)
        }
        // Decoder for HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2
        Decoders.addDecoder(clazz: HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2.self) { (source: AnyObject, instance: AnyObject?) -> HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2 in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2() : instance as! HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.availablePhysicalMemory = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["availablePhysicalMemory"] as AnyObject?)
            result.availableSwapSpace = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["availableSwapSpace"] as AnyObject?)
            result.totalPhysicalMemory = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalPhysicalMemory"] as AnyObject?)
            result.totalSwapSpace = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalSwapSpace"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonscmEmptyChangeLogSet]
        Decoders.addDecoder(clazz: [HudsonscmEmptyChangeLogSet].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonscmEmptyChangeLogSet] in
            return Decoders.decode(clazz: [HudsonscmEmptyChangeLogSet].self, source: source)
        }
        // Decoder for HudsonscmEmptyChangeLogSet
        Decoders.addDecoder(clazz: HudsonscmEmptyChangeLogSet.self) { (source: AnyObject, instance: AnyObject?) -> HudsonscmEmptyChangeLogSet in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonscmEmptyChangeLogSet() : instance as! HudsonscmEmptyChangeLogSet
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.kind = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["kind"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonscmNullSCM]
        Decoders.addDecoder(clazz: [HudsonscmNullSCM].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonscmNullSCM] in
            return Decoders.decode(clazz: [HudsonscmNullSCM].self, source: source)
        }
        // Decoder for HudsonscmNullSCM
        Decoders.addDecoder(clazz: HudsonscmNullSCM.self) { (source: AnyObject, instance: AnyObject?) -> HudsonscmNullSCM in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonscmNullSCM() : instance as! HudsonscmNullSCM
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonsecuritycsrfDefaultCrumbIssuer]
        Decoders.addDecoder(clazz: [HudsonsecuritycsrfDefaultCrumbIssuer].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonsecuritycsrfDefaultCrumbIssuer] in
            return Decoders.decode(clazz: [HudsonsecuritycsrfDefaultCrumbIssuer].self, source: source)
        }
        // Decoder for HudsonsecuritycsrfDefaultCrumbIssuer
        Decoders.addDecoder(clazz: HudsonsecuritycsrfDefaultCrumbIssuer.self) { (source: AnyObject, instance: AnyObject?) -> HudsonsecuritycsrfDefaultCrumbIssuer in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonsecuritycsrfDefaultCrumbIssuer() : instance as! HudsonsecuritycsrfDefaultCrumbIssuer
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.crumb = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["crumb"] as AnyObject?)
            result.crumbRequestField = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["crumbRequestField"] as AnyObject?)
            return result
        }


        // Decoder for [HudsonutilClockDifference]
        Decoders.addDecoder(clazz: [HudsonutilClockDifference].self) { (source: AnyObject, instance: AnyObject?) -> [HudsonutilClockDifference] in
            return Decoders.decode(clazz: [HudsonutilClockDifference].self, source: source)
        }
        // Decoder for HudsonutilClockDifference
        Decoders.addDecoder(clazz: HudsonutilClockDifference.self) { (source: AnyObject, instance: AnyObject?) -> HudsonutilClockDifference in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? HudsonutilClockDifference() : instance as! HudsonutilClockDifference
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.diff = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["diff"] as AnyObject?)
            return result
        }


        // Decoder for [IojenkinsblueoceanresthalLink]
        Decoders.addDecoder(clazz: [IojenkinsblueoceanresthalLink].self) { (source: AnyObject, instance: AnyObject?) -> [IojenkinsblueoceanresthalLink] in
            return Decoders.decode(clazz: [IojenkinsblueoceanresthalLink].self, source: source)
        }
        // Decoder for IojenkinsblueoceanresthalLink
        Decoders.addDecoder(clazz: IojenkinsblueoceanresthalLink.self) { (source: AnyObject, instance: AnyObject?) -> IojenkinsblueoceanresthalLink in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? IojenkinsblueoceanresthalLink() : instance as! IojenkinsblueoceanresthalLink
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.href = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["href"] as AnyObject?)
            return result
        }


        // Decoder for [IojenkinsblueoceanrestimplpipelineBranchImpl]
        Decoders.addDecoder(clazz: [IojenkinsblueoceanrestimplpipelineBranchImpl].self) { (source: AnyObject, instance: AnyObject?) -> [IojenkinsblueoceanrestimplpipelineBranchImpl] in
            return Decoders.decode(clazz: [IojenkinsblueoceanrestimplpipelineBranchImpl].self, source: source)
        }
        // Decoder for IojenkinsblueoceanrestimplpipelineBranchImpl
        Decoders.addDecoder(clazz: IojenkinsblueoceanrestimplpipelineBranchImpl.self) { (source: AnyObject, instance: AnyObject?) -> IojenkinsblueoceanrestimplpipelineBranchImpl in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? IojenkinsblueoceanrestimplpipelineBranchImpl() : instance as! IojenkinsblueoceanrestimplpipelineBranchImpl
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?)
            result.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"] as AnyObject?)
            result.fullDisplayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullDisplayName"] as AnyObject?)
            result.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?)
            result.parameters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["parameters"] as AnyObject?)
            result.permissions = Decoders.decodeOptional(clazz: IojenkinsblueoceanrestimplpipelineBranchImplPermissions.self, source: sourceDictionary["permissions"] as AnyObject?)
            result.weatherScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"] as AnyObject?)
            result.pullRequest = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pullRequest"] as AnyObject?)
            return result
        }


        // Decoder for [IojenkinsblueoceanrestimplpipelineBranchImplPermissions]
        Decoders.addDecoder(clazz: [IojenkinsblueoceanrestimplpipelineBranchImplPermissions].self) { (source: AnyObject, instance: AnyObject?) -> [IojenkinsblueoceanrestimplpipelineBranchImplPermissions] in
            return Decoders.decode(clazz: [IojenkinsblueoceanrestimplpipelineBranchImplPermissions].self, source: source)
        }
        // Decoder for IojenkinsblueoceanrestimplpipelineBranchImplPermissions
        Decoders.addDecoder(clazz: IojenkinsblueoceanrestimplpipelineBranchImplPermissions.self) { (source: AnyObject, instance: AnyObject?) -> IojenkinsblueoceanrestimplpipelineBranchImplPermissions in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? IojenkinsblueoceanrestimplpipelineBranchImplPermissions() : instance as! IojenkinsblueoceanrestimplpipelineBranchImplPermissions
            
            result.create = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["create"] as AnyObject?)
            result.read = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["read"] as AnyObject?)
            result.start = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["start"] as AnyObject?)
            result.stop = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stop"] as AnyObject?)
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1]
        Decoders.addDecoder(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1].self) { (source: AnyObject, instance: AnyObject?) -> [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1] in
            return Decoders.decode(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1].self, source: source)
        }
        // Decoder for IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1
        Decoders.addDecoder(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1.self) { (source: AnyObject, instance: AnyObject?) -> IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1 in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1() : instance as! IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links.self, source: sourceDictionary["_links"] as AnyObject?)
            result.map = Decoders.decodeOptional(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map.self, source: sourceDictionary["map"] as AnyObject?)
            return result
        }


        // Decoder for [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links]
        Decoders.addDecoder(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links].self) { (source: AnyObject, instance: AnyObject?) -> [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links] in
            return Decoders.decode(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links].self, source: source)
        }
        // Decoder for IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links
        Decoders.addDecoder(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links.self) { (source: AnyObject, instance: AnyObject?) -> IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links() : instance as! IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links
            
            result._self = Decoders.decodeOptional(clazz: IojenkinsblueoceanresthalLink.self, source: sourceDictionary["self"] as AnyObject?)
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map]
        Decoders.addDecoder(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map].self) { (source: AnyObject, instance: AnyObject?) -> [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map] in
            return Decoders.decode(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map].self, source: source)
        }
        // Decoder for IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map
        Decoders.addDecoder(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map.self) { (source: AnyObject, instance: AnyObject?) -> IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map() : instance as! IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map
            
            result.ioJenkinsBlueoceanServiceEmbeddedRestPipelineImpl = Decoders.decodeOptional(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassImpl.self, source: sourceDictionary["io.jenkins.blueocean.service.embedded.rest.PipelineImpl"] as AnyObject?)
            result.ioJenkinsBlueoceanServiceEmbeddedRestMultiBranchPipelineImpl = Decoders.decodeOptional(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassImpl.self, source: sourceDictionary["io.jenkins.blueocean.service.embedded.rest.MultiBranchPipelineImpl"] as AnyObject?)
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [IojenkinsblueoceanserviceembeddedrestExtensionClassImpl]
        Decoders.addDecoder(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassImpl].self) { (source: AnyObject, instance: AnyObject?) -> [IojenkinsblueoceanserviceembeddedrestExtensionClassImpl] in
            return Decoders.decode(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassImpl].self, source: source)
        }
        // Decoder for IojenkinsblueoceanserviceembeddedrestExtensionClassImpl
        Decoders.addDecoder(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassImpl.self) { (source: AnyObject, instance: AnyObject?) -> IojenkinsblueoceanserviceembeddedrestExtensionClassImpl in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? IojenkinsblueoceanserviceembeddedrestExtensionClassImpl() : instance as! IojenkinsblueoceanserviceembeddedrestExtensionClassImpl
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.links = Decoders.decodeOptional(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks.self, source: sourceDictionary["_links"] as AnyObject?)
            result.classes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["classes"] as AnyObject?)
            return result
        }


        // Decoder for [IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks]
        Decoders.addDecoder(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks].self) { (source: AnyObject, instance: AnyObject?) -> [IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks] in
            return Decoders.decode(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks].self, source: source)
        }
        // Decoder for IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks
        Decoders.addDecoder(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks.self) { (source: AnyObject, instance: AnyObject?) -> IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks() : instance as! IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks
            
            result._self = Decoders.decodeOptional(clazz: IojenkinsblueoceanresthalLink.self, source: sourceDictionary["self"] as AnyObject?)
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl]
        Decoders.addDecoder(clazz: [IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl].self) { (source: AnyObject, instance: AnyObject?) -> [IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl] in
            return Decoders.decode(clazz: [IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl].self, source: source)
        }
        // Decoder for IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl
        Decoders.addDecoder(clazz: IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.self) { (source: AnyObject, instance: AnyObject?) -> IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl() : instance as! IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?)
            result.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?)
            result.numberOfFolders = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfFolders"] as AnyObject?)
            result.numberOfPipelines = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfPipelines"] as AnyObject?)
            return result
        }


        // Decoder for [IojenkinsblueoceanserviceembeddedrestPipelineImpl]
        Decoders.addDecoder(clazz: [IojenkinsblueoceanserviceembeddedrestPipelineImpl].self) { (source: AnyObject, instance: AnyObject?) -> [IojenkinsblueoceanserviceembeddedrestPipelineImpl] in
            return Decoders.decode(clazz: [IojenkinsblueoceanserviceembeddedrestPipelineImpl].self, source: source)
        }
        // Decoder for IojenkinsblueoceanserviceembeddedrestPipelineImpl
        Decoders.addDecoder(clazz: IojenkinsblueoceanserviceembeddedrestPipelineImpl.self) { (source: AnyObject, instance: AnyObject?) -> IojenkinsblueoceanserviceembeddedrestPipelineImpl in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? IojenkinsblueoceanserviceembeddedrestPipelineImpl() : instance as! IojenkinsblueoceanserviceembeddedrestPipelineImpl
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?)
            result.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"] as AnyObject?)
            result.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"] as AnyObject?)
            result.latestRun = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["latestRun"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?)
            result.weatherScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"] as AnyObject?)
            return result
        }


        // Decoder for [JenkinsmodelUnlabeledLoadStatistics]
        Decoders.addDecoder(clazz: [JenkinsmodelUnlabeledLoadStatistics].self) { (source: AnyObject, instance: AnyObject?) -> [JenkinsmodelUnlabeledLoadStatistics] in
            return Decoders.decode(clazz: [JenkinsmodelUnlabeledLoadStatistics].self, source: source)
        }
        // Decoder for JenkinsmodelUnlabeledLoadStatistics
        Decoders.addDecoder(clazz: JenkinsmodelUnlabeledLoadStatistics.self) { (source: AnyObject, instance: AnyObject?) -> JenkinsmodelUnlabeledLoadStatistics in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? JenkinsmodelUnlabeledLoadStatistics() : instance as! JenkinsmodelUnlabeledLoadStatistics
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [SwaggyjenkinsOrganisation]
        Decoders.addDecoder(clazz: [SwaggyjenkinsOrganisation].self) { (source: AnyObject, instance: AnyObject?) -> [SwaggyjenkinsOrganisation] in
            return Decoders.decode(clazz: [SwaggyjenkinsOrganisation].self, source: source)
        }
        // Decoder for SwaggyjenkinsOrganisation
        Decoders.addDecoder(clazz: SwaggyjenkinsOrganisation.self) { (source: AnyObject, instance: AnyObject?) -> SwaggyjenkinsOrganisation in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SwaggyjenkinsOrganisation() : instance as! SwaggyjenkinsOrganisation
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }


        // Decoder for [SwaggyjenkinsPipeline]
        Decoders.addDecoder(clazz: [SwaggyjenkinsPipeline].self) { (source: AnyObject, instance: AnyObject?) -> [SwaggyjenkinsPipeline] in
            return Decoders.decode(clazz: [SwaggyjenkinsPipeline].self, source: source)
        }
        // Decoder for SwaggyjenkinsPipeline
        Decoders.addDecoder(clazz: SwaggyjenkinsPipeline.self) { (source: AnyObject, instance: AnyObject?) -> SwaggyjenkinsPipeline in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SwaggyjenkinsPipeline() : instance as! SwaggyjenkinsPipeline
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?)
            result.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"] as AnyObject?)
            result.weatherScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"] as AnyObject?)
            result.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"] as AnyObject?)
            result.latestRun = Decoders.decodeOptional(clazz: SwaggyjenkinsPipelineLatestRun.self, source: sourceDictionary["latestRun"] as AnyObject?)
            return result
        }


        // Decoder for [SwaggyjenkinsPipelineLatestRun]
        Decoders.addDecoder(clazz: [SwaggyjenkinsPipelineLatestRun].self) { (source: AnyObject, instance: AnyObject?) -> [SwaggyjenkinsPipelineLatestRun] in
            return Decoders.decode(clazz: [SwaggyjenkinsPipelineLatestRun].self, source: source)
        }
        // Decoder for SwaggyjenkinsPipelineLatestRun
        Decoders.addDecoder(clazz: SwaggyjenkinsPipelineLatestRun.self) { (source: AnyObject, instance: AnyObject?) -> SwaggyjenkinsPipelineLatestRun in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SwaggyjenkinsPipelineLatestRun() : instance as! SwaggyjenkinsPipelineLatestRun
            
            result.artifacts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["artifacts"] as AnyObject?)
            result.durationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"] as AnyObject?)
            result.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"] as AnyObject?)
            result.enQueueTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enQueueTime"] as AnyObject?)
            result.endTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endTime"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?)
            result.pipeline = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pipeline"] as AnyObject?)
            result.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"] as AnyObject?)
            result.runSummary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["runSummary"] as AnyObject?)
            result.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"] as AnyObject?)
            result.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"] as AnyObject?)
            result.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?)
            result.commitId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commitId"] as AnyObject?)
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [SwaggyjenkinsPipelineLatestRunartifacts]
        Decoders.addDecoder(clazz: [SwaggyjenkinsPipelineLatestRunartifacts].self) { (source: AnyObject, instance: AnyObject?) -> [SwaggyjenkinsPipelineLatestRunartifacts] in
            return Decoders.decode(clazz: [SwaggyjenkinsPipelineLatestRunartifacts].self, source: source)
        }
        // Decoder for SwaggyjenkinsPipelineLatestRunartifacts
        Decoders.addDecoder(clazz: SwaggyjenkinsPipelineLatestRunartifacts.self) { (source: AnyObject, instance: AnyObject?) -> SwaggyjenkinsPipelineLatestRunartifacts in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SwaggyjenkinsPipelineLatestRunartifacts() : instance as! SwaggyjenkinsPipelineLatestRunartifacts
            
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            result.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?)
            result.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?)
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            return result
        }


        // Decoder for [SwaggyjenkinsUser]
        Decoders.addDecoder(clazz: [SwaggyjenkinsUser].self) { (source: AnyObject, instance: AnyObject?) -> [SwaggyjenkinsUser] in
            return Decoders.decode(clazz: [SwaggyjenkinsUser].self, source: source)
        }
        // Decoder for SwaggyjenkinsUser
        Decoders.addDecoder(clazz: SwaggyjenkinsUser.self) { (source: AnyObject, instance: AnyObject?) -> SwaggyjenkinsUser in
            let sourceDictionary = source as! [AnyHashable: Any]
            let result = instance == nil ? SwaggyjenkinsUser() : instance as! SwaggyjenkinsUser
            
            result._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?)
            result.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            result.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"] as AnyObject?)
            result.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            result.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            return result
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}