<?php
/**
 * HudsonmodelHudsonMasterComputer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * HudsonmodelHudsonMasterComputer Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class HudsonmodelHudsonMasterComputer implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'hudsonmodelHudsonMasterComputer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_class' => 'string',
        'display_name' => 'string',
        'executors' => '\Swagger\Client\Model\HudsonmodelHudsonMasterComputerexecutors[]',
        'icon' => 'string',
        'icon_class_name' => 'string',
        'idle' => 'bool',
        'jnlp_agent' => 'bool',
        'launch_supported' => 'bool',
        'load_statistics' => '\Swagger\Client\Model\HudsonmodelLabel1',
        'manual_launch_allowed' => 'bool',
        'monitor_data' => '\Swagger\Client\Model\HudsonmodelHudsonMasterComputerMonitorData',
        'num_executors' => 'int',
        'offline' => 'bool',
        'offline_cause' => 'string',
        'offline_cause_reason' => 'string',
        'temporarily_offline' => 'bool'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        '_class' => '_class',
        'display_name' => 'displayName',
        'executors' => 'executors',
        'icon' => 'icon',
        'icon_class_name' => 'iconClassName',
        'idle' => 'idle',
        'jnlp_agent' => 'jnlpAgent',
        'launch_supported' => 'launchSupported',
        'load_statistics' => 'loadStatistics',
        'manual_launch_allowed' => 'manualLaunchAllowed',
        'monitor_data' => 'monitorData',
        'num_executors' => 'numExecutors',
        'offline' => 'offline',
        'offline_cause' => 'offlineCause',
        'offline_cause_reason' => 'offlineCauseReason',
        'temporarily_offline' => 'temporarilyOffline'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        '_class' => 'setClass',
        'display_name' => 'setDisplayName',
        'executors' => 'setExecutors',
        'icon' => 'setIcon',
        'icon_class_name' => 'setIconClassName',
        'idle' => 'setIdle',
        'jnlp_agent' => 'setJnlpAgent',
        'launch_supported' => 'setLaunchSupported',
        'load_statistics' => 'setLoadStatistics',
        'manual_launch_allowed' => 'setManualLaunchAllowed',
        'monitor_data' => 'setMonitorData',
        'num_executors' => 'setNumExecutors',
        'offline' => 'setOffline',
        'offline_cause' => 'setOfflineCause',
        'offline_cause_reason' => 'setOfflineCauseReason',
        'temporarily_offline' => 'setTemporarilyOffline'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        '_class' => 'getClass',
        'display_name' => 'getDisplayName',
        'executors' => 'getExecutors',
        'icon' => 'getIcon',
        'icon_class_name' => 'getIconClassName',
        'idle' => 'getIdle',
        'jnlp_agent' => 'getJnlpAgent',
        'launch_supported' => 'getLaunchSupported',
        'load_statistics' => 'getLoadStatistics',
        'manual_launch_allowed' => 'getManualLaunchAllowed',
        'monitor_data' => 'getMonitorData',
        'num_executors' => 'getNumExecutors',
        'offline' => 'getOffline',
        'offline_cause' => 'getOfflineCause',
        'offline_cause_reason' => 'getOfflineCauseReason',
        'temporarily_offline' => 'getTemporarilyOffline'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_class'] = isset($data['_class']) ? $data['_class'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['executors'] = isset($data['executors']) ? $data['executors'] : null;
        $this->container['icon'] = isset($data['icon']) ? $data['icon'] : null;
        $this->container['icon_class_name'] = isset($data['icon_class_name']) ? $data['icon_class_name'] : null;
        $this->container['idle'] = isset($data['idle']) ? $data['idle'] : null;
        $this->container['jnlp_agent'] = isset($data['jnlp_agent']) ? $data['jnlp_agent'] : null;
        $this->container['launch_supported'] = isset($data['launch_supported']) ? $data['launch_supported'] : null;
        $this->container['load_statistics'] = isset($data['load_statistics']) ? $data['load_statistics'] : null;
        $this->container['manual_launch_allowed'] = isset($data['manual_launch_allowed']) ? $data['manual_launch_allowed'] : null;
        $this->container['monitor_data'] = isset($data['monitor_data']) ? $data['monitor_data'] : null;
        $this->container['num_executors'] = isset($data['num_executors']) ? $data['num_executors'] : null;
        $this->container['offline'] = isset($data['offline']) ? $data['offline'] : null;
        $this->container['offline_cause'] = isset($data['offline_cause']) ? $data['offline_cause'] : null;
        $this->container['offline_cause_reason'] = isset($data['offline_cause_reason']) ? $data['offline_cause_reason'] : null;
        $this->container['temporarily_offline'] = isset($data['temporarily_offline']) ? $data['temporarily_offline'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets _class
     * @return string
     */
    public function getClass()
    {
        return $this->container['_class'];
    }

    /**
     * Sets _class
     * @param string $_class
     * @return $this
     */
    public function setClass($_class)
    {
        $this->container['_class'] = $_class;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets executors
     * @return \Swagger\Client\Model\HudsonmodelHudsonMasterComputerexecutors[]
     */
    public function getExecutors()
    {
        return $this->container['executors'];
    }

    /**
     * Sets executors
     * @param \Swagger\Client\Model\HudsonmodelHudsonMasterComputerexecutors[] $executors
     * @return $this
     */
    public function setExecutors($executors)
    {
        $this->container['executors'] = $executors;

        return $this;
    }

    /**
     * Gets icon
     * @return string
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     * @param string $icon
     * @return $this
     */
    public function setIcon($icon)
    {
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets icon_class_name
     * @return string
     */
    public function getIconClassName()
    {
        return $this->container['icon_class_name'];
    }

    /**
     * Sets icon_class_name
     * @param string $icon_class_name
     * @return $this
     */
    public function setIconClassName($icon_class_name)
    {
        $this->container['icon_class_name'] = $icon_class_name;

        return $this;
    }

    /**
     * Gets idle
     * @return bool
     */
    public function getIdle()
    {
        return $this->container['idle'];
    }

    /**
     * Sets idle
     * @param bool $idle
     * @return $this
     */
    public function setIdle($idle)
    {
        $this->container['idle'] = $idle;

        return $this;
    }

    /**
     * Gets jnlp_agent
     * @return bool
     */
    public function getJnlpAgent()
    {
        return $this->container['jnlp_agent'];
    }

    /**
     * Sets jnlp_agent
     * @param bool $jnlp_agent
     * @return $this
     */
    public function setJnlpAgent($jnlp_agent)
    {
        $this->container['jnlp_agent'] = $jnlp_agent;

        return $this;
    }

    /**
     * Gets launch_supported
     * @return bool
     */
    public function getLaunchSupported()
    {
        return $this->container['launch_supported'];
    }

    /**
     * Sets launch_supported
     * @param bool $launch_supported
     * @return $this
     */
    public function setLaunchSupported($launch_supported)
    {
        $this->container['launch_supported'] = $launch_supported;

        return $this;
    }

    /**
     * Gets load_statistics
     * @return \Swagger\Client\Model\HudsonmodelLabel1
     */
    public function getLoadStatistics()
    {
        return $this->container['load_statistics'];
    }

    /**
     * Sets load_statistics
     * @param \Swagger\Client\Model\HudsonmodelLabel1 $load_statistics
     * @return $this
     */
    public function setLoadStatistics($load_statistics)
    {
        $this->container['load_statistics'] = $load_statistics;

        return $this;
    }

    /**
     * Gets manual_launch_allowed
     * @return bool
     */
    public function getManualLaunchAllowed()
    {
        return $this->container['manual_launch_allowed'];
    }

    /**
     * Sets manual_launch_allowed
     * @param bool $manual_launch_allowed
     * @return $this
     */
    public function setManualLaunchAllowed($manual_launch_allowed)
    {
        $this->container['manual_launch_allowed'] = $manual_launch_allowed;

        return $this;
    }

    /**
     * Gets monitor_data
     * @return \Swagger\Client\Model\HudsonmodelHudsonMasterComputerMonitorData
     */
    public function getMonitorData()
    {
        return $this->container['monitor_data'];
    }

    /**
     * Sets monitor_data
     * @param \Swagger\Client\Model\HudsonmodelHudsonMasterComputerMonitorData $monitor_data
     * @return $this
     */
    public function setMonitorData($monitor_data)
    {
        $this->container['monitor_data'] = $monitor_data;

        return $this;
    }

    /**
     * Gets num_executors
     * @return int
     */
    public function getNumExecutors()
    {
        return $this->container['num_executors'];
    }

    /**
     * Sets num_executors
     * @param int $num_executors
     * @return $this
     */
    public function setNumExecutors($num_executors)
    {
        $this->container['num_executors'] = $num_executors;

        return $this;
    }

    /**
     * Gets offline
     * @return bool
     */
    public function getOffline()
    {
        return $this->container['offline'];
    }

    /**
     * Sets offline
     * @param bool $offline
     * @return $this
     */
    public function setOffline($offline)
    {
        $this->container['offline'] = $offline;

        return $this;
    }

    /**
     * Gets offline_cause
     * @return string
     */
    public function getOfflineCause()
    {
        return $this->container['offline_cause'];
    }

    /**
     * Sets offline_cause
     * @param string $offline_cause
     * @return $this
     */
    public function setOfflineCause($offline_cause)
    {
        $this->container['offline_cause'] = $offline_cause;

        return $this;
    }

    /**
     * Gets offline_cause_reason
     * @return string
     */
    public function getOfflineCauseReason()
    {
        return $this->container['offline_cause_reason'];
    }

    /**
     * Sets offline_cause_reason
     * @param string $offline_cause_reason
     * @return $this
     */
    public function setOfflineCauseReason($offline_cause_reason)
    {
        $this->container['offline_cause_reason'] = $offline_cause_reason;

        return $this;
    }

    /**
     * Gets temporarily_offline
     * @return bool
     */
    public function getTemporarilyOffline()
    {
        return $this->container['temporarily_offline'];
    }

    /**
     * Sets temporarily_offline
     * @param bool $temporarily_offline
     * @return $this
     */
    public function setTemporarilyOffline($temporarily_offline)
    {
        $this->container['temporarily_offline'] = $temporarily_offline;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


