<?php
/**
 * HudsonmodelFreeStyleBuild
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * HudsonmodelFreeStyleBuild Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class HudsonmodelFreeStyleBuild implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'hudsonmodelFreeStyleBuild';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_class' => 'string',
        'number' => 'int',
        'url' => 'string',
        'actions' => '\Swagger\Client\Model\HudsonmodelCauseAction[]',
        'building' => 'bool',
        'description' => 'string',
        'display_name' => 'string',
        'duration' => 'int',
        'estimated_duration' => 'int',
        'executor' => 'string',
        'full_display_name' => 'string',
        'id' => 'string',
        'keep_log' => 'bool',
        'queue_id' => 'int',
        'result' => 'string',
        'timestamp' => 'int',
        'built_on' => 'string',
        'change_set' => '\Swagger\Client\Model\HudsonscmEmptyChangeLogSet'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        '_class' => '_class',
        'number' => 'number',
        'url' => 'url',
        'actions' => 'actions',
        'building' => 'building',
        'description' => 'description',
        'display_name' => 'displayName',
        'duration' => 'duration',
        'estimated_duration' => 'estimatedDuration',
        'executor' => 'executor',
        'full_display_name' => 'fullDisplayName',
        'id' => 'id',
        'keep_log' => 'keepLog',
        'queue_id' => 'queueId',
        'result' => 'result',
        'timestamp' => 'timestamp',
        'built_on' => 'builtOn',
        'change_set' => 'changeSet'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        '_class' => 'setClass',
        'number' => 'setNumber',
        'url' => 'setUrl',
        'actions' => 'setActions',
        'building' => 'setBuilding',
        'description' => 'setDescription',
        'display_name' => 'setDisplayName',
        'duration' => 'setDuration',
        'estimated_duration' => 'setEstimatedDuration',
        'executor' => 'setExecutor',
        'full_display_name' => 'setFullDisplayName',
        'id' => 'setId',
        'keep_log' => 'setKeepLog',
        'queue_id' => 'setQueueId',
        'result' => 'setResult',
        'timestamp' => 'setTimestamp',
        'built_on' => 'setBuiltOn',
        'change_set' => 'setChangeSet'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        '_class' => 'getClass',
        'number' => 'getNumber',
        'url' => 'getUrl',
        'actions' => 'getActions',
        'building' => 'getBuilding',
        'description' => 'getDescription',
        'display_name' => 'getDisplayName',
        'duration' => 'getDuration',
        'estimated_duration' => 'getEstimatedDuration',
        'executor' => 'getExecutor',
        'full_display_name' => 'getFullDisplayName',
        'id' => 'getId',
        'keep_log' => 'getKeepLog',
        'queue_id' => 'getQueueId',
        'result' => 'getResult',
        'timestamp' => 'getTimestamp',
        'built_on' => 'getBuiltOn',
        'change_set' => 'getChangeSet'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_class'] = isset($data['_class']) ? $data['_class'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['actions'] = isset($data['actions']) ? $data['actions'] : null;
        $this->container['building'] = isset($data['building']) ? $data['building'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['estimated_duration'] = isset($data['estimated_duration']) ? $data['estimated_duration'] : null;
        $this->container['executor'] = isset($data['executor']) ? $data['executor'] : null;
        $this->container['full_display_name'] = isset($data['full_display_name']) ? $data['full_display_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['keep_log'] = isset($data['keep_log']) ? $data['keep_log'] : null;
        $this->container['queue_id'] = isset($data['queue_id']) ? $data['queue_id'] : null;
        $this->container['result'] = isset($data['result']) ? $data['result'] : null;
        $this->container['timestamp'] = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->container['built_on'] = isset($data['built_on']) ? $data['built_on'] : null;
        $this->container['change_set'] = isset($data['change_set']) ? $data['change_set'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets _class
     * @return string
     */
    public function getClass()
    {
        return $this->container['_class'];
    }

    /**
     * Sets _class
     * @param string $_class
     * @return $this
     */
    public function setClass($_class)
    {
        $this->container['_class'] = $_class;

        return $this;
    }

    /**
     * Gets number
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     * @param int $number
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets url
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     * @param string $url
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets actions
     * @return \Swagger\Client\Model\HudsonmodelCauseAction[]
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     * @param \Swagger\Client\Model\HudsonmodelCauseAction[] $actions
     * @return $this
     */
    public function setActions($actions)
    {
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets building
     * @return bool
     */
    public function getBuilding()
    {
        return $this->container['building'];
    }

    /**
     * Sets building
     * @param bool $building
     * @return $this
     */
    public function setBuilding($building)
    {
        $this->container['building'] = $building;

        return $this;
    }

    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     * @param string $description
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets display_name
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     * @param string $display_name
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets duration
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     * @param int $duration
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets estimated_duration
     * @return int
     */
    public function getEstimatedDuration()
    {
        return $this->container['estimated_duration'];
    }

    /**
     * Sets estimated_duration
     * @param int $estimated_duration
     * @return $this
     */
    public function setEstimatedDuration($estimated_duration)
    {
        $this->container['estimated_duration'] = $estimated_duration;

        return $this;
    }

    /**
     * Gets executor
     * @return string
     */
    public function getExecutor()
    {
        return $this->container['executor'];
    }

    /**
     * Sets executor
     * @param string $executor
     * @return $this
     */
    public function setExecutor($executor)
    {
        $this->container['executor'] = $executor;

        return $this;
    }

    /**
     * Gets full_display_name
     * @return string
     */
    public function getFullDisplayName()
    {
        return $this->container['full_display_name'];
    }

    /**
     * Sets full_display_name
     * @param string $full_display_name
     * @return $this
     */
    public function setFullDisplayName($full_display_name)
    {
        $this->container['full_display_name'] = $full_display_name;

        return $this;
    }

    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets keep_log
     * @return bool
     */
    public function getKeepLog()
    {
        return $this->container['keep_log'];
    }

    /**
     * Sets keep_log
     * @param bool $keep_log
     * @return $this
     */
    public function setKeepLog($keep_log)
    {
        $this->container['keep_log'] = $keep_log;

        return $this;
    }

    /**
     * Gets queue_id
     * @return int
     */
    public function getQueueId()
    {
        return $this->container['queue_id'];
    }

    /**
     * Sets queue_id
     * @param int $queue_id
     * @return $this
     */
    public function setQueueId($queue_id)
    {
        $this->container['queue_id'] = $queue_id;

        return $this;
    }

    /**
     * Gets result
     * @return string
     */
    public function getResult()
    {
        return $this->container['result'];
    }

    /**
     * Sets result
     * @param string $result
     * @return $this
     */
    public function setResult($result)
    {
        $this->container['result'] = $result;

        return $this;
    }

    /**
     * Gets timestamp
     * @return int
     */
    public function getTimestamp()
    {
        return $this->container['timestamp'];
    }

    /**
     * Sets timestamp
     * @param int $timestamp
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->container['timestamp'] = $timestamp;

        return $this;
    }

    /**
     * Gets built_on
     * @return string
     */
    public function getBuiltOn()
    {
        return $this->container['built_on'];
    }

    /**
     * Sets built_on
     * @param string $built_on
     * @return $this
     */
    public function setBuiltOn($built_on)
    {
        $this->container['built_on'] = $built_on;

        return $this;
    }

    /**
     * Gets change_set
     * @return \Swagger\Client\Model\HudsonscmEmptyChangeLogSet
     */
    public function getChangeSet()
    {
        return $this->container['change_set'];
    }

    /**
     * Sets change_set
     * @param \Swagger\Client\Model\HudsonscmEmptyChangeLogSet $change_set
     * @return $this
     */
    public function setChangeSet($change_set)
    {
        $this->container['change_set'] = $change_set;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


