<?php
/**
 * BlueOceanApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * BlueOceanApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BlueOceanApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return BlueOceanApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getAuthenticatedUser
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SwaggyjenkinsUser
     */
    public function getAuthenticatedUser($organisation)
    {
        list($response) = $this->getAuthenticatedUserWithHttpInfo($organisation);
        return $response;
    }

    /**
     * Operation getAuthenticatedUserWithHttpInfo
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SwaggyjenkinsUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAuthenticatedUserWithHttpInfo($organisation)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organisation when calling getAuthenticatedUser');
        }
        // parse inputs
        $resourcePath = "/blue/rest/organizations/{organisation}/user/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                "{" . "organisation" . "}",
                $this->apiClient->getSerializer()->toPathValue($organisation),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SwaggyjenkinsUser',
                '/blue/rest/organizations/{organisation}/user/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SwaggyjenkinsUser', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SwaggyjenkinsUser', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getClasses
     *
     * 
     *
     * @param string $class Name of the class (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getClasses($class)
    {
        list($response) = $this->getClassesWithHttpInfo($class);
        return $response;
    }

    /**
     * Operation getClassesWithHttpInfo
     *
     * 
     *
     * @param string $class Name of the class (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getClassesWithHttpInfo($class)
    {
        // verify the required parameter 'class' is set
        if ($class === null) {
            throw new \InvalidArgumentException('Missing the required parameter $class when calling getClasses');
        }
        // parse inputs
        $resourcePath = "/blue/rest/classes/{class}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($class !== null) {
            $resourcePath = str_replace(
                "{" . "class" . "}",
                $this->apiClient->getSerializer()->toPathValue($class),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/blue/rest/classes/{class}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOrganisation
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SwaggyjenkinsOrganisation
     */
    public function getOrganisation($organisation)
    {
        list($response) = $this->getOrganisationWithHttpInfo($organisation);
        return $response;
    }

    /**
     * Operation getOrganisationWithHttpInfo
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SwaggyjenkinsOrganisation, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganisationWithHttpInfo($organisation)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organisation when calling getOrganisation');
        }
        // parse inputs
        $resourcePath = "/blue/rest/organizations/{organisation}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                "{" . "organisation" . "}",
                $this->apiClient->getSerializer()->toPathValue($organisation),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SwaggyjenkinsOrganisation',
                '/blue/rest/organizations/{organisation}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SwaggyjenkinsOrganisation', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SwaggyjenkinsOrganisation', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getOrganisations
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetOrganisations
     */
    public function getOrganisations()
    {
        list($response) = $this->getOrganisationsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getOrganisationsWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetOrganisations, HTTP status code, HTTP response headers (array of strings)
     */
    public function getOrganisationsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/blue/rest/organizations/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetOrganisations',
                '/blue/rest/organizations/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetOrganisations', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetOrganisations', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPipelineBranchByOrg
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $pipeline Name of the pipeline (required)
     * @param string $branch Name of the branch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\IojenkinsblueoceanrestimplpipelineBranchImpl
     */
    public function getPipelineBranchByOrg($organisation, $pipeline, $branch)
    {
        list($response) = $this->getPipelineBranchByOrgWithHttpInfo($organisation, $pipeline, $branch);
        return $response;
    }

    /**
     * Operation getPipelineBranchByOrgWithHttpInfo
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $pipeline Name of the pipeline (required)
     * @param string $branch Name of the branch (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\IojenkinsblueoceanrestimplpipelineBranchImpl, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPipelineBranchByOrgWithHttpInfo($organisation, $pipeline, $branch)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organisation when calling getPipelineBranchByOrg');
        }
        // verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pipeline when calling getPipelineBranchByOrg');
        }
        // verify the required parameter 'branch' is set
        if ($branch === null) {
            throw new \InvalidArgumentException('Missing the required parameter $branch when calling getPipelineBranchByOrg');
        }
        // parse inputs
        $resourcePath = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches/{branch}/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                "{" . "organisation" . "}",
                $this->apiClient->getSerializer()->toPathValue($organisation),
                $resourcePath
            );
        }
        // path params
        if ($pipeline !== null) {
            $resourcePath = str_replace(
                "{" . "pipeline" . "}",
                $this->apiClient->getSerializer()->toPathValue($pipeline),
                $resourcePath
            );
        }
        // path params
        if ($branch !== null) {
            $resourcePath = str_replace(
                "{" . "branch" . "}",
                $this->apiClient->getSerializer()->toPathValue($branch),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\IojenkinsblueoceanrestimplpipelineBranchImpl',
                '/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches/{branch}/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\IojenkinsblueoceanrestimplpipelineBranchImpl', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\IojenkinsblueoceanrestimplpipelineBranchImpl', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPipelineBranchesByOrg
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $pipeline Name of the pipeline (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetMultibranchPipeline
     */
    public function getPipelineBranchesByOrg($organisation, $pipeline)
    {
        list($response) = $this->getPipelineBranchesByOrgWithHttpInfo($organisation, $pipeline);
        return $response;
    }

    /**
     * Operation getPipelineBranchesByOrgWithHttpInfo
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $pipeline Name of the pipeline (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetMultibranchPipeline, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPipelineBranchesByOrgWithHttpInfo($organisation, $pipeline)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organisation when calling getPipelineBranchesByOrg');
        }
        // verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pipeline when calling getPipelineBranchesByOrg');
        }
        // parse inputs
        $resourcePath = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                "{" . "organisation" . "}",
                $this->apiClient->getSerializer()->toPathValue($organisation),
                $resourcePath
            );
        }
        // path params
        if ($pipeline !== null) {
            $resourcePath = str_replace(
                "{" . "pipeline" . "}",
                $this->apiClient->getSerializer()->toPathValue($pipeline),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetMultibranchPipeline',
                '/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetMultibranchPipeline', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetMultibranchPipeline', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPipelineByOrg
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $pipeline Name of the pipeline (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SwaggyjenkinsPipeline
     */
    public function getPipelineByOrg($organisation, $pipeline)
    {
        list($response) = $this->getPipelineByOrgWithHttpInfo($organisation, $pipeline);
        return $response;
    }

    /**
     * Operation getPipelineByOrgWithHttpInfo
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $pipeline Name of the pipeline (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SwaggyjenkinsPipeline, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPipelineByOrgWithHttpInfo($organisation, $pipeline)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organisation when calling getPipelineByOrg');
        }
        // verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pipeline when calling getPipelineByOrg');
        }
        // parse inputs
        $resourcePath = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                "{" . "organisation" . "}",
                $this->apiClient->getSerializer()->toPathValue($organisation),
                $resourcePath
            );
        }
        // path params
        if ($pipeline !== null) {
            $resourcePath = str_replace(
                "{" . "pipeline" . "}",
                $this->apiClient->getSerializer()->toPathValue($pipeline),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SwaggyjenkinsPipeline',
                '/blue/rest/organizations/{organisation}/pipelines/{pipeline}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SwaggyjenkinsPipeline', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SwaggyjenkinsPipeline', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPipelineFolderByOrg
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $folder Name of the folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl
     */
    public function getPipelineFolderByOrg($organisation, $folder)
    {
        list($response) = $this->getPipelineFolderByOrgWithHttpInfo($organisation, $folder);
        return $response;
    }

    /**
     * Operation getPipelineFolderByOrgWithHttpInfo
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $folder Name of the folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPipelineFolderByOrgWithHttpInfo($organisation, $folder)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organisation when calling getPipelineFolderByOrg');
        }
        // verify the required parameter 'folder' is set
        if ($folder === null) {
            throw new \InvalidArgumentException('Missing the required parameter $folder when calling getPipelineFolderByOrg');
        }
        // parse inputs
        $resourcePath = "/blue/rest/organizations/{organisation}/pipelines/{folder}/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                "{" . "organisation" . "}",
                $this->apiClient->getSerializer()->toPathValue($organisation),
                $resourcePath
            );
        }
        // path params
        if ($folder !== null) {
            $resourcePath = str_replace(
                "{" . "folder" . "}",
                $this->apiClient->getSerializer()->toPathValue($folder),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl',
                '/blue/rest/organizations/{organisation}/pipelines/{folder}/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPipelineFolderByOrg_0
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $pipeline Name of the pipeline (required)
     * @param string $folder Name of the folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\IojenkinsblueoceanserviceembeddedrestPipelineImpl
     */
    public function getPipelineFolderByOrg_0($organisation, $pipeline, $folder)
    {
        list($response) = $this->getPipelineFolderByOrg_0WithHttpInfo($organisation, $pipeline, $folder);
        return $response;
    }

    /**
     * Operation getPipelineFolderByOrg_0WithHttpInfo
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $pipeline Name of the pipeline (required)
     * @param string $folder Name of the folder (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\IojenkinsblueoceanserviceembeddedrestPipelineImpl, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPipelineFolderByOrg_0WithHttpInfo($organisation, $pipeline, $folder)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organisation when calling getPipelineFolderByOrg_0');
        }
        // verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            throw new \InvalidArgumentException('Missing the required parameter $pipeline when calling getPipelineFolderByOrg_0');
        }
        // verify the required parameter 'folder' is set
        if ($folder === null) {
            throw new \InvalidArgumentException('Missing the required parameter $folder when calling getPipelineFolderByOrg_0');
        }
        // parse inputs
        $resourcePath = "/blue/rest/organizations/{organisation}/pipelines/{folder}/pipelines/{pipeline}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                "{" . "organisation" . "}",
                $this->apiClient->getSerializer()->toPathValue($organisation),
                $resourcePath
            );
        }
        // path params
        if ($pipeline !== null) {
            $resourcePath = str_replace(
                "{" . "pipeline" . "}",
                $this->apiClient->getSerializer()->toPathValue($pipeline),
                $resourcePath
            );
        }
        // path params
        if ($folder !== null) {
            $resourcePath = str_replace(
                "{" . "folder" . "}",
                $this->apiClient->getSerializer()->toPathValue($folder),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\IojenkinsblueoceanserviceembeddedrestPipelineImpl',
                '/blue/rest/organizations/{organisation}/pipelines/{folder}/pipelines/{pipeline}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\IojenkinsblueoceanserviceembeddedrestPipelineImpl', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\IojenkinsblueoceanserviceembeddedrestPipelineImpl', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getPipelinesByOrg
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\GetPipelines
     */
    public function getPipelinesByOrg($organisation)
    {
        list($response) = $this->getPipelinesByOrgWithHttpInfo($organisation);
        return $response;
    }

    /**
     * Operation getPipelinesByOrgWithHttpInfo
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\GetPipelines, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPipelinesByOrgWithHttpInfo($organisation)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organisation when calling getPipelinesByOrg');
        }
        // parse inputs
        $resourcePath = "/blue/rest/organizations/{organisation}/pipelines/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                "{" . "organisation" . "}",
                $this->apiClient->getSerializer()->toPathValue($organisation),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\GetPipelines',
                '/blue/rest/organizations/{organisation}/pipelines/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\GetPipelines', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\GetPipelines', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUser
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $user Name of the user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SwaggyjenkinsUser
     */
    public function getUser($organisation, $user)
    {
        list($response) = $this->getUserWithHttpInfo($organisation, $user);
        return $response;
    }

    /**
     * Operation getUserWithHttpInfo
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $user Name of the user (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SwaggyjenkinsUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserWithHttpInfo($organisation, $user)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organisation when calling getUser');
        }
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling getUser');
        }
        // parse inputs
        $resourcePath = "/blue/rest/organizations/{organisation}/users/{user}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                "{" . "organisation" . "}",
                $this->apiClient->getSerializer()->toPathValue($organisation),
                $resourcePath
            );
        }
        // path params
        if ($user !== null) {
            $resourcePath = str_replace(
                "{" . "user" . "}",
                $this->apiClient->getSerializer()->toPathValue($user),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SwaggyjenkinsUser',
                '/blue/rest/organizations/{organisation}/users/{user}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SwaggyjenkinsUser', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SwaggyjenkinsUser', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getUsers
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\SwaggyjenkinsUser
     */
    public function getUsers($organisation)
    {
        list($response) = $this->getUsersWithHttpInfo($organisation);
        return $response;
    }

    /**
     * Operation getUsersWithHttpInfo
     *
     * 
     *
     * @param string $organisation Name of the organisation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\SwaggyjenkinsUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUsersWithHttpInfo($organisation)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $organisation when calling getUsers');
        }
        // parse inputs
        $resourcePath = "/blue/rest/organizations/{organisation}/users/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                "{" . "organisation" . "}",
                $this->apiClient->getSerializer()->toPathValue($organisation),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\SwaggyjenkinsUser',
                '/blue/rest/organizations/{organisation}/users/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\SwaggyjenkinsUser', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\SwaggyjenkinsUser', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation search
     *
     * 
     *
     * @param string $q Query string containing an array of class names (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function search($q)
    {
        list($response) = $this->searchWithHttpInfo($q);
        return $response;
    }

    /**
     * Operation searchWithHttpInfo
     *
     * 
     *
     * @param string $q Query string containing an array of class names (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchWithHttpInfo($q)
    {
        // verify the required parameter 'q' is set
        if ($q === null) {
            throw new \InvalidArgumentException('Missing the required parameter $q when calling search');
        }
        // parse inputs
        $resourcePath = "/blue/rest/classes/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($q !== null) {
            $queryParams['q'] = $this->apiClient->getSerializer()->toQueryValue($q);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/blue/rest/classes/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation search_0
     *
     * 
     *
     * @param string $q Query string (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function search_0($q)
    {
        list($response) = $this->search_0WithHttpInfo($q);
        return $response;
    }

    /**
     * Operation search_0WithHttpInfo
     *
     * 
     *
     * @param string $q Query string (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function search_0WithHttpInfo($q)
    {
        // verify the required parameter 'q' is set
        if ($q === null) {
            throw new \InvalidArgumentException('Missing the required parameter $q when calling search_0');
        }
        // parse inputs
        $resourcePath = "/blue/rest/search/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($q !== null) {
            $queryParams['q'] = $this->apiClient->getSerializer()->toQueryValue($q);
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/blue/rest/search/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
