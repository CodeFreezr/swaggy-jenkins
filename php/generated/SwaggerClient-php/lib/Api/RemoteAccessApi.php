<?php
/**
 * RemoteAccessApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * RemoteAccessApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RemoteAccessApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return RemoteAccessApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation getComputer
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\HudsonmodelComputerSet
     */
    public function getComputer()
    {
        list($response) = $this->getComputerWithHttpInfo();
        return $response;
    }

    /**
     * Operation getComputerWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\HudsonmodelComputerSet, HTTP status code, HTTP response headers (array of strings)
     */
    public function getComputerWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/computer/api/json?depth=1";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\HudsonmodelComputerSet',
                '/computer/api/json?depth=1'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\HudsonmodelComputerSet', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\HudsonmodelComputerSet', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getCrumb
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\HudsonsecuritycsrfDefaultCrumbIssuer
     */
    public function getCrumb()
    {
        list($response) = $this->getCrumbWithHttpInfo();
        return $response;
    }

    /**
     * Operation getCrumbWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\HudsonsecuritycsrfDefaultCrumbIssuer, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCrumbWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/crumbIssuer/api/json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\HudsonsecuritycsrfDefaultCrumbIssuer',
                '/crumbIssuer/api/json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\HudsonsecuritycsrfDefaultCrumbIssuer', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\HudsonsecuritycsrfDefaultCrumbIssuer', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getJenkins
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\HudsonmodelHudson
     */
    public function getJenkins()
    {
        list($response) = $this->getJenkinsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getJenkinsWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\HudsonmodelHudson, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJenkinsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/api/json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\HudsonmodelHudson',
                '/api/json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\HudsonmodelHudson', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\HudsonmodelHudson', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getJob
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\HudsonmodelFreeStyleProject
     */
    public function getJob($name)
    {
        list($response) = $this->getJobWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation getJobWithHttpInfo
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\HudsonmodelFreeStyleProject, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJobWithHttpInfo($name)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getJob');
        }
        // parse inputs
        $resourcePath = "/job/{name}/api/json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\HudsonmodelFreeStyleProject',
                '/job/{name}/api/json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\HudsonmodelFreeStyleProject', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\HudsonmodelFreeStyleProject', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getJobConfig
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getJobConfig($name)
    {
        list($response) = $this->getJobConfigWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation getJobConfigWithHttpInfo
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJobConfigWithHttpInfo($name)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getJobConfig');
        }
        // parse inputs
        $resourcePath = "/job/{name}/config.xml";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/job/{name}/config.xml'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getJobLastBuild
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\HudsonmodelFreeStyleBuild
     */
    public function getJobLastBuild($name)
    {
        list($response) = $this->getJobLastBuildWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation getJobLastBuildWithHttpInfo
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\HudsonmodelFreeStyleBuild, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJobLastBuildWithHttpInfo($name)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getJobLastBuild');
        }
        // parse inputs
        $resourcePath = "/job/{name}/lastBuild/api/json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\HudsonmodelFreeStyleBuild',
                '/job/{name}/lastBuild/api/json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\HudsonmodelFreeStyleBuild', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\HudsonmodelFreeStyleBuild', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getJobProgressiveText
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @param string $number Build number (required)
     * @param string $start Starting point of progressive text output (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function getJobProgressiveText($name, $number, $start)
    {
        list($response) = $this->getJobProgressiveTextWithHttpInfo($name, $number, $start);
        return $response;
    }

    /**
     * Operation getJobProgressiveTextWithHttpInfo
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @param string $number Build number (required)
     * @param string $start Starting point of progressive text output (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getJobProgressiveTextWithHttpInfo($name, $number, $start)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getJobProgressiveText');
        }
        // verify the required parameter 'number' is set
        if ($number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number when calling getJobProgressiveText');
        }
        // verify the required parameter 'start' is set
        if ($start === null) {
            throw new \InvalidArgumentException('Missing the required parameter $start when calling getJobProgressiveText');
        }
        // parse inputs
        $resourcePath = "/job/{name}/{number}/logText/progressiveText";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($start !== null) {
            $queryParams['start'] = $this->apiClient->getSerializer()->toQueryValue($start);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                "{" . "number" . "}",
                $this->apiClient->getSerializer()->toPathValue($number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/job/{name}/{number}/logText/progressiveText'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation getQueue
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\HudsonmodelQueue
     */
    public function getQueue()
    {
        list($response) = $this->getQueueWithHttpInfo();
        return $response;
    }

    /**
     * Operation getQueueWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\HudsonmodelQueue, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQueueWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/queue/api/json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\HudsonmodelQueue',
                '/queue/api/json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\HudsonmodelQueue', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\HudsonmodelQueue', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getQueueItem
     *
     * 
     *
     * @param string $number Queue number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\HudsonmodelQueue
     */
    public function getQueueItem($number)
    {
        list($response) = $this->getQueueItemWithHttpInfo($number);
        return $response;
    }

    /**
     * Operation getQueueItemWithHttpInfo
     *
     * 
     *
     * @param string $number Queue number (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\HudsonmodelQueue, HTTP status code, HTTP response headers (array of strings)
     */
    public function getQueueItemWithHttpInfo($number)
    {
        // verify the required parameter 'number' is set
        if ($number === null) {
            throw new \InvalidArgumentException('Missing the required parameter $number when calling getQueueItem');
        }
        // parse inputs
        $resourcePath = "/queue/item/{number}/api/json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($number !== null) {
            $resourcePath = str_replace(
                "{" . "number" . "}",
                $this->apiClient->getSerializer()->toPathValue($number),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\HudsonmodelQueue',
                '/queue/item/{number}/api/json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\HudsonmodelQueue', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\HudsonmodelQueue', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getView
     *
     * 
     *
     * @param string $name Name of the view (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\HudsonmodelListView
     */
    public function getView($name)
    {
        list($response) = $this->getViewWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation getViewWithHttpInfo
     *
     * 
     *
     * @param string $name Name of the view (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\HudsonmodelListView, HTTP status code, HTTP response headers (array of strings)
     */
    public function getViewWithHttpInfo($name)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getView');
        }
        // parse inputs
        $resourcePath = "/view/{name}/api/json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\HudsonmodelListView',
                '/view/{name}/api/json'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\HudsonmodelListView', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\HudsonmodelListView', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getViewConfig
     *
     * 
     *
     * @param string $name Name of the view (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function getViewConfig($name)
    {
        list($response) = $this->getViewConfigWithHttpInfo($name);
        return $response;
    }

    /**
     * Operation getViewConfigWithHttpInfo
     *
     * 
     *
     * @param string $name Name of the view (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function getViewConfigWithHttpInfo($name)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling getViewConfig');
        }
        // parse inputs
        $resourcePath = "/view/{name}/config.xml";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/view/{name}/config.xml'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation headJenkins
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function headJenkins()
    {
        list($response) = $this->headJenkinsWithHttpInfo();
        return $response;
    }

    /**
     * Operation headJenkinsWithHttpInfo
     *
     * 
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function headJenkinsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/api/json";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);


        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'HEAD',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/api/json'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation postCreateItem
     *
     * 
     *
     * @param string $name Name of the new job (required)
     * @param string $from Existing job to copy from (optional)
     * @param string $mode Set to &#39;copy&#39; for copying an existing job (optional)
     * @param string $body Job configuration in config.xml format (optional)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @param string $content_type Content type header application/xml (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function postCreateItem($name, $from = null, $mode = null, $body = null, $jenkins_crumb = null, $content_type = null)
    {
        list($response) = $this->postCreateItemWithHttpInfo($name, $from, $mode, $body, $jenkins_crumb, $content_type);
        return $response;
    }

    /**
     * Operation postCreateItemWithHttpInfo
     *
     * 
     *
     * @param string $name Name of the new job (required)
     * @param string $from Existing job to copy from (optional)
     * @param string $mode Set to &#39;copy&#39; for copying an existing job (optional)
     * @param string $body Job configuration in config.xml format (optional)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @param string $content_type Content type header application/xml (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCreateItemWithHttpInfo($name, $from = null, $mode = null, $body = null, $jenkins_crumb = null, $content_type = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postCreateItem');
        }
        // parse inputs
        $resourcePath = "/createItem";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = $this->apiClient->getSerializer()->toQueryValue($from);
        }
        // query params
        if ($mode !== null) {
            $queryParams['mode'] = $this->apiClient->getSerializer()->toQueryValue($mode);
        }
        // header params
        if ($jenkins_crumb !== null) {
            $headerParams['Jenkins-Crumb'] = $this->apiClient->getSerializer()->toHeaderValue($jenkins_crumb);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = $this->apiClient->getSerializer()->toHeaderValue($content_type);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/createItem'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postCreateView
     *
     * 
     *
     * @param string $name Name of the new view (required)
     * @param string $body View configuration in config.xml format (optional)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @param string $content_type Content type header application/xml (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function postCreateView($name, $body = null, $jenkins_crumb = null, $content_type = null)
    {
        list($response) = $this->postCreateViewWithHttpInfo($name, $body, $jenkins_crumb, $content_type);
        return $response;
    }

    /**
     * Operation postCreateViewWithHttpInfo
     *
     * 
     *
     * @param string $name Name of the new view (required)
     * @param string $body View configuration in config.xml format (optional)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @param string $content_type Content type header application/xml (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postCreateViewWithHttpInfo($name, $body = null, $jenkins_crumb = null, $content_type = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postCreateView');
        }
        // parse inputs
        $resourcePath = "/createView";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/html']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($name !== null) {
            $queryParams['name'] = $this->apiClient->getSerializer()->toQueryValue($name);
        }
        // header params
        if ($jenkins_crumb !== null) {
            $headerParams['Jenkins-Crumb'] = $this->apiClient->getSerializer()->toHeaderValue($jenkins_crumb);
        }
        // header params
        if ($content_type !== null) {
            $headerParams['Content-Type'] = $this->apiClient->getSerializer()->toHeaderValue($content_type);
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/createView'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postJobBuild
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @param string $json  (required)
     * @param string $token  (optional)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function postJobBuild($name, $json, $token = null, $jenkins_crumb = null)
    {
        list($response) = $this->postJobBuildWithHttpInfo($name, $json, $token, $jenkins_crumb);
        return $response;
    }

    /**
     * Operation postJobBuildWithHttpInfo
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @param string $json  (required)
     * @param string $token  (optional)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postJobBuildWithHttpInfo($name, $json, $token = null, $jenkins_crumb = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postJobBuild');
        }
        // verify the required parameter 'json' is set
        if ($json === null) {
            throw new \InvalidArgumentException('Missing the required parameter $json when calling postJobBuild');
        }
        // parse inputs
        $resourcePath = "/job/{name}/build";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // query params
        if ($json !== null) {
            $queryParams['json'] = $this->apiClient->getSerializer()->toQueryValue($json);
        }
        // query params
        if ($token !== null) {
            $queryParams['token'] = $this->apiClient->getSerializer()->toQueryValue($token);
        }
        // header params
        if ($jenkins_crumb !== null) {
            $headerParams['Jenkins-Crumb'] = $this->apiClient->getSerializer()->toHeaderValue($jenkins_crumb);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/job/{name}/build'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation postJobConfig
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @param string $body Job configuration in config.xml format (required)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function postJobConfig($name, $body, $jenkins_crumb = null)
    {
        list($response) = $this->postJobConfigWithHttpInfo($name, $body, $jenkins_crumb);
        return $response;
    }

    /**
     * Operation postJobConfigWithHttpInfo
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @param string $body Job configuration in config.xml format (required)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postJobConfigWithHttpInfo($name, $body, $jenkins_crumb = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postJobConfig');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postJobConfig');
        }
        // parse inputs
        $resourcePath = "/job/{name}/config.xml";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['text/xml']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($jenkins_crumb !== null) {
            $headerParams['Jenkins-Crumb'] = $this->apiClient->getSerializer()->toHeaderValue($jenkins_crumb);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/job/{name}/config.xml'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation postJobDelete
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function postJobDelete($name, $jenkins_crumb = null)
    {
        list($response) = $this->postJobDeleteWithHttpInfo($name, $jenkins_crumb);
        return $response;
    }

    /**
     * Operation postJobDeleteWithHttpInfo
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postJobDeleteWithHttpInfo($name, $jenkins_crumb = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postJobDelete');
        }
        // parse inputs
        $resourcePath = "/job/{name}/doDelete";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($jenkins_crumb !== null) {
            $headerParams['Jenkins-Crumb'] = $this->apiClient->getSerializer()->toHeaderValue($jenkins_crumb);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/job/{name}/doDelete'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation postJobDisable
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function postJobDisable($name, $jenkins_crumb = null)
    {
        list($response) = $this->postJobDisableWithHttpInfo($name, $jenkins_crumb);
        return $response;
    }

    /**
     * Operation postJobDisableWithHttpInfo
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postJobDisableWithHttpInfo($name, $jenkins_crumb = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postJobDisable');
        }
        // parse inputs
        $resourcePath = "/job/{name}/disable";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($jenkins_crumb !== null) {
            $headerParams['Jenkins-Crumb'] = $this->apiClient->getSerializer()->toHeaderValue($jenkins_crumb);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/job/{name}/disable'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation postJobEnable
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function postJobEnable($name, $jenkins_crumb = null)
    {
        list($response) = $this->postJobEnableWithHttpInfo($name, $jenkins_crumb);
        return $response;
    }

    /**
     * Operation postJobEnableWithHttpInfo
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postJobEnableWithHttpInfo($name, $jenkins_crumb = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postJobEnable');
        }
        // parse inputs
        $resourcePath = "/job/{name}/enable";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($jenkins_crumb !== null) {
            $headerParams['Jenkins-Crumb'] = $this->apiClient->getSerializer()->toHeaderValue($jenkins_crumb);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/job/{name}/enable'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation postJobLastBuildStop
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function postJobLastBuildStop($name, $jenkins_crumb = null)
    {
        list($response) = $this->postJobLastBuildStopWithHttpInfo($name, $jenkins_crumb);
        return $response;
    }

    /**
     * Operation postJobLastBuildStopWithHttpInfo
     *
     * 
     *
     * @param string $name Name of the job (required)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postJobLastBuildStopWithHttpInfo($name, $jenkins_crumb = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postJobLastBuildStop');
        }
        // parse inputs
        $resourcePath = "/job/{name}/lastBuild/stop";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($jenkins_crumb !== null) {
            $headerParams['Jenkins-Crumb'] = $this->apiClient->getSerializer()->toHeaderValue($jenkins_crumb);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/job/{name}/lastBuild/stop'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation postViewConfig
     *
     * 
     *
     * @param string $name Name of the view (required)
     * @param string $body View configuration in config.xml format (required)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function postViewConfig($name, $body, $jenkins_crumb = null)
    {
        list($response) = $this->postViewConfigWithHttpInfo($name, $body, $jenkins_crumb);
        return $response;
    }

    /**
     * Operation postViewConfigWithHttpInfo
     *
     * 
     *
     * @param string $name Name of the view (required)
     * @param string $body View configuration in config.xml format (required)
     * @param string $jenkins_crumb CSRF protection token (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function postViewConfigWithHttpInfo($name, $body, $jenkins_crumb = null)
    {
        // verify the required parameter 'name' is set
        if ($name === null) {
            throw new \InvalidArgumentException('Missing the required parameter $name when calling postViewConfig');
        }
        // verify the required parameter 'body' is set
        if ($body === null) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling postViewConfig');
        }
        // parse inputs
        $resourcePath = "/view/{name}/config.xml";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept([]);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType([]);

        // header params
        if ($jenkins_crumb !== null) {
            $headerParams['Jenkins-Crumb'] = $this->apiClient->getSerializer()->toHeaderValue($jenkins_crumb);
        }
        // path params
        if ($name !== null) {
            $resourcePath = str_replace(
                "{" . "name" . "}",
                $this->apiClient->getSerializer()->toPathValue($name),
                $resourcePath
            );
        }
        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/view/{name}/config.xml'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
