/*
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.cliffano.swaggyjenkins.api;

import com.cliffano.swaggyjenkins.ApiCallback;
import com.cliffano.swaggyjenkins.ApiClient;
import com.cliffano.swaggyjenkins.ApiException;
import com.cliffano.swaggyjenkins.ApiResponse;
import com.cliffano.swaggyjenkins.Configuration;
import com.cliffano.swaggyjenkins.Pair;
import com.cliffano.swaggyjenkins.ProgressRequestBody;
import com.cliffano.swaggyjenkins.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.cliffano.swaggyjenkins.model.GetMultibranchPipeline;
import com.cliffano.swaggyjenkins.model.GetOrganisations;
import com.cliffano.swaggyjenkins.model.GetPipelines;
import com.cliffano.swaggyjenkins.model.IojenkinsblueoceanrestimplpipelineBranchImpl;
import com.cliffano.swaggyjenkins.model.IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl;
import com.cliffano.swaggyjenkins.model.IojenkinsblueoceanserviceembeddedrestPipelineImpl;
import com.cliffano.swaggyjenkins.model.SwaggyjenkinsOrganisation;
import com.cliffano.swaggyjenkins.model.SwaggyjenkinsPipeline;
import com.cliffano.swaggyjenkins.model.SwaggyjenkinsUser;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BlueOceanApi {
    private ApiClient apiClient;

    public BlueOceanApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BlueOceanApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getAuthenticatedUser
     * @param organisation Name of the organisation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getAuthenticatedUserCall(String organisation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organisation}/user/"
            .replaceAll("\\{" + "organisation" + "\\}", apiClient.escapeString(organisation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getAuthenticatedUserValidateBeforeCall(String organisation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organisation' is set
        if (organisation == null) {
            throw new ApiException("Missing the required parameter 'organisation' when calling getAuthenticatedUser(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getAuthenticatedUserCall(organisation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve authenticated user details for an organisation
     * @param organisation Name of the organisation (required)
     * @return SwaggyjenkinsUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SwaggyjenkinsUser getAuthenticatedUser(String organisation) throws ApiException {
        ApiResponse<SwaggyjenkinsUser> resp = getAuthenticatedUserWithHttpInfo(organisation);
        return resp.getData();
    }

    /**
     * 
     * Retrieve authenticated user details for an organisation
     * @param organisation Name of the organisation (required)
     * @return ApiResponse&lt;SwaggyjenkinsUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SwaggyjenkinsUser> getAuthenticatedUserWithHttpInfo(String organisation) throws ApiException {
        com.squareup.okhttp.Call call = getAuthenticatedUserValidateBeforeCall(organisation, null, null);
        Type localVarReturnType = new TypeToken<SwaggyjenkinsUser>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve authenticated user details for an organisation
     * @param organisation Name of the organisation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getAuthenticatedUserAsync(String organisation, final ApiCallback<SwaggyjenkinsUser> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getAuthenticatedUserValidateBeforeCall(organisation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SwaggyjenkinsUser>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getClasses
     * @param propertyClass Name of the class (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getClassesCall(String propertyClass, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/blue/rest/classes/{class}"
            .replaceAll("\\{" + "class" + "\\}", apiClient.escapeString(propertyClass.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getClassesValidateBeforeCall(String propertyClass, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'propertyClass' is set
        if (propertyClass == null) {
            throw new ApiException("Missing the required parameter 'propertyClass' when calling getClasses(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getClassesCall(propertyClass, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get a list of class names supported by a given class
     * @param propertyClass Name of the class (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String getClasses(String propertyClass) throws ApiException {
        ApiResponse<String> resp = getClassesWithHttpInfo(propertyClass);
        return resp.getData();
    }

    /**
     * 
     * Get a list of class names supported by a given class
     * @param propertyClass Name of the class (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> getClassesWithHttpInfo(String propertyClass) throws ApiException {
        com.squareup.okhttp.Call call = getClassesValidateBeforeCall(propertyClass, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a list of class names supported by a given class
     * @param propertyClass Name of the class (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getClassesAsync(String propertyClass, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getClassesValidateBeforeCall(propertyClass, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrganisation
     * @param organisation Name of the organisation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrganisationCall(String organisation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organisation}"
            .replaceAll("\\{" + "organisation" + "\\}", apiClient.escapeString(organisation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrganisationValidateBeforeCall(String organisation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organisation' is set
        if (organisation == null) {
            throw new ApiException("Missing the required parameter 'organisation' when calling getOrganisation(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getOrganisationCall(organisation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve organisation details
     * @param organisation Name of the organisation (required)
     * @return SwaggyjenkinsOrganisation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SwaggyjenkinsOrganisation getOrganisation(String organisation) throws ApiException {
        ApiResponse<SwaggyjenkinsOrganisation> resp = getOrganisationWithHttpInfo(organisation);
        return resp.getData();
    }

    /**
     * 
     * Retrieve organisation details
     * @param organisation Name of the organisation (required)
     * @return ApiResponse&lt;SwaggyjenkinsOrganisation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SwaggyjenkinsOrganisation> getOrganisationWithHttpInfo(String organisation) throws ApiException {
        com.squareup.okhttp.Call call = getOrganisationValidateBeforeCall(organisation, null, null);
        Type localVarReturnType = new TypeToken<SwaggyjenkinsOrganisation>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve organisation details
     * @param organisation Name of the organisation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrganisationAsync(String organisation, final ApiCallback<SwaggyjenkinsOrganisation> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrganisationValidateBeforeCall(organisation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SwaggyjenkinsOrganisation>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getOrganisations
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getOrganisationsCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/blue/rest/organizations/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getOrganisationsValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getOrganisationsCall(progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve all organisations details
     * @return GetOrganisations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetOrganisations getOrganisations() throws ApiException {
        ApiResponse<GetOrganisations> resp = getOrganisationsWithHttpInfo();
        return resp.getData();
    }

    /**
     * 
     * Retrieve all organisations details
     * @return ApiResponse&lt;GetOrganisations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetOrganisations> getOrganisationsWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = getOrganisationsValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<GetOrganisations>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all organisations details
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getOrganisationsAsync(final ApiCallback<GetOrganisations> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getOrganisationsValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetOrganisations>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPipelineBranchByOrg
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPipelineBranchByOrgCall(String organisation, String pipeline, String branch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches/{branch}/"
            .replaceAll("\\{" + "organisation" + "\\}", apiClient.escapeString(organisation.toString()))
            .replaceAll("\\{" + "pipeline" + "\\}", apiClient.escapeString(pipeline.toString()))
            .replaceAll("\\{" + "branch" + "\\}", apiClient.escapeString(branch.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPipelineBranchByOrgValidateBeforeCall(String organisation, String pipeline, String branch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organisation' is set
        if (organisation == null) {
            throw new ApiException("Missing the required parameter 'organisation' when calling getPipelineBranchByOrg(Async)");
        }
        
        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineBranchByOrg(Async)");
        }
        
        // verify the required parameter 'branch' is set
        if (branch == null) {
            throw new ApiException("Missing the required parameter 'branch' when calling getPipelineBranchByOrg(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPipelineBranchByOrgCall(organisation, pipeline, branch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve branch details for an organisation pipeline
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @return IojenkinsblueoceanrestimplpipelineBranchImpl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IojenkinsblueoceanrestimplpipelineBranchImpl getPipelineBranchByOrg(String organisation, String pipeline, String branch) throws ApiException {
        ApiResponse<IojenkinsblueoceanrestimplpipelineBranchImpl> resp = getPipelineBranchByOrgWithHttpInfo(organisation, pipeline, branch);
        return resp.getData();
    }

    /**
     * 
     * Retrieve branch details for an organisation pipeline
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @return ApiResponse&lt;IojenkinsblueoceanrestimplpipelineBranchImpl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IojenkinsblueoceanrestimplpipelineBranchImpl> getPipelineBranchByOrgWithHttpInfo(String organisation, String pipeline, String branch) throws ApiException {
        com.squareup.okhttp.Call call = getPipelineBranchByOrgValidateBeforeCall(organisation, pipeline, branch, null, null);
        Type localVarReturnType = new TypeToken<IojenkinsblueoceanrestimplpipelineBranchImpl>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve branch details for an organisation pipeline
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPipelineBranchByOrgAsync(String organisation, String pipeline, String branch, final ApiCallback<IojenkinsblueoceanrestimplpipelineBranchImpl> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPipelineBranchByOrgValidateBeforeCall(organisation, pipeline, branch, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IojenkinsblueoceanrestimplpipelineBranchImpl>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPipelineBranchesByOrg
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPipelineBranchesByOrgCall(String organisation, String pipeline, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches"
            .replaceAll("\\{" + "organisation" + "\\}", apiClient.escapeString(organisation.toString()))
            .replaceAll("\\{" + "pipeline" + "\\}", apiClient.escapeString(pipeline.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPipelineBranchesByOrgValidateBeforeCall(String organisation, String pipeline, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organisation' is set
        if (organisation == null) {
            throw new ApiException("Missing the required parameter 'organisation' when calling getPipelineBranchesByOrg(Async)");
        }
        
        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineBranchesByOrg(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPipelineBranchesByOrgCall(organisation, pipeline, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve all branches details for an organisation pipeline
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @return GetMultibranchPipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetMultibranchPipeline getPipelineBranchesByOrg(String organisation, String pipeline) throws ApiException {
        ApiResponse<GetMultibranchPipeline> resp = getPipelineBranchesByOrgWithHttpInfo(organisation, pipeline);
        return resp.getData();
    }

    /**
     * 
     * Retrieve all branches details for an organisation pipeline
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @return ApiResponse&lt;GetMultibranchPipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetMultibranchPipeline> getPipelineBranchesByOrgWithHttpInfo(String organisation, String pipeline) throws ApiException {
        com.squareup.okhttp.Call call = getPipelineBranchesByOrgValidateBeforeCall(organisation, pipeline, null, null);
        Type localVarReturnType = new TypeToken<GetMultibranchPipeline>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all branches details for an organisation pipeline
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPipelineBranchesByOrgAsync(String organisation, String pipeline, final ApiCallback<GetMultibranchPipeline> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPipelineBranchesByOrgValidateBeforeCall(organisation, pipeline, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetMultibranchPipeline>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPipelineByOrg
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPipelineByOrgCall(String organisation, String pipeline, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}"
            .replaceAll("\\{" + "organisation" + "\\}", apiClient.escapeString(organisation.toString()))
            .replaceAll("\\{" + "pipeline" + "\\}", apiClient.escapeString(pipeline.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPipelineByOrgValidateBeforeCall(String organisation, String pipeline, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organisation' is set
        if (organisation == null) {
            throw new ApiException("Missing the required parameter 'organisation' when calling getPipelineByOrg(Async)");
        }
        
        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineByOrg(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPipelineByOrgCall(organisation, pipeline, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve pipeline details for an organisation
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @return SwaggyjenkinsPipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SwaggyjenkinsPipeline getPipelineByOrg(String organisation, String pipeline) throws ApiException {
        ApiResponse<SwaggyjenkinsPipeline> resp = getPipelineByOrgWithHttpInfo(organisation, pipeline);
        return resp.getData();
    }

    /**
     * 
     * Retrieve pipeline details for an organisation
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @return ApiResponse&lt;SwaggyjenkinsPipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SwaggyjenkinsPipeline> getPipelineByOrgWithHttpInfo(String organisation, String pipeline) throws ApiException {
        com.squareup.okhttp.Call call = getPipelineByOrgValidateBeforeCall(organisation, pipeline, null, null);
        Type localVarReturnType = new TypeToken<SwaggyjenkinsPipeline>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve pipeline details for an organisation
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPipelineByOrgAsync(String organisation, String pipeline, final ApiCallback<SwaggyjenkinsPipeline> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPipelineByOrgValidateBeforeCall(organisation, pipeline, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SwaggyjenkinsPipeline>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPipelineFolderByOrg
     * @param organisation Name of the organisation (required)
     * @param folder Name of the folder (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPipelineFolderByOrgCall(String organisation, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organisation}/pipelines/{folder}/"
            .replaceAll("\\{" + "organisation" + "\\}", apiClient.escapeString(organisation.toString()))
            .replaceAll("\\{" + "folder" + "\\}", apiClient.escapeString(folder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPipelineFolderByOrgValidateBeforeCall(String organisation, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organisation' is set
        if (organisation == null) {
            throw new ApiException("Missing the required parameter 'organisation' when calling getPipelineFolderByOrg(Async)");
        }
        
        // verify the required parameter 'folder' is set
        if (folder == null) {
            throw new ApiException("Missing the required parameter 'folder' when calling getPipelineFolderByOrg(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPipelineFolderByOrgCall(organisation, folder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve pipeline folder for an organisation
     * @param organisation Name of the organisation (required)
     * @param folder Name of the folder (required)
     * @return IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl getPipelineFolderByOrg(String organisation, String folder) throws ApiException {
        ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl> resp = getPipelineFolderByOrgWithHttpInfo(organisation, folder);
        return resp.getData();
    }

    /**
     * 
     * Retrieve pipeline folder for an organisation
     * @param organisation Name of the organisation (required)
     * @param folder Name of the folder (required)
     * @return ApiResponse&lt;IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl> getPipelineFolderByOrgWithHttpInfo(String organisation, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPipelineFolderByOrgValidateBeforeCall(organisation, folder, null, null);
        Type localVarReturnType = new TypeToken<IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve pipeline folder for an organisation
     * @param organisation Name of the organisation (required)
     * @param folder Name of the folder (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPipelineFolderByOrgAsync(String organisation, String folder, final ApiCallback<IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPipelineFolderByOrgValidateBeforeCall(organisation, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPipelineFolderByOrg_0
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @param folder Name of the folder (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPipelineFolderByOrg_0Call(String organisation, String pipeline, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organisation}/pipelines/{folder}/pipelines/{pipeline}"
            .replaceAll("\\{" + "organisation" + "\\}", apiClient.escapeString(organisation.toString()))
            .replaceAll("\\{" + "pipeline" + "\\}", apiClient.escapeString(pipeline.toString()))
            .replaceAll("\\{" + "folder" + "\\}", apiClient.escapeString(folder.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPipelineFolderByOrg_0ValidateBeforeCall(String organisation, String pipeline, String folder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organisation' is set
        if (organisation == null) {
            throw new ApiException("Missing the required parameter 'organisation' when calling getPipelineFolderByOrg_0(Async)");
        }
        
        // verify the required parameter 'pipeline' is set
        if (pipeline == null) {
            throw new ApiException("Missing the required parameter 'pipeline' when calling getPipelineFolderByOrg_0(Async)");
        }
        
        // verify the required parameter 'folder' is set
        if (folder == null) {
            throw new ApiException("Missing the required parameter 'folder' when calling getPipelineFolderByOrg_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPipelineFolderByOrg_0Call(organisation, pipeline, folder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve pipeline details for an organisation folder
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @param folder Name of the folder (required)
     * @return IojenkinsblueoceanserviceembeddedrestPipelineImpl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IojenkinsblueoceanserviceembeddedrestPipelineImpl getPipelineFolderByOrg_0(String organisation, String pipeline, String folder) throws ApiException {
        ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineImpl> resp = getPipelineFolderByOrg_0WithHttpInfo(organisation, pipeline, folder);
        return resp.getData();
    }

    /**
     * 
     * Retrieve pipeline details for an organisation folder
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @param folder Name of the folder (required)
     * @return ApiResponse&lt;IojenkinsblueoceanserviceembeddedrestPipelineImpl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineImpl> getPipelineFolderByOrg_0WithHttpInfo(String organisation, String pipeline, String folder) throws ApiException {
        com.squareup.okhttp.Call call = getPipelineFolderByOrg_0ValidateBeforeCall(organisation, pipeline, folder, null, null);
        Type localVarReturnType = new TypeToken<IojenkinsblueoceanserviceembeddedrestPipelineImpl>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve pipeline details for an organisation folder
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @param folder Name of the folder (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPipelineFolderByOrg_0Async(String organisation, String pipeline, String folder, final ApiCallback<IojenkinsblueoceanserviceembeddedrestPipelineImpl> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPipelineFolderByOrg_0ValidateBeforeCall(organisation, pipeline, folder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IojenkinsblueoceanserviceembeddedrestPipelineImpl>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getPipelinesByOrg
     * @param organisation Name of the organisation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getPipelinesByOrgCall(String organisation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organisation}/pipelines/"
            .replaceAll("\\{" + "organisation" + "\\}", apiClient.escapeString(organisation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getPipelinesByOrgValidateBeforeCall(String organisation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organisation' is set
        if (organisation == null) {
            throw new ApiException("Missing the required parameter 'organisation' when calling getPipelinesByOrg(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getPipelinesByOrgCall(organisation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve all pipelines details for an organisation
     * @param organisation Name of the organisation (required)
     * @return GetPipelines
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public GetPipelines getPipelinesByOrg(String organisation) throws ApiException {
        ApiResponse<GetPipelines> resp = getPipelinesByOrgWithHttpInfo(organisation);
        return resp.getData();
    }

    /**
     * 
     * Retrieve all pipelines details for an organisation
     * @param organisation Name of the organisation (required)
     * @return ApiResponse&lt;GetPipelines&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<GetPipelines> getPipelinesByOrgWithHttpInfo(String organisation) throws ApiException {
        com.squareup.okhttp.Call call = getPipelinesByOrgValidateBeforeCall(organisation, null, null);
        Type localVarReturnType = new TypeToken<GetPipelines>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve all pipelines details for an organisation
     * @param organisation Name of the organisation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getPipelinesByOrgAsync(String organisation, final ApiCallback<GetPipelines> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getPipelinesByOrgValidateBeforeCall(organisation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<GetPipelines>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUser
     * @param organisation Name of the organisation (required)
     * @param user Name of the user (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUserCall(String organisation, String user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organisation}/users/{user}"
            .replaceAll("\\{" + "organisation" + "\\}", apiClient.escapeString(organisation.toString()))
            .replaceAll("\\{" + "user" + "\\}", apiClient.escapeString(user.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUserValidateBeforeCall(String organisation, String user, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organisation' is set
        if (organisation == null) {
            throw new ApiException("Missing the required parameter 'organisation' when calling getUser(Async)");
        }
        
        // verify the required parameter 'user' is set
        if (user == null) {
            throw new ApiException("Missing the required parameter 'user' when calling getUser(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUserCall(organisation, user, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve user details for an organisation
     * @param organisation Name of the organisation (required)
     * @param user Name of the user (required)
     * @return SwaggyjenkinsUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SwaggyjenkinsUser getUser(String organisation, String user) throws ApiException {
        ApiResponse<SwaggyjenkinsUser> resp = getUserWithHttpInfo(organisation, user);
        return resp.getData();
    }

    /**
     * 
     * Retrieve user details for an organisation
     * @param organisation Name of the organisation (required)
     * @param user Name of the user (required)
     * @return ApiResponse&lt;SwaggyjenkinsUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SwaggyjenkinsUser> getUserWithHttpInfo(String organisation, String user) throws ApiException {
        com.squareup.okhttp.Call call = getUserValidateBeforeCall(organisation, user, null, null);
        Type localVarReturnType = new TypeToken<SwaggyjenkinsUser>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve user details for an organisation
     * @param organisation Name of the organisation (required)
     * @param user Name of the user (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUserAsync(String organisation, String user, final ApiCallback<SwaggyjenkinsUser> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUserValidateBeforeCall(organisation, user, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SwaggyjenkinsUser>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getUsers
     * @param organisation Name of the organisation (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getUsersCall(String organisation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/blue/rest/organizations/{organisation}/users/"
            .replaceAll("\\{" + "organisation" + "\\}", apiClient.escapeString(organisation.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getUsersValidateBeforeCall(String organisation, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'organisation' is set
        if (organisation == null) {
            throw new ApiException("Missing the required parameter 'organisation' when calling getUsers(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getUsersCall(organisation, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Retrieve users details for an organisation
     * @param organisation Name of the organisation (required)
     * @return SwaggyjenkinsUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SwaggyjenkinsUser getUsers(String organisation) throws ApiException {
        ApiResponse<SwaggyjenkinsUser> resp = getUsersWithHttpInfo(organisation);
        return resp.getData();
    }

    /**
     * 
     * Retrieve users details for an organisation
     * @param organisation Name of the organisation (required)
     * @return ApiResponse&lt;SwaggyjenkinsUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SwaggyjenkinsUser> getUsersWithHttpInfo(String organisation) throws ApiException {
        com.squareup.okhttp.Call call = getUsersValidateBeforeCall(organisation, null, null);
        Type localVarReturnType = new TypeToken<SwaggyjenkinsUser>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve users details for an organisation
     * @param organisation Name of the organisation (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getUsersAsync(String organisation, final ApiCallback<SwaggyjenkinsUser> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getUsersValidateBeforeCall(organisation, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SwaggyjenkinsUser>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for search
     * @param q Query string containing an array of class names (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call searchCall(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/blue/rest/classes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call searchValidateBeforeCall(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling search(Async)");
        }
        
        
        com.squareup.okhttp.Call call = searchCall(q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Get classes details
     * @param q Query string containing an array of class names (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String search(String q) throws ApiException {
        ApiResponse<String> resp = searchWithHttpInfo(q);
        return resp.getData();
    }

    /**
     * 
     * Get classes details
     * @param q Query string containing an array of class names (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> searchWithHttpInfo(String q) throws ApiException {
        com.squareup.okhttp.Call call = searchValidateBeforeCall(q, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get classes details
     * @param q Query string containing an array of class names (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call searchAsync(String q, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = searchValidateBeforeCall(q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for search_0
     * @param q Query string (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call search_0Call(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/blue/rest/search/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (q != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "q", q));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call search_0ValidateBeforeCall(String q, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling search_0(Async)");
        }
        
        
        com.squareup.okhttp.Call call = search_0Call(q, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 
     * Search for any resource details
     * @param q Query string (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String search_0(String q) throws ApiException {
        ApiResponse<String> resp = search_0WithHttpInfo(q);
        return resp.getData();
    }

    /**
     * 
     * Search for any resource details
     * @param q Query string (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> search_0WithHttpInfo(String q) throws ApiException {
        com.squareup.okhttp.Call call = search_0ValidateBeforeCall(q, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search for any resource details
     * @param q Query string (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call search_0Async(String q, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = search_0ValidateBeforeCall(q, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
