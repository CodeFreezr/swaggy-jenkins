/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api

import io.swagger.client.model.GetMultibranchPipeline
import io.swagger.client.model.GetOrganisations
import io.swagger.client.model.GetPipelines
import io.swagger.client.model.IojenkinsblueoceanrestimplpipelineBranchImpl
import io.swagger.client.model.IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl
import io.swagger.client.model.IojenkinsblueoceanserviceembeddedrestPipelineImpl
import io.swagger.client.model.SwaggyjenkinsOrganisation
import io.swagger.client.model.SwaggyjenkinsPipeline
import io.swagger.client.model.SwaggyjenkinsUser
import io.swagger.client.ApiInvoker
import io.swagger.client.ApiException

import com.sun.jersey.multipart.FormDataMultiPart
import com.sun.jersey.multipart.file.FileDataBodyPart

import javax.ws.rs.core.MediaType

import java.io.File
import java.util.Date

import scala.collection.mutable.HashMap

class BlueOceanApi(val defBasePath: String = "http://localhost",
                        defApiInvoker: ApiInvoker = ApiInvoker) {
  var basePath = defBasePath
  var apiInvoker = defApiInvoker

  def addHeader(key: String, value: String) = apiInvoker.defaultHeaders += key -> value 

  /**
   * 
   * Retrieve authenticated user details for an organisation
   * @param organisation Name of the organisation 
   * @return SwaggyjenkinsUser
   */
  def getAuthenticatedUser(organisation: String): Option[SwaggyjenkinsUser] = {
    // create path and map variables
    val path = "/blue/rest/organizations/{organisation}/user/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "organisation" + "\\}",apiInvoker.escape(organisation))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (organisation == null) throw new Exception("Missing required parameter 'organisation' when calling BlueOceanApi->getAuthenticatedUser")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[SwaggyjenkinsUser]).asInstanceOf[SwaggyjenkinsUser])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * Get a list of class names supported by a given class
   * @param _class Name of the class 
   * @return String
   */
  def getClasses(_class: String): Option[String] = {
    // create path and map variables
    val path = "/blue/rest/classes/{class}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "class" + "\\}",apiInvoker.escape(_class))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (_class == null) throw new Exception("Missing required parameter '_class' when calling BlueOceanApi->getClasses")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[String]).asInstanceOf[String])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * Retrieve organisation details
   * @param organisation Name of the organisation 
   * @return SwaggyjenkinsOrganisation
   */
  def getOrganisation(organisation: String): Option[SwaggyjenkinsOrganisation] = {
    // create path and map variables
    val path = "/blue/rest/organizations/{organisation}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "organisation" + "\\}",apiInvoker.escape(organisation))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (organisation == null) throw new Exception("Missing required parameter 'organisation' when calling BlueOceanApi->getOrganisation")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[SwaggyjenkinsOrganisation]).asInstanceOf[SwaggyjenkinsOrganisation])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * Retrieve all organisations details
   * @return GetOrganisations
   */
  def getOrganisations(): Option[GetOrganisations] = {
    // create path and map variables
    val path = "/blue/rest/organizations/".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[GetOrganisations]).asInstanceOf[GetOrganisations])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * Retrieve branch details for an organisation pipeline
   * @param organisation Name of the organisation 
   * @param pipeline Name of the pipeline 
   * @param branch Name of the branch 
   * @return IojenkinsblueoceanrestimplpipelineBranchImpl
   */
  def getPipelineBranchByOrg(organisation: String, pipeline: String, branch: String): Option[IojenkinsblueoceanrestimplpipelineBranchImpl] = {
    // create path and map variables
    val path = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches/{branch}/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "organisation" + "\\}",apiInvoker.escape(organisation)).replaceAll("\\{" + "pipeline" + "\\}",apiInvoker.escape(pipeline)).replaceAll("\\{" + "branch" + "\\}",apiInvoker.escape(branch))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (organisation == null) throw new Exception("Missing required parameter 'organisation' when calling BlueOceanApi->getPipelineBranchByOrg")

    if (pipeline == null) throw new Exception("Missing required parameter 'pipeline' when calling BlueOceanApi->getPipelineBranchByOrg")

    if (branch == null) throw new Exception("Missing required parameter 'branch' when calling BlueOceanApi->getPipelineBranchByOrg")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IojenkinsblueoceanrestimplpipelineBranchImpl]).asInstanceOf[IojenkinsblueoceanrestimplpipelineBranchImpl])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * Retrieve all branches details for an organisation pipeline
   * @param organisation Name of the organisation 
   * @param pipeline Name of the pipeline 
   * @return GetMultibranchPipeline
   */
  def getPipelineBranchesByOrg(organisation: String, pipeline: String): Option[GetMultibranchPipeline] = {
    // create path and map variables
    val path = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "organisation" + "\\}",apiInvoker.escape(organisation)).replaceAll("\\{" + "pipeline" + "\\}",apiInvoker.escape(pipeline))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (organisation == null) throw new Exception("Missing required parameter 'organisation' when calling BlueOceanApi->getPipelineBranchesByOrg")

    if (pipeline == null) throw new Exception("Missing required parameter 'pipeline' when calling BlueOceanApi->getPipelineBranchesByOrg")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[GetMultibranchPipeline]).asInstanceOf[GetMultibranchPipeline])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * Retrieve pipeline details for an organisation
   * @param organisation Name of the organisation 
   * @param pipeline Name of the pipeline 
   * @return SwaggyjenkinsPipeline
   */
  def getPipelineByOrg(organisation: String, pipeline: String): Option[SwaggyjenkinsPipeline] = {
    // create path and map variables
    val path = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "organisation" + "\\}",apiInvoker.escape(organisation)).replaceAll("\\{" + "pipeline" + "\\}",apiInvoker.escape(pipeline))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (organisation == null) throw new Exception("Missing required parameter 'organisation' when calling BlueOceanApi->getPipelineByOrg")

    if (pipeline == null) throw new Exception("Missing required parameter 'pipeline' when calling BlueOceanApi->getPipelineByOrg")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[SwaggyjenkinsPipeline]).asInstanceOf[SwaggyjenkinsPipeline])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * Retrieve pipeline folder for an organisation
   * @param organisation Name of the organisation 
   * @param folder Name of the folder 
   * @return IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl
   */
  def getPipelineFolderByOrg(organisation: String, folder: String): Option[IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl] = {
    // create path and map variables
    val path = "/blue/rest/organizations/{organisation}/pipelines/{folder}/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "organisation" + "\\}",apiInvoker.escape(organisation)).replaceAll("\\{" + "folder" + "\\}",apiInvoker.escape(folder))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (organisation == null) throw new Exception("Missing required parameter 'organisation' when calling BlueOceanApi->getPipelineFolderByOrg")

    if (folder == null) throw new Exception("Missing required parameter 'folder' when calling BlueOceanApi->getPipelineFolderByOrg")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl]).asInstanceOf[IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * Retrieve pipeline details for an organisation folder
   * @param organisation Name of the organisation 
   * @param pipeline Name of the pipeline 
   * @param folder Name of the folder 
   * @return IojenkinsblueoceanserviceembeddedrestPipelineImpl
   */
  def getPipelineFolderByOrg_0(organisation: String, pipeline: String, folder: String): Option[IojenkinsblueoceanserviceembeddedrestPipelineImpl] = {
    // create path and map variables
    val path = "/blue/rest/organizations/{organisation}/pipelines/{folder}/pipelines/{pipeline}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "organisation" + "\\}",apiInvoker.escape(organisation)).replaceAll("\\{" + "pipeline" + "\\}",apiInvoker.escape(pipeline)).replaceAll("\\{" + "folder" + "\\}",apiInvoker.escape(folder))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (organisation == null) throw new Exception("Missing required parameter 'organisation' when calling BlueOceanApi->getPipelineFolderByOrg_0")

    if (pipeline == null) throw new Exception("Missing required parameter 'pipeline' when calling BlueOceanApi->getPipelineFolderByOrg_0")

    if (folder == null) throw new Exception("Missing required parameter 'folder' when calling BlueOceanApi->getPipelineFolderByOrg_0")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[IojenkinsblueoceanserviceembeddedrestPipelineImpl]).asInstanceOf[IojenkinsblueoceanserviceembeddedrestPipelineImpl])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * Retrieve all pipelines details for an organisation
   * @param organisation Name of the organisation 
   * @return GetPipelines
   */
  def getPipelinesByOrg(organisation: String): Option[GetPipelines] = {
    // create path and map variables
    val path = "/blue/rest/organizations/{organisation}/pipelines/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "organisation" + "\\}",apiInvoker.escape(organisation))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (organisation == null) throw new Exception("Missing required parameter 'organisation' when calling BlueOceanApi->getPipelinesByOrg")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[GetPipelines]).asInstanceOf[GetPipelines])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * Retrieve user details for an organisation
   * @param organisation Name of the organisation 
   * @param user Name of the user 
   * @return SwaggyjenkinsUser
   */
  def getUser(organisation: String, user: String): Option[SwaggyjenkinsUser] = {
    // create path and map variables
    val path = "/blue/rest/organizations/{organisation}/users/{user}".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "organisation" + "\\}",apiInvoker.escape(organisation)).replaceAll("\\{" + "user" + "\\}",apiInvoker.escape(user))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (organisation == null) throw new Exception("Missing required parameter 'organisation' when calling BlueOceanApi->getUser")

    if (user == null) throw new Exception("Missing required parameter 'user' when calling BlueOceanApi->getUser")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[SwaggyjenkinsUser]).asInstanceOf[SwaggyjenkinsUser])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * Retrieve users details for an organisation
   * @param organisation Name of the organisation 
   * @return SwaggyjenkinsUser
   */
  def getUsers(organisation: String): Option[SwaggyjenkinsUser] = {
    // create path and map variables
    val path = "/blue/rest/organizations/{organisation}/users/".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "organisation" + "\\}",apiInvoker.escape(organisation))

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (organisation == null) throw new Exception("Missing required parameter 'organisation' when calling BlueOceanApi->getUsers")

    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[SwaggyjenkinsUser]).asInstanceOf[SwaggyjenkinsUser])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * Get classes details
   * @param q Query string containing an array of class names 
   * @return String
   */
  def search(q: String): Option[String] = {
    // create path and map variables
    val path = "/blue/rest/classes/".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (q == null) throw new Exception("Missing required parameter 'q' when calling BlueOceanApi->search")

    queryParams += "q" -> q.toString
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[String]).asInstanceOf[String])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

  /**
   * 
   * Search for any resource details
   * @param q Query string 
   * @return String
   */
  def search_0(q: String): Option[String] = {
    // create path and map variables
    val path = "/blue/rest/search/".replaceAll("\\{format\\}", "json")

    val contentTypes = List("application/json")
    val contentType = contentTypes(0)

    val queryParams = new HashMap[String, String]
    val headerParams = new HashMap[String, String]
    val formParams = new HashMap[String, String]

    if (q == null) throw new Exception("Missing required parameter 'q' when calling BlueOceanApi->search_0")

    queryParams += "q" -> q.toString
    

    var postBody: AnyRef = null

    if (contentType.startsWith("multipart/form-data")) {
      val mp = new FormDataMultiPart
      postBody = mp
    } else {
    }

    try {
      apiInvoker.invokeApi(basePath, path, "GET", queryParams.toMap, formParams.toMap, postBody, headerParams.toMap, contentType) match {
        case s: String =>
           Some(apiInvoker.deserialize(s, "", classOf[String]).asInstanceOf[String])
        case _ => None
      }
    } catch {
      case ex: ApiException if ex.code == 404 => None
      case ex: ApiException => throw ex
    }
  }

}
