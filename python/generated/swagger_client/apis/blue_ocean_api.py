# coding: utf-8

"""
    Swaggy Jenkins

    Jenkins API clients generated from Swagger / Open API specification

    OpenAPI spec version: 0.1.0
    Contact: blah@cliffano.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class BlueOceanApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def get_authenticated_user(self, organisation, **kwargs):
        """
        Retrieve authenticated user details for an organisation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_authenticated_user(organisation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :return: SwaggyjenkinsUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_authenticated_user_with_http_info(organisation, **kwargs)
        else:
            (data) = self.get_authenticated_user_with_http_info(organisation, **kwargs)
            return data

    def get_authenticated_user_with_http_info(self, organisation, **kwargs):
        """
        Retrieve authenticated user details for an organisation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_authenticated_user_with_http_info(organisation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :return: SwaggyjenkinsUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_authenticated_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organisation' is set
        if ('organisation' not in params) or (params['organisation'] is None):
            raise ValueError("Missing the required parameter `organisation` when calling `get_authenticated_user`")


        collection_formats = {}

        path_params = {}
        if 'organisation' in params:
            path_params['organisation'] = params['organisation']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/blue/rest/organizations/{organisation}/user/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SwaggyjenkinsUser',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_classes(self, _class, **kwargs):
        """
        Get a list of class names supported by a given class
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_classes(_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Name of the class (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_classes_with_http_info(_class, **kwargs)
        else:
            (data) = self.get_classes_with_http_info(_class, **kwargs)
            return data

    def get_classes_with_http_info(self, _class, **kwargs):
        """
        Get a list of class names supported by a given class
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_classes_with_http_info(_class, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str _class: Name of the class (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_class']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_classes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter '_class' is set
        if ('_class' not in params) or (params['_class'] is None):
            raise ValueError("Missing the required parameter `_class` when calling `get_classes`")


        collection_formats = {}

        path_params = {}
        if '_class' in params:
            path_params['class'] = params['_class']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/blue/rest/classes/{class}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_organisation(self, organisation, **kwargs):
        """
        Retrieve organisation details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_organisation(organisation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :return: SwaggyjenkinsOrganisation
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_organisation_with_http_info(organisation, **kwargs)
        else:
            (data) = self.get_organisation_with_http_info(organisation, **kwargs)
            return data

    def get_organisation_with_http_info(self, organisation, **kwargs):
        """
        Retrieve organisation details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_organisation_with_http_info(organisation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :return: SwaggyjenkinsOrganisation
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organisation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organisation' is set
        if ('organisation' not in params) or (params['organisation'] is None):
            raise ValueError("Missing the required parameter `organisation` when calling `get_organisation`")


        collection_formats = {}

        path_params = {}
        if 'organisation' in params:
            path_params['organisation'] = params['organisation']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/blue/rest/organizations/{organisation}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SwaggyjenkinsOrganisation',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_organisations(self, **kwargs):
        """
        Retrieve all organisations details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_organisations(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: GetOrganisations
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_organisations_with_http_info(**kwargs)
        else:
            (data) = self.get_organisations_with_http_info(**kwargs)
            return data

    def get_organisations_with_http_info(self, **kwargs):
        """
        Retrieve all organisations details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_organisations_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: GetOrganisations
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_organisations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/blue/rest/organizations/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetOrganisations',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_pipeline_branch_by_org(self, organisation, pipeline, branch, **kwargs):
        """
        Retrieve branch details for an organisation pipeline
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pipeline_branch_by_org(organisation, pipeline, branch, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :param str pipeline: Name of the pipeline (required)
        :param str branch: Name of the branch (required)
        :return: IojenkinsblueoceanrestimplpipelineBranchImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_pipeline_branch_by_org_with_http_info(organisation, pipeline, branch, **kwargs)
        else:
            (data) = self.get_pipeline_branch_by_org_with_http_info(organisation, pipeline, branch, **kwargs)
            return data

    def get_pipeline_branch_by_org_with_http_info(self, organisation, pipeline, branch, **kwargs):
        """
        Retrieve branch details for an organisation pipeline
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pipeline_branch_by_org_with_http_info(organisation, pipeline, branch, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :param str pipeline: Name of the pipeline (required)
        :param str branch: Name of the branch (required)
        :return: IojenkinsblueoceanrestimplpipelineBranchImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation', 'pipeline', 'branch']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_branch_by_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organisation' is set
        if ('organisation' not in params) or (params['organisation'] is None):
            raise ValueError("Missing the required parameter `organisation` when calling `get_pipeline_branch_by_org`")
        # verify the required parameter 'pipeline' is set
        if ('pipeline' not in params) or (params['pipeline'] is None):
            raise ValueError("Missing the required parameter `pipeline` when calling `get_pipeline_branch_by_org`")
        # verify the required parameter 'branch' is set
        if ('branch' not in params) or (params['branch'] is None):
            raise ValueError("Missing the required parameter `branch` when calling `get_pipeline_branch_by_org`")


        collection_formats = {}

        path_params = {}
        if 'organisation' in params:
            path_params['organisation'] = params['organisation']
        if 'pipeline' in params:
            path_params['pipeline'] = params['pipeline']
        if 'branch' in params:
            path_params['branch'] = params['branch']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches/{branch}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='IojenkinsblueoceanrestimplpipelineBranchImpl',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_pipeline_branches_by_org(self, organisation, pipeline, **kwargs):
        """
        Retrieve all branches details for an organisation pipeline
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pipeline_branches_by_org(organisation, pipeline, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :param str pipeline: Name of the pipeline (required)
        :return: GetMultibranchPipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_pipeline_branches_by_org_with_http_info(organisation, pipeline, **kwargs)
        else:
            (data) = self.get_pipeline_branches_by_org_with_http_info(organisation, pipeline, **kwargs)
            return data

    def get_pipeline_branches_by_org_with_http_info(self, organisation, pipeline, **kwargs):
        """
        Retrieve all branches details for an organisation pipeline
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pipeline_branches_by_org_with_http_info(organisation, pipeline, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :param str pipeline: Name of the pipeline (required)
        :return: GetMultibranchPipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation', 'pipeline']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_branches_by_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organisation' is set
        if ('organisation' not in params) or (params['organisation'] is None):
            raise ValueError("Missing the required parameter `organisation` when calling `get_pipeline_branches_by_org`")
        # verify the required parameter 'pipeline' is set
        if ('pipeline' not in params) or (params['pipeline'] is None):
            raise ValueError("Missing the required parameter `pipeline` when calling `get_pipeline_branches_by_org`")


        collection_formats = {}

        path_params = {}
        if 'organisation' in params:
            path_params['organisation'] = params['organisation']
        if 'pipeline' in params:
            path_params['pipeline'] = params['pipeline']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetMultibranchPipeline',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_pipeline_by_org(self, organisation, pipeline, **kwargs):
        """
        Retrieve pipeline details for an organisation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pipeline_by_org(organisation, pipeline, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :param str pipeline: Name of the pipeline (required)
        :return: SwaggyjenkinsPipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_pipeline_by_org_with_http_info(organisation, pipeline, **kwargs)
        else:
            (data) = self.get_pipeline_by_org_with_http_info(organisation, pipeline, **kwargs)
            return data

    def get_pipeline_by_org_with_http_info(self, organisation, pipeline, **kwargs):
        """
        Retrieve pipeline details for an organisation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pipeline_by_org_with_http_info(organisation, pipeline, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :param str pipeline: Name of the pipeline (required)
        :return: SwaggyjenkinsPipeline
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation', 'pipeline']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_by_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organisation' is set
        if ('organisation' not in params) or (params['organisation'] is None):
            raise ValueError("Missing the required parameter `organisation` when calling `get_pipeline_by_org`")
        # verify the required parameter 'pipeline' is set
        if ('pipeline' not in params) or (params['pipeline'] is None):
            raise ValueError("Missing the required parameter `pipeline` when calling `get_pipeline_by_org`")


        collection_formats = {}

        path_params = {}
        if 'organisation' in params:
            path_params['organisation'] = params['organisation']
        if 'pipeline' in params:
            path_params['pipeline'] = params['pipeline']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/blue/rest/organizations/{organisation}/pipelines/{pipeline}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SwaggyjenkinsPipeline',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_pipeline_folder_by_org(self, organisation, folder, **kwargs):
        """
        Retrieve pipeline folder for an organisation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pipeline_folder_by_org(organisation, folder, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :param str folder: Name of the folder (required)
        :return: IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_pipeline_folder_by_org_with_http_info(organisation, folder, **kwargs)
        else:
            (data) = self.get_pipeline_folder_by_org_with_http_info(organisation, folder, **kwargs)
            return data

    def get_pipeline_folder_by_org_with_http_info(self, organisation, folder, **kwargs):
        """
        Retrieve pipeline folder for an organisation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pipeline_folder_by_org_with_http_info(organisation, folder, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :param str folder: Name of the folder (required)
        :return: IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation', 'folder']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_folder_by_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organisation' is set
        if ('organisation' not in params) or (params['organisation'] is None):
            raise ValueError("Missing the required parameter `organisation` when calling `get_pipeline_folder_by_org`")
        # verify the required parameter 'folder' is set
        if ('folder' not in params) or (params['folder'] is None):
            raise ValueError("Missing the required parameter `folder` when calling `get_pipeline_folder_by_org`")


        collection_formats = {}

        path_params = {}
        if 'organisation' in params:
            path_params['organisation'] = params['organisation']
        if 'folder' in params:
            path_params['folder'] = params['folder']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/blue/rest/organizations/{organisation}/pipelines/{folder}/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_pipeline_folder_by_org_0(self, organisation, pipeline, folder, **kwargs):
        """
        Retrieve pipeline details for an organisation folder
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pipeline_folder_by_org_0(organisation, pipeline, folder, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :param str pipeline: Name of the pipeline (required)
        :param str folder: Name of the folder (required)
        :return: IojenkinsblueoceanserviceembeddedrestPipelineImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_pipeline_folder_by_org_0_with_http_info(organisation, pipeline, folder, **kwargs)
        else:
            (data) = self.get_pipeline_folder_by_org_0_with_http_info(organisation, pipeline, folder, **kwargs)
            return data

    def get_pipeline_folder_by_org_0_with_http_info(self, organisation, pipeline, folder, **kwargs):
        """
        Retrieve pipeline details for an organisation folder
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pipeline_folder_by_org_0_with_http_info(organisation, pipeline, folder, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :param str pipeline: Name of the pipeline (required)
        :param str folder: Name of the folder (required)
        :return: IojenkinsblueoceanserviceembeddedrestPipelineImpl
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation', 'pipeline', 'folder']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipeline_folder_by_org_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organisation' is set
        if ('organisation' not in params) or (params['organisation'] is None):
            raise ValueError("Missing the required parameter `organisation` when calling `get_pipeline_folder_by_org_0`")
        # verify the required parameter 'pipeline' is set
        if ('pipeline' not in params) or (params['pipeline'] is None):
            raise ValueError("Missing the required parameter `pipeline` when calling `get_pipeline_folder_by_org_0`")
        # verify the required parameter 'folder' is set
        if ('folder' not in params) or (params['folder'] is None):
            raise ValueError("Missing the required parameter `folder` when calling `get_pipeline_folder_by_org_0`")


        collection_formats = {}

        path_params = {}
        if 'organisation' in params:
            path_params['organisation'] = params['organisation']
        if 'pipeline' in params:
            path_params['pipeline'] = params['pipeline']
        if 'folder' in params:
            path_params['folder'] = params['folder']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/blue/rest/organizations/{organisation}/pipelines/{folder}/pipelines/{pipeline}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='IojenkinsblueoceanserviceembeddedrestPipelineImpl',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_pipelines_by_org(self, organisation, **kwargs):
        """
        Retrieve all pipelines details for an organisation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pipelines_by_org(organisation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :return: GetPipelines
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_pipelines_by_org_with_http_info(organisation, **kwargs)
        else:
            (data) = self.get_pipelines_by_org_with_http_info(organisation, **kwargs)
            return data

    def get_pipelines_by_org_with_http_info(self, organisation, **kwargs):
        """
        Retrieve all pipelines details for an organisation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_pipelines_by_org_with_http_info(organisation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :return: GetPipelines
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_pipelines_by_org" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organisation' is set
        if ('organisation' not in params) or (params['organisation'] is None):
            raise ValueError("Missing the required parameter `organisation` when calling `get_pipelines_by_org`")


        collection_formats = {}

        path_params = {}
        if 'organisation' in params:
            path_params['organisation'] = params['organisation']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/blue/rest/organizations/{organisation}/pipelines/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='GetPipelines',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_user(self, organisation, user, **kwargs):
        """
        Retrieve user details for an organisation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user(organisation, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :param str user: Name of the user (required)
        :return: SwaggyjenkinsUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_user_with_http_info(organisation, user, **kwargs)
        else:
            (data) = self.get_user_with_http_info(organisation, user, **kwargs)
            return data

    def get_user_with_http_info(self, organisation, user, **kwargs):
        """
        Retrieve user details for an organisation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_user_with_http_info(organisation, user, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :param str user: Name of the user (required)
        :return: SwaggyjenkinsUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation', 'user']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organisation' is set
        if ('organisation' not in params) or (params['organisation'] is None):
            raise ValueError("Missing the required parameter `organisation` when calling `get_user`")
        # verify the required parameter 'user' is set
        if ('user' not in params) or (params['user'] is None):
            raise ValueError("Missing the required parameter `user` when calling `get_user`")


        collection_formats = {}

        path_params = {}
        if 'organisation' in params:
            path_params['organisation'] = params['organisation']
        if 'user' in params:
            path_params['user'] = params['user']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/blue/rest/organizations/{organisation}/users/{user}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SwaggyjenkinsUser',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_users(self, organisation, **kwargs):
        """
        Retrieve users details for an organisation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_users(organisation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :return: SwaggyjenkinsUser
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_users_with_http_info(organisation, **kwargs)
        else:
            (data) = self.get_users_with_http_info(organisation, **kwargs)
            return data

    def get_users_with_http_info(self, organisation, **kwargs):
        """
        Retrieve users details for an organisation
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_users_with_http_info(organisation, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str organisation: Name of the organisation (required)
        :return: SwaggyjenkinsUser
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['organisation']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'organisation' is set
        if ('organisation' not in params) or (params['organisation'] is None):
            raise ValueError("Missing the required parameter `organisation` when calling `get_users`")


        collection_formats = {}

        path_params = {}
        if 'organisation' in params:
            path_params['organisation'] = params['organisation']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/blue/rest/organizations/{organisation}/users/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='SwaggyjenkinsUser',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search(self, q, **kwargs):
        """
        Get classes details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search(q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: Query string containing an array of class names (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_with_http_info(q, **kwargs)
        else:
            (data) = self.search_with_http_info(q, **kwargs)
            return data

    def search_with_http_info(self, q, **kwargs):
        """
        Get classes details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_with_http_info(q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: Query string containing an array of class names (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'q' is set
        if ('q' not in params) or (params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `search`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/blue/rest/classes/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def search_0(self, q, **kwargs):
        """
        Search for any resource details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_0(q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: Query string (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.search_0_with_http_info(q, **kwargs)
        else:
            (data) = self.search_0_with_http_info(q, **kwargs)
            return data

    def search_0_with_http_info(self, q, **kwargs):
        """
        Search for any resource details
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.search_0_with_http_info(q, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str q: Query string (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'q' is set
        if ('q' not in params) or (params['q'] is None):
            raise ValueError("Missing the required parameter `q` when calling `search_0`")


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/blue/rest/search/', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
