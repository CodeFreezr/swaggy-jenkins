/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class HudsonmodelQueueBlockedItem :  IEquatable<HudsonmodelQueueBlockedItem>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="HudsonmodelQueueBlockedItem" /> class.
        /// </summary>
        /// <param name="Class">Class.</param>
        /// <param name="Actions">Actions.</param>
        /// <param name="Blocked">Blocked.</param>
        /// <param name="Buildable">Buildable.</param>
        /// <param name="Id">Id.</param>
        /// <param name="InQueueSince">InQueueSince.</param>
        /// <param name="Params">Params.</param>
        /// <param name="Stuck">Stuck.</param>
        /// <param name="Task">Task.</param>
        /// <param name="Url">Url.</param>
        /// <param name="Why">Why.</param>
        /// <param name="BuildableStartMilliseconds">BuildableStartMilliseconds.</param>
        public HudsonmodelQueueBlockedItem(string Class = default(string), List<HudsonmodelCauseAction> Actions = default(List<HudsonmodelCauseAction>), bool? Blocked = default(bool?), bool? Buildable = default(bool?), int? Id = default(int?), int? InQueueSince = default(int?), string Params = default(string), bool? Stuck = default(bool?), HudsonmodelFreeStyleProject Task = default(HudsonmodelFreeStyleProject), string Url = default(string), string Why = default(string), int? BuildableStartMilliseconds = default(int?))
        {
            this.Class = Class;
            this.Actions = Actions;
            this.Blocked = Blocked;
            this.Buildable = Buildable;
            this.Id = Id;
            this.InQueueSince = InQueueSince;
            this.Params = Params;
            this.Stuck = Stuck;
            this.Task = Task;
            this.Url = Url;
            this.Why = Why;
            this.BuildableStartMilliseconds = BuildableStartMilliseconds;
            
        }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [DataMember(Name="_class")]
        public string Class { get; set; }
        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name="actions")]
        public List<HudsonmodelCauseAction> Actions { get; set; }
        /// <summary>
        /// Gets or Sets Blocked
        /// </summary>
        [DataMember(Name="blocked")]
        public bool? Blocked { get; set; }
        /// <summary>
        /// Gets or Sets Buildable
        /// </summary>
        [DataMember(Name="buildable")]
        public bool? Buildable { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id")]
        public int? Id { get; set; }
        /// <summary>
        /// Gets or Sets InQueueSince
        /// </summary>
        [DataMember(Name="inQueueSince")]
        public int? InQueueSince { get; set; }
        /// <summary>
        /// Gets or Sets Params
        /// </summary>
        [DataMember(Name="params")]
        public string Params { get; set; }
        /// <summary>
        /// Gets or Sets Stuck
        /// </summary>
        [DataMember(Name="stuck")]
        public bool? Stuck { get; set; }
        /// <summary>
        /// Gets or Sets Task
        /// </summary>
        [DataMember(Name="task")]
        public HudsonmodelFreeStyleProject Task { get; set; }
        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url")]
        public string Url { get; set; }
        /// <summary>
        /// Gets or Sets Why
        /// </summary>
        [DataMember(Name="why")]
        public string Why { get; set; }
        /// <summary>
        /// Gets or Sets BuildableStartMilliseconds
        /// </summary>
        [DataMember(Name="buildableStartMilliseconds")]
        public int? BuildableStartMilliseconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HudsonmodelQueueBlockedItem {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  Buildable: ").Append(Buildable).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InQueueSince: ").Append(InQueueSince).Append("\n");
            sb.Append("  Params: ").Append(Params).Append("\n");
            sb.Append("  Stuck: ").Append(Stuck).Append("\n");
            sb.Append("  Task: ").Append(Task).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Why: ").Append(Why).Append("\n");
            sb.Append("  BuildableStartMilliseconds: ").Append(BuildableStartMilliseconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((HudsonmodelQueueBlockedItem)obj);
        }

        /// <summary>
        /// Returns true if HudsonmodelQueueBlockedItem instances are equal
        /// </summary>
        /// <param name="other">Instance of HudsonmodelQueueBlockedItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HudsonmodelQueueBlockedItem other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Class == other.Class ||
                    this.Class != null &&
                    this.Class.Equals(other.Class)
                ) && 
                (
                    this.Actions == other.Actions ||
                    this.Actions != null &&
                    this.Actions.SequenceEqual(other.Actions)
                ) && 
                (
                    this.Blocked == other.Blocked ||
                    this.Blocked != null &&
                    this.Blocked.Equals(other.Blocked)
                ) && 
                (
                    this.Buildable == other.Buildable ||
                    this.Buildable != null &&
                    this.Buildable.Equals(other.Buildable)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.InQueueSince == other.InQueueSince ||
                    this.InQueueSince != null &&
                    this.InQueueSince.Equals(other.InQueueSince)
                ) && 
                (
                    this.Params == other.Params ||
                    this.Params != null &&
                    this.Params.Equals(other.Params)
                ) && 
                (
                    this.Stuck == other.Stuck ||
                    this.Stuck != null &&
                    this.Stuck.Equals(other.Stuck)
                ) && 
                (
                    this.Task == other.Task ||
                    this.Task != null &&
                    this.Task.Equals(other.Task)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.Why == other.Why ||
                    this.Why != null &&
                    this.Why.Equals(other.Why)
                ) && 
                (
                    this.BuildableStartMilliseconds == other.BuildableStartMilliseconds ||
                    this.BuildableStartMilliseconds != null &&
                    this.BuildableStartMilliseconds.Equals(other.BuildableStartMilliseconds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Class != null)
                    hash = hash * 59 + this.Class.GetHashCode();
                    if (this.Actions != null)
                    hash = hash * 59 + this.Actions.GetHashCode();
                    if (this.Blocked != null)
                    hash = hash * 59 + this.Blocked.GetHashCode();
                    if (this.Buildable != null)
                    hash = hash * 59 + this.Buildable.GetHashCode();
                    if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                    if (this.InQueueSince != null)
                    hash = hash * 59 + this.InQueueSince.GetHashCode();
                    if (this.Params != null)
                    hash = hash * 59 + this.Params.GetHashCode();
                    if (this.Stuck != null)
                    hash = hash * 59 + this.Stuck.GetHashCode();
                    if (this.Task != null)
                    hash = hash * 59 + this.Task.GetHashCode();
                    if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                    if (this.Why != null)
                    hash = hash * 59 + this.Why.GetHashCode();
                    if (this.BuildableStartMilliseconds != null)
                    hash = hash * 59 + this.BuildableStartMilliseconds.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(HudsonmodelQueueBlockedItem left, HudsonmodelQueueBlockedItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HudsonmodelQueueBlockedItem left, HudsonmodelQueueBlockedItem right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
