/**
 * Swaggy Jenkins
 * Jenkins remote access API
 *
 * OpenAPI spec version: 0.0.1
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/HudsonmodelComputerSet', 'model/HudsonmodelFreeStyleBuild', 'model/HudsonmodelFreeStyleProject', 'model/HudsonmodelHudson', 'model/HudsonmodelQueue', 'model/HudsonsecuritycsrfDefaultCrumbIssuer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/HudsonmodelComputerSet'), require('../model/HudsonmodelFreeStyleBuild'), require('../model/HudsonmodelFreeStyleProject'), require('../model/HudsonmodelHudson'), require('../model/HudsonmodelQueue'), require('../model/HudsonsecuritycsrfDefaultCrumbIssuer'));
  } else {
    // Browser globals (root is window)
    if (!root.SwaggyJenkins) {
      root.SwaggyJenkins = {};
    }
    root.SwaggyJenkins.RemoteAccessApi = factory(root.SwaggyJenkins.ApiClient, root.SwaggyJenkins.HudsonmodelComputerSet, root.SwaggyJenkins.HudsonmodelFreeStyleBuild, root.SwaggyJenkins.HudsonmodelFreeStyleProject, root.SwaggyJenkins.HudsonmodelHudson, root.SwaggyJenkins.HudsonmodelQueue, root.SwaggyJenkins.HudsonsecuritycsrfDefaultCrumbIssuer);
  }
}(this, function(ApiClient, HudsonmodelComputerSet, HudsonmodelFreeStyleBuild, HudsonmodelFreeStyleProject, HudsonmodelHudson, HudsonmodelQueue, HudsonsecuritycsrfDefaultCrumbIssuer) {
  'use strict';

  /**
   * RemoteAccess service.
   * @module api/RemoteAccessApi
   * @version 0.0.1
   */

  /**
   * Constructs a new RemoteAccessApi. 
   * @alias module:api/RemoteAccessApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getComputer operation.
     * @callback module:api/RemoteAccessApi~getComputerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HudsonmodelComputerSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get computer
     * @param {module:api/RemoteAccessApi~getComputerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HudsonmodelComputerSet}
     */
    this.getComputer = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = HudsonmodelComputerSet;

      return this.apiClient.callApi(
        '/computer/api/json?depth=1', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCrumb operation.
     * @callback module:api/RemoteAccessApi~getCrumbCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HudsonsecuritycsrfDefaultCrumbIssuer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get crumb
     * @param {module:api/RemoteAccessApi~getCrumbCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HudsonsecuritycsrfDefaultCrumbIssuer}
     */
    this.getCrumb = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = HudsonsecuritycsrfDefaultCrumbIssuer;

      return this.apiClient.callApi(
        '/crumbIssuer/api/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getInfo operation.
     * @callback module:api/RemoteAccessApi~getInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HudsonmodelHudson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get info
     * @param {module:api/RemoteAccessApi~getInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HudsonmodelHudson}
     */
    this.getInfo = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = HudsonmodelHudson;

      return this.apiClient.callApi(
        '/api/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJob operation.
     * @callback module:api/RemoteAccessApi~getJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HudsonmodelFreeStyleProject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get job
     * @param {String} name 
     * @param {module:api/RemoteAccessApi~getJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HudsonmodelFreeStyleProject}
     */
    this.getJob = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getJob");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = HudsonmodelFreeStyleProject;

      return this.apiClient.callApi(
        '/job/{name}/api/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobConfig operation.
     * @callback module:api/RemoteAccessApi~getJobConfigCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get job configuration
     * @param {String} name 
     * @param {module:api/RemoteAccessApi~getJobConfigCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getJobConfig = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getJobConfig");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/xml'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/job/{name}/config.xml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getJobLastBuild operation.
     * @callback module:api/RemoteAccessApi~getJobLastBuildCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HudsonmodelFreeStyleBuild} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get job last build
     * @param {String} name 
     * @param {module:api/RemoteAccessApi~getJobLastBuildCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HudsonmodelFreeStyleBuild}
     */
    this.getJobLastBuild = function(name, callback) {
      var postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getJobLastBuild");
      }


      var pathParams = {
        'name': name
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = HudsonmodelFreeStyleBuild;

      return this.apiClient.callApi(
        '/job/{name}/lastBuild/api/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getQueue operation.
     * @callback module:api/RemoteAccessApi~getQueueCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HudsonmodelQueue} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get queue
     * @param {module:api/RemoteAccessApi~getQueueCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HudsonmodelQueue}
     */
    this.getQueue = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = HudsonmodelQueue;

      return this.apiClient.callApi(
        '/queue/api/json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the headVersion operation.
     * @callback module:api/RemoteAccessApi~headVersionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve version header
     * @param {module:api/RemoteAccessApi~headVersionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.headVersion = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/', 'HEAD',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postCreateItem operation.
     * @callback module:api/RemoteAccessApi~postCreateItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post item creation
     * @param {module:api/RemoteAccessApi~postCreateItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.postCreateItem = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['text/html'];
      var returnType = null;

      return this.apiClient.callApi(
        '/createItem/api/json', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
