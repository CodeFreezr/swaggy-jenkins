/*
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

public class SwagBlueOceanApi {
    SwagClient client;

    public SwagBlueOceanApi(SwagClient client) {
        this.client = client;
    }

    public SwagBlueOceanApi() {
        this.client = new SwagClient();
    }

    public SwagClient getClient() {
        return this.client;
    }

    /**
     * 
     * Get classes details
     * @param q Query string containing an array of class names (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String callSearch(Map<String, Object> params) {
        client.assertNotNull(params.get('q'), 'q');
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('q', (String) params.get('q')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'GET', '/blue/rest/classes/', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            String.class
        );
    }
    /**
     * 
     * Search for any resource details
     * @param q Query string (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String callSearch_0(Map<String, Object> params) {
        client.assertNotNull(params.get('q'), 'q');
        List<Swagger.Param> query = new List<Swagger.Param>();

        // cast query params to verify their expected type
        query.addAll(client.makeParam('q', (String) params.get('q')));

        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'GET', '/blue/rest/search/', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            String.class
        );
    }
    /**
     * 
     * Retrieve authenticated user details for an organisation
     * @param organisation Name of the organisation (required)
     * @return SwagSwaggyjenkinsUser
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagSwaggyjenkinsUser getAuthenticatedUser(Map<String, Object> params) {
        client.assertNotNull(params.get('organisation'), 'organisation');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagSwaggyjenkinsUser) client.invoke(
            'GET', '/blue/rest/organizations/{organisation}/user/', '',
            query, form,
            new Map<String, Object>{
                'organisation' => (String) params.get('organisation')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagSwaggyjenkinsUser.class
        );
    }
    /**
     * 
     * Get a list of class names supported by a given class
     * @param propertyClass Name of the class (required)
     * @return String
     * @throws Swagger.ApiException if fails to make API call
     */
    public String getClasses(Map<String, Object> params) {
        client.assertNotNull(params.get('propertyClass'), 'propertyClass');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (String) client.invoke(
            'GET', '/blue/rest/classes/{class}', '',
            query, form,
            new Map<String, Object>{
                'class' => (String) params.get('propertyClass')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            String.class
        );
    }
    /**
     * 
     * Retrieve organisation details
     * @param organisation Name of the organisation (required)
     * @return SwagSwaggyjenkinsOrganisation
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagSwaggyjenkinsOrganisation getOrganisation(Map<String, Object> params) {
        client.assertNotNull(params.get('organisation'), 'organisation');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagSwaggyjenkinsOrganisation) client.invoke(
            'GET', '/blue/rest/organizations/{organisation}', '',
            query, form,
            new Map<String, Object>{
                'organisation' => (String) params.get('organisation')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagSwaggyjenkinsOrganisation.class
        );
    }
    /**
     * 
     * Retrieve all organisations details
     * @return SwagGetOrganisations
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetOrganisations getOrganisations() {
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetOrganisations) client.invoke(
            'GET', '/blue/rest/organizations/', '',
            query, form,
            new Map<String, Object>(),
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagGetOrganisations.class
        );
    }
    /**
     * 
     * Retrieve branch details for an organisation pipeline
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @param branch Name of the branch (required)
     * @return SwagIojenkinsblueoceanrestimplpipeli
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagIojenkinsblueoceanrestimplpipeli getPipelineBranchByOrg(Map<String, Object> params) {
        client.assertNotNull(params.get('organisation'), 'organisation');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        client.assertNotNull(params.get('branch'), 'branch');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagIojenkinsblueoceanrestimplpipeli) client.invoke(
            'GET', '/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches/{branch}/', '',
            query, form,
            new Map<String, Object>{
                'organisation' => (String) params.get('organisation'),
                'pipeline' => (String) params.get('pipeline'),
                'branch' => (String) params.get('branch')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagIojenkinsblueoceanrestimplpipeli.class
        );
    }
    /**
     * 
     * Retrieve all branches details for an organisation pipeline
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @return SwagGetMultibranchPipeline
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetMultibranchPipeline getPipelineBranchesByOrg(Map<String, Object> params) {
        client.assertNotNull(params.get('organisation'), 'organisation');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetMultibranchPipeline) client.invoke(
            'GET', '/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches', '',
            query, form,
            new Map<String, Object>{
                'organisation' => (String) params.get('organisation'),
                'pipeline' => (String) params.get('pipeline')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagGetMultibranchPipeline.class
        );
    }
    /**
     * 
     * Retrieve pipeline details for an organisation
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @return SwagSwaggyjenkinsPipeline
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagSwaggyjenkinsPipeline getPipelineByOrg(Map<String, Object> params) {
        client.assertNotNull(params.get('organisation'), 'organisation');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagSwaggyjenkinsPipeline) client.invoke(
            'GET', '/blue/rest/organizations/{organisation}/pipelines/{pipeline}', '',
            query, form,
            new Map<String, Object>{
                'organisation' => (String) params.get('organisation'),
                'pipeline' => (String) params.get('pipeline')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagSwaggyjenkinsPipeline.class
        );
    }
    /**
     * 
     * Retrieve pipeline folder for an organisation
     * @param organisation Name of the organisation (required)
     * @param folder Name of the folder (required)
     * @return SwagIojenkinsblueoceanserviceembedde
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagIojenkinsblueoceanserviceembedde getPipelineFolderByOrg(Map<String, Object> params) {
        client.assertNotNull(params.get('organisation'), 'organisation');
        client.assertNotNull(params.get('folder'), 'folder');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagIojenkinsblueoceanserviceembedde) client.invoke(
            'GET', '/blue/rest/organizations/{organisation}/pipelines/{folder}/', '',
            query, form,
            new Map<String, Object>{
                'organisation' => (String) params.get('organisation'),
                'folder' => (String) params.get('folder')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagIojenkinsblueoceanserviceembedde.class
        );
    }
    /**
     * 
     * Retrieve pipeline details for an organisation folder
     * @param organisation Name of the organisation (required)
     * @param pipeline Name of the pipeline (required)
     * @param folder Name of the folder (required)
     * @return SwagIojenkinsblueoceanserviceembedde
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagIojenkinsblueoceanserviceembedde getPipelineFolderByOrg_0(Map<String, Object> params) {
        client.assertNotNull(params.get('organisation'), 'organisation');
        client.assertNotNull(params.get('pipeline'), 'pipeline');
        client.assertNotNull(params.get('folder'), 'folder');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagIojenkinsblueoceanserviceembedde) client.invoke(
            'GET', '/blue/rest/organizations/{organisation}/pipelines/{folder}/pipelines/{pipeline}', '',
            query, form,
            new Map<String, Object>{
                'organisation' => (String) params.get('organisation'),
                'pipeline' => (String) params.get('pipeline'),
                'folder' => (String) params.get('folder')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagIojenkinsblueoceanserviceembedde.class
        );
    }
    /**
     * 
     * Retrieve all pipelines details for an organisation
     * @param organisation Name of the organisation (required)
     * @return SwagGetPipelines
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagGetPipelines getPipelinesByOrg(Map<String, Object> params) {
        client.assertNotNull(params.get('organisation'), 'organisation');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagGetPipelines) client.invoke(
            'GET', '/blue/rest/organizations/{organisation}/pipelines/', '',
            query, form,
            new Map<String, Object>{
                'organisation' => (String) params.get('organisation')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagGetPipelines.class
        );
    }
    /**
     * 
     * Retrieve user details for an organisation
     * @param organisation Name of the organisation (required)
     * @param user Name of the user (required)
     * @return SwagSwaggyjenkinsUser
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagSwaggyjenkinsUser getUser(Map<String, Object> params) {
        client.assertNotNull(params.get('organisation'), 'organisation');
        client.assertNotNull(params.get('user'), 'user');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagSwaggyjenkinsUser) client.invoke(
            'GET', '/blue/rest/organizations/{organisation}/users/{user}', '',
            query, form,
            new Map<String, Object>{
                'organisation' => (String) params.get('organisation'),
                'user' => (String) params.get('user')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagSwaggyjenkinsUser.class
        );
    }
    /**
     * 
     * Retrieve users details for an organisation
     * @param organisation Name of the organisation (required)
     * @return SwagSwaggyjenkinsUser
     * @throws Swagger.ApiException if fails to make API call
     */
    public SwagSwaggyjenkinsUser getUsers(Map<String, Object> params) {
        client.assertNotNull(params.get('organisation'), 'organisation');
        List<Swagger.Param> query = new List<Swagger.Param>();
        List<Swagger.Param> form = new List<Swagger.Param>();

        return (SwagSwaggyjenkinsUser) client.invoke(
            'GET', '/blue/rest/organizations/{organisation}/users/', '',
            query, form,
            new Map<String, Object>{
                'organisation' => (String) params.get('organisation')
            },
            new Map<String, Object>(),
            new List<String>{ 'application/json' },
            new List<String>{ 'application/json' },
            new List<String>(),
            SwagSwaggyjenkinsUser.class
        );
    }
}
