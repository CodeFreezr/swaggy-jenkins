/**
 * @fileoverview AUTOMATICALLY GENERATED service for API.Client.BlueOceanApi.
 * Do not edit this file by hand or your changes will be lost next time it is
 * generated.
 *
 * Jenkins API clients generated from Swagger / Open API specification
 * Version: 0.1.0
 * Generated by: io.swagger.codegen.languages.JavascriptClosureAngularClientCodegen
 */
goog.provide('API.Client.BlueOceanApi');

goog.require('API.Client.getMultibranchPipeline');
goog.require('API.Client.getOrganisations');
goog.require('API.Client.getPipelines');
goog.require('API.Client.iojenkinsblueoceanrestimplpipelineBranchImpl');
goog.require('API.Client.iojenkinsblueoceanserviceembeddedrestPipelineFolderImpl');
goog.require('API.Client.iojenkinsblueoceanserviceembeddedrestPipelineImpl');
goog.require('API.Client.swaggyjenkinsOrganisation');
goog.require('API.Client.swaggyjenkinsPipeline');
goog.require('API.Client.swaggyjenkinsUser');

/**
 * @constructor
 * @param {!angular.$http} $http
 * @param {!Object} $httpParamSerializer
 * @param {!angular.$injector} $injector
 * @struct
 */
API.Client.BlueOceanApi = function($http, $httpParamSerializer, $injector) {
  /** @private {!string} */
  this.basePath_ = $injector.has('BlueOceanApiBasePath') ?
                   /** @type {!string} */ ($injector.get('BlueOceanApiBasePath')) :
                   'http://localhost';

  /** @private {!Object<string, string>} */
  this.defaultHeaders_ = $injector.has('BlueOceanApiDefaultHeaders') ?
                   /** @type {!Object<string, string>} */ (
                       $injector.get('BlueOceanApiDefaultHeaders')) :
                   {};

  /** @private {!angular.$http} */
  this.http_ = $http;

  /** @package {!Object} */
  this.httpParamSerializer = $injector.get('$httpParamSerializer');
}
API.Client.BlueOceanApi.$inject = ['$http', '$httpParamSerializer', '$injector'];

/**
 * 
 * Retrieve authenticated user details for an organisation
 * @param {!string} organisation Name of the organisation
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.swaggyjenkinsUser>}
 */
API.Client.BlueOceanApi.prototype.getAuthenticatedUser = function(organisation, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organisation}/user/'
      .replace('{' + 'organisation' + '}', String(organisation));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organisation' is set
  if (!organisation) {
    throw new Error('Missing required parameter organisation when calling getAuthenticatedUser');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get a list of class names supported by a given class
 * @param {!string} _class Name of the class
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.BlueOceanApi.prototype.getClasses = function(_class, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/classes/{class}'
      .replace('{' + 'class' + '}', String(_class));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter '_class' is set
  if (!_class) {
    throw new Error('Missing required parameter _class when calling getClasses');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve organisation details
 * @param {!string} organisation Name of the organisation
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.swaggyjenkinsOrganisation>}
 */
API.Client.BlueOceanApi.prototype.getOrganisation = function(organisation, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organisation}'
      .replace('{' + 'organisation' + '}', String(organisation));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organisation' is set
  if (!organisation) {
    throw new Error('Missing required parameter organisation when calling getOrganisation');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve all organisations details
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.getOrganisations>}
 */
API.Client.BlueOceanApi.prototype.getOrganisations = function(opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve branch details for an organisation pipeline
 * @param {!string} organisation Name of the organisation
 * @param {!string} pipeline Name of the pipeline
 * @param {!string} branch Name of the branch
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.iojenkinsblueoceanrestimplpipelineBranchImpl>}
 */
API.Client.BlueOceanApi.prototype.getPipelineBranchByOrg = function(organisation, pipeline, branch, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches/{branch}/'
      .replace('{' + 'organisation' + '}', String(organisation))
      .replace('{' + 'pipeline' + '}', String(pipeline))
      .replace('{' + 'branch' + '}', String(branch));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organisation' is set
  if (!organisation) {
    throw new Error('Missing required parameter organisation when calling getPipelineBranchByOrg');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineBranchByOrg');
  }
  // verify required parameter 'branch' is set
  if (!branch) {
    throw new Error('Missing required parameter branch when calling getPipelineBranchByOrg');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve all branches details for an organisation pipeline
 * @param {!string} organisation Name of the organisation
 * @param {!string} pipeline Name of the pipeline
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.getMultibranchPipeline>}
 */
API.Client.BlueOceanApi.prototype.getPipelineBranchesByOrg = function(organisation, pipeline, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches'
      .replace('{' + 'organisation' + '}', String(organisation))
      .replace('{' + 'pipeline' + '}', String(pipeline));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organisation' is set
  if (!organisation) {
    throw new Error('Missing required parameter organisation when calling getPipelineBranchesByOrg');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineBranchesByOrg');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve pipeline details for an organisation
 * @param {!string} organisation Name of the organisation
 * @param {!string} pipeline Name of the pipeline
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.swaggyjenkinsPipeline>}
 */
API.Client.BlueOceanApi.prototype.getPipelineByOrg = function(organisation, pipeline, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organisation}/pipelines/{pipeline}'
      .replace('{' + 'organisation' + '}', String(organisation))
      .replace('{' + 'pipeline' + '}', String(pipeline));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organisation' is set
  if (!organisation) {
    throw new Error('Missing required parameter organisation when calling getPipelineByOrg');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineByOrg');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve pipeline folder for an organisation
 * @param {!string} organisation Name of the organisation
 * @param {!string} folder Name of the folder
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.iojenkinsblueoceanserviceembeddedrestPipelineFolderImpl>}
 */
API.Client.BlueOceanApi.prototype.getPipelineFolderByOrg = function(organisation, folder, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organisation}/pipelines/{folder}/'
      .replace('{' + 'organisation' + '}', String(organisation))
      .replace('{' + 'folder' + '}', String(folder));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organisation' is set
  if (!organisation) {
    throw new Error('Missing required parameter organisation when calling getPipelineFolderByOrg');
  }
  // verify required parameter 'folder' is set
  if (!folder) {
    throw new Error('Missing required parameter folder when calling getPipelineFolderByOrg');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve pipeline details for an organisation folder
 * @param {!string} organisation Name of the organisation
 * @param {!string} pipeline Name of the pipeline
 * @param {!string} folder Name of the folder
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.iojenkinsblueoceanserviceembeddedrestPipelineImpl>}
 */
API.Client.BlueOceanApi.prototype.getPipelineFolderByOrg_1 = function(organisation, pipeline, folder, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organisation}/pipelines/{folder}/pipelines/{pipeline}'
      .replace('{' + 'organisation' + '}', String(organisation))
      .replace('{' + 'pipeline' + '}', String(pipeline))
      .replace('{' + 'folder' + '}', String(folder));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organisation' is set
  if (!organisation) {
    throw new Error('Missing required parameter organisation when calling getPipelineFolderByOrg_1');
  }
  // verify required parameter 'pipeline' is set
  if (!pipeline) {
    throw new Error('Missing required parameter pipeline when calling getPipelineFolderByOrg_1');
  }
  // verify required parameter 'folder' is set
  if (!folder) {
    throw new Error('Missing required parameter folder when calling getPipelineFolderByOrg_1');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve all pipelines details for an organisation
 * @param {!string} organisation Name of the organisation
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.getPipelines>}
 */
API.Client.BlueOceanApi.prototype.getPipelinesByOrg = function(organisation, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organisation}/pipelines/'
      .replace('{' + 'organisation' + '}', String(organisation));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organisation' is set
  if (!organisation) {
    throw new Error('Missing required parameter organisation when calling getPipelinesByOrg');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve user details for an organisation
 * @param {!string} organisation Name of the organisation
 * @param {!string} user Name of the user
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.swaggyjenkinsUser>}
 */
API.Client.BlueOceanApi.prototype.getUser = function(organisation, user, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organisation}/users/{user}'
      .replace('{' + 'organisation' + '}', String(organisation))
      .replace('{' + 'user' + '}', String(user));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organisation' is set
  if (!organisation) {
    throw new Error('Missing required parameter organisation when calling getUser');
  }
  // verify required parameter 'user' is set
  if (!user) {
    throw new Error('Missing required parameter user when calling getUser');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Retrieve users details for an organisation
 * @param {!string} organisation Name of the organisation
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!API.Client.swaggyjenkinsUser>}
 */
API.Client.BlueOceanApi.prototype.getUsers = function(organisation, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/organizations/{organisation}/users/'
      .replace('{' + 'organisation' + '}', String(organisation));

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'organisation' is set
  if (!organisation) {
    throw new Error('Missing required parameter organisation when calling getUsers');
  }
  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Get classes details
 * @param {!string} q Query string containing an array of class names
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.BlueOceanApi.prototype.search = function(q, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/classes/';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'q' is set
  if (!q) {
    throw new Error('Missing required parameter q when calling search');
  }
  if (q !== undefined) {
    queryParameters['q'] = q;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}

/**
 * 
 * Search for any resource details
 * @param {!string} q Query string
 * @param {!angular.$http.Config=} opt_extraHttpRequestParams Extra HTTP parameters to send.
 * @return {!angular.$q.Promise<!string>}
 */
API.Client.BlueOceanApi.prototype.search_2 = function(q, opt_extraHttpRequestParams) {
  /** @const {string} */
  var path = this.basePath_ + '/blue/rest/search/';

  /** @type {!Object} */
  var queryParameters = {};

  /** @type {!Object} */
  var headerParams = angular.extend({}, this.defaultHeaders_);
  // verify required parameter 'q' is set
  if (!q) {
    throw new Error('Missing required parameter q when calling search_2');
  }
  if (q !== undefined) {
    queryParameters['q'] = q;
  }

  /** @type {!Object} */
  var httpRequestParams = {
    method: 'GET',
    url: path,
    json: true,
            params: queryParameters,
    headers: headerParams
  };

  if (opt_extraHttpRequestParams) {
    httpRequestParams = angular.extend(httpRequestParams, opt_extraHttpRequestParams);
  }

  return (/** @type {?} */ (this.http_))(httpRequestParams);
}
