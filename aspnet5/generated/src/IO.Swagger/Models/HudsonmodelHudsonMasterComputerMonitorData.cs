/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class HudsonmodelHudsonMasterComputerMonitorData :  IEquatable<HudsonmodelHudsonMasterComputerMonitorData>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="HudsonmodelHudsonMasterComputerMonitorData" /> class.
        /// </summary>
        /// <param name="HudsonNodeMonitorsSwapSpaceMonitor">HudsonNodeMonitorsSwapSpaceMonitor.</param>
        /// <param name="HudsonNodeMonitorsTemporarySpaceMonitor">HudsonNodeMonitorsTemporarySpaceMonitor.</param>
        /// <param name="HudsonNodeMonitorsDiskSpaceMonitor">HudsonNodeMonitorsDiskSpaceMonitor.</param>
        /// <param name="HudsonNodeMonitorsArchitectureMonitor">HudsonNodeMonitorsArchitectureMonitor.</param>
        /// <param name="HudsonNodeMonitorsResponseTimeMonitor">HudsonNodeMonitorsResponseTimeMonitor.</param>
        /// <param name="HudsonNodeMonitorsClockMonitor">HudsonNodeMonitorsClockMonitor.</param>
        /// <param name="Class">Class.</param>
        public HudsonmodelHudsonMasterComputerMonitorData(HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2 HudsonNodeMonitorsSwapSpaceMonitor = default(HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2), HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace HudsonNodeMonitorsTemporarySpaceMonitor = default(HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace), HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace HudsonNodeMonitorsDiskSpaceMonitor = default(HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace), string HudsonNodeMonitorsArchitectureMonitor = default(string), HudsonnodeMonitorsResponseTimeMonitorData HudsonNodeMonitorsResponseTimeMonitor = default(HudsonnodeMonitorsResponseTimeMonitorData), HudsonutilClockDifference HudsonNodeMonitorsClockMonitor = default(HudsonutilClockDifference), string Class = default(string))
        {
            this.HudsonNodeMonitorsSwapSpaceMonitor = HudsonNodeMonitorsSwapSpaceMonitor;
            this.HudsonNodeMonitorsTemporarySpaceMonitor = HudsonNodeMonitorsTemporarySpaceMonitor;
            this.HudsonNodeMonitorsDiskSpaceMonitor = HudsonNodeMonitorsDiskSpaceMonitor;
            this.HudsonNodeMonitorsArchitectureMonitor = HudsonNodeMonitorsArchitectureMonitor;
            this.HudsonNodeMonitorsResponseTimeMonitor = HudsonNodeMonitorsResponseTimeMonitor;
            this.HudsonNodeMonitorsClockMonitor = HudsonNodeMonitorsClockMonitor;
            this.Class = Class;
            
        }

        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsSwapSpaceMonitor
        /// </summary>
        [DataMember(Name="hudson.node_monitors.SwapSpaceMonitor")]
        public HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2 HudsonNodeMonitorsSwapSpaceMonitor { get; set; }
        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsTemporarySpaceMonitor
        /// </summary>
        [DataMember(Name="hudson.node_monitors.TemporarySpaceMonitor")]
        public HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace HudsonNodeMonitorsTemporarySpaceMonitor { get; set; }
        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsDiskSpaceMonitor
        /// </summary>
        [DataMember(Name="hudson.node_monitors.DiskSpaceMonitor")]
        public HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace HudsonNodeMonitorsDiskSpaceMonitor { get; set; }
        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsArchitectureMonitor
        /// </summary>
        [DataMember(Name="hudson.node_monitors.ArchitectureMonitor")]
        public string HudsonNodeMonitorsArchitectureMonitor { get; set; }
        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsResponseTimeMonitor
        /// </summary>
        [DataMember(Name="hudson.node_monitors.ResponseTimeMonitor")]
        public HudsonnodeMonitorsResponseTimeMonitorData HudsonNodeMonitorsResponseTimeMonitor { get; set; }
        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsClockMonitor
        /// </summary>
        [DataMember(Name="hudson.node_monitors.ClockMonitor")]
        public HudsonutilClockDifference HudsonNodeMonitorsClockMonitor { get; set; }
        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [DataMember(Name="_class")]
        public string Class { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HudsonmodelHudsonMasterComputerMonitorData {\n");
            sb.Append("  HudsonNodeMonitorsSwapSpaceMonitor: ").Append(HudsonNodeMonitorsSwapSpaceMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsTemporarySpaceMonitor: ").Append(HudsonNodeMonitorsTemporarySpaceMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsDiskSpaceMonitor: ").Append(HudsonNodeMonitorsDiskSpaceMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsArchitectureMonitor: ").Append(HudsonNodeMonitorsArchitectureMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsResponseTimeMonitor: ").Append(HudsonNodeMonitorsResponseTimeMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsClockMonitor: ").Append(HudsonNodeMonitorsClockMonitor).Append("\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((HudsonmodelHudsonMasterComputerMonitorData)obj);
        }

        /// <summary>
        /// Returns true if HudsonmodelHudsonMasterComputerMonitorData instances are equal
        /// </summary>
        /// <param name="other">Instance of HudsonmodelHudsonMasterComputerMonitorData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HudsonmodelHudsonMasterComputerMonitorData other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.HudsonNodeMonitorsSwapSpaceMonitor == other.HudsonNodeMonitorsSwapSpaceMonitor ||
                    this.HudsonNodeMonitorsSwapSpaceMonitor != null &&
                    this.HudsonNodeMonitorsSwapSpaceMonitor.Equals(other.HudsonNodeMonitorsSwapSpaceMonitor)
                ) && 
                (
                    this.HudsonNodeMonitorsTemporarySpaceMonitor == other.HudsonNodeMonitorsTemporarySpaceMonitor ||
                    this.HudsonNodeMonitorsTemporarySpaceMonitor != null &&
                    this.HudsonNodeMonitorsTemporarySpaceMonitor.Equals(other.HudsonNodeMonitorsTemporarySpaceMonitor)
                ) && 
                (
                    this.HudsonNodeMonitorsDiskSpaceMonitor == other.HudsonNodeMonitorsDiskSpaceMonitor ||
                    this.HudsonNodeMonitorsDiskSpaceMonitor != null &&
                    this.HudsonNodeMonitorsDiskSpaceMonitor.Equals(other.HudsonNodeMonitorsDiskSpaceMonitor)
                ) && 
                (
                    this.HudsonNodeMonitorsArchitectureMonitor == other.HudsonNodeMonitorsArchitectureMonitor ||
                    this.HudsonNodeMonitorsArchitectureMonitor != null &&
                    this.HudsonNodeMonitorsArchitectureMonitor.Equals(other.HudsonNodeMonitorsArchitectureMonitor)
                ) && 
                (
                    this.HudsonNodeMonitorsResponseTimeMonitor == other.HudsonNodeMonitorsResponseTimeMonitor ||
                    this.HudsonNodeMonitorsResponseTimeMonitor != null &&
                    this.HudsonNodeMonitorsResponseTimeMonitor.Equals(other.HudsonNodeMonitorsResponseTimeMonitor)
                ) && 
                (
                    this.HudsonNodeMonitorsClockMonitor == other.HudsonNodeMonitorsClockMonitor ||
                    this.HudsonNodeMonitorsClockMonitor != null &&
                    this.HudsonNodeMonitorsClockMonitor.Equals(other.HudsonNodeMonitorsClockMonitor)
                ) && 
                (
                    this.Class == other.Class ||
                    this.Class != null &&
                    this.Class.Equals(other.Class)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.HudsonNodeMonitorsSwapSpaceMonitor != null)
                    hash = hash * 59 + this.HudsonNodeMonitorsSwapSpaceMonitor.GetHashCode();
                    if (this.HudsonNodeMonitorsTemporarySpaceMonitor != null)
                    hash = hash * 59 + this.HudsonNodeMonitorsTemporarySpaceMonitor.GetHashCode();
                    if (this.HudsonNodeMonitorsDiskSpaceMonitor != null)
                    hash = hash * 59 + this.HudsonNodeMonitorsDiskSpaceMonitor.GetHashCode();
                    if (this.HudsonNodeMonitorsArchitectureMonitor != null)
                    hash = hash * 59 + this.HudsonNodeMonitorsArchitectureMonitor.GetHashCode();
                    if (this.HudsonNodeMonitorsResponseTimeMonitor != null)
                    hash = hash * 59 + this.HudsonNodeMonitorsResponseTimeMonitor.GetHashCode();
                    if (this.HudsonNodeMonitorsClockMonitor != null)
                    hash = hash * 59 + this.HudsonNodeMonitorsClockMonitor.GetHashCode();
                    if (this.Class != null)
                    hash = hash * 59 + this.Class.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(HudsonmodelHudsonMasterComputerMonitorData left, HudsonmodelHudsonMasterComputerMonitorData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HudsonmodelHudsonMasterComputerMonitorData left, HudsonmodelHudsonMasterComputerMonitorData right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
