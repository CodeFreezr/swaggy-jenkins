/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "GetPipelineBranchesitem_pullRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

GetPipelineBranchesitem_pullRequest::GetPipelineBranchesitem_pullRequest()
{
    m__linksIsSet = false;
    m_Author = U("");
    m_AuthorIsSet = false;
    m_Id = U("");
    m_IdIsSet = false;
    m_Title = U("");
    m_TitleIsSet = false;
    m_Url = U("");
    m_UrlIsSet = false;
    m__class = U("");
    m__classIsSet = false;
    
}

GetPipelineBranchesitem_pullRequest::~GetPipelineBranchesitem_pullRequest()
{
}

void GetPipelineBranchesitem_pullRequest::validate()
{
    // TODO: implement validation
}

web::json::value GetPipelineBranchesitem_pullRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__linksIsSet)
    {
        val[U("_links")] = ModelBase::toJson(m__links);
    }
    if(m_AuthorIsSet)
    {
        val[U("author")] = ModelBase::toJson(m_Author);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_TitleIsSet)
    {
        val[U("title")] = ModelBase::toJson(m_Title);
    }
    if(m_UrlIsSet)
    {
        val[U("url")] = ModelBase::toJson(m_Url);
    }
    if(m__classIsSet)
    {
        val[U("_class")] = ModelBase::toJson(m__class);
    }
    

    return val;
}

void GetPipelineBranchesitem_pullRequest::fromJson(web::json::value& val)
{
    if(val.has_field(U("_links")))
    {
        if(!val[U("_links")].is_null())
        {
            std::shared_ptr<GetPipelineBranchesitem_pullRequest__links> newItem(new GetPipelineBranchesitem_pullRequest__links());
            newItem->fromJson(val[U("_links")]);
            setLinks( newItem );
        }
        
    }
    if(val.has_field(U("author")))
    {
        setAuthor(ModelBase::stringFromJson(val[U("author")]));
        
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::stringFromJson(val[U("id")]));
        
    }
    if(val.has_field(U("title")))
    {
        setTitle(ModelBase::stringFromJson(val[U("title")]));
        
    }
    if(val.has_field(U("url")))
    {
        setUrl(ModelBase::stringFromJson(val[U("url")]));
        
    }
    if(val.has_field(U("_class")))
    {
        setClass(ModelBase::stringFromJson(val[U("_class")]));
        
    }
    
}

void GetPipelineBranchesitem_pullRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m__linksIsSet)
    {
        if (m__links.get())
        {
            m__links->toMultipart(multipart, U("_links."));
        }
        
    }
    if(m_AuthorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("author"), m_Author));
        
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
        
    }
    if(m_TitleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("title"), m_Title));
        
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("url"), m_Url));
        
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("_class"), m__class));
        
    }
    
}

void GetPipelineBranchesitem_pullRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("_links")))
    {
        if(multipart->hasContent(U("_links")))
        {
            std::shared_ptr<GetPipelineBranchesitem_pullRequest__links> newItem(new GetPipelineBranchesitem_pullRequest__links());
            newItem->fromMultiPart(multipart, U("_links."));
            setLinks( newItem );
        }
        
    }
    if(multipart->hasContent(U("author")))
    {
        setAuthor(ModelBase::stringFromHttpContent(multipart->getContent(U("author"))));
        
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::stringFromHttpContent(multipart->getContent(U("id"))));
        
    }
    if(multipart->hasContent(U("title")))
    {
        setTitle(ModelBase::stringFromHttpContent(multipart->getContent(U("title"))));
        
    }
    if(multipart->hasContent(U("url")))
    {
        setUrl(ModelBase::stringFromHttpContent(multipart->getContent(U("url"))));
        
    }
    if(multipart->hasContent(U("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(U("_class"))));
        
    }
    
}


std::shared_ptr<GetPipelineBranchesitem_pullRequest__links> GetPipelineBranchesitem_pullRequest::getLinks() const
{
    return m__links;
}
void GetPipelineBranchesitem_pullRequest::setLinks(std::shared_ptr<GetPipelineBranchesitem_pullRequest__links> value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool GetPipelineBranchesitem_pullRequest::_linksIsSet() const
{
    return m__linksIsSet;
}
void GetPipelineBranchesitem_pullRequest::unset_links()
{
    m__linksIsSet = false;
}
utility::string_t GetPipelineBranchesitem_pullRequest::getAuthor() const
{
    return m_Author;
}
void GetPipelineBranchesitem_pullRequest::setAuthor(utility::string_t value)
{
    m_Author = value;
    m_AuthorIsSet = true;
}
bool GetPipelineBranchesitem_pullRequest::authorIsSet() const
{
    return m_AuthorIsSet;
}
void GetPipelineBranchesitem_pullRequest::unsetAuthor()
{
    m_AuthorIsSet = false;
}
utility::string_t GetPipelineBranchesitem_pullRequest::getId() const
{
    return m_Id;
}
void GetPipelineBranchesitem_pullRequest::setId(utility::string_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool GetPipelineBranchesitem_pullRequest::idIsSet() const
{
    return m_IdIsSet;
}
void GetPipelineBranchesitem_pullRequest::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t GetPipelineBranchesitem_pullRequest::getTitle() const
{
    return m_Title;
}
void GetPipelineBranchesitem_pullRequest::setTitle(utility::string_t value)
{
    m_Title = value;
    m_TitleIsSet = true;
}
bool GetPipelineBranchesitem_pullRequest::titleIsSet() const
{
    return m_TitleIsSet;
}
void GetPipelineBranchesitem_pullRequest::unsetTitle()
{
    m_TitleIsSet = false;
}
utility::string_t GetPipelineBranchesitem_pullRequest::getUrl() const
{
    return m_Url;
}
void GetPipelineBranchesitem_pullRequest::setUrl(utility::string_t value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool GetPipelineBranchesitem_pullRequest::urlIsSet() const
{
    return m_UrlIsSet;
}
void GetPipelineBranchesitem_pullRequest::unsetUrl()
{
    m_UrlIsSet = false;
}
utility::string_t GetPipelineBranchesitem_pullRequest::getClass() const
{
    return m__class;
}
void GetPipelineBranchesitem_pullRequest::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool GetPipelineBranchesitem_pullRequest::_classIsSet() const
{
    return m__classIsSet;
}
void GetPipelineBranchesitem_pullRequest::unset_class()
{
    m__classIsSet = false;
}

}
}
}
}

