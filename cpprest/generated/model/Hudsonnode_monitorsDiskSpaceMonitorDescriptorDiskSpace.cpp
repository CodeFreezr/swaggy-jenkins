/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace()
{
    m__class = U("");
    m__classIsSet = false;
    m_Timestamp = 0;
    m_TimestampIsSet = false;
    m_Path = U("");
    m_PathIsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
    
}

Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::~Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace()
{
}

void Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::validate()
{
    // TODO: implement validation
}

web::json::value Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[U("_class")] = ModelBase::toJson(m__class);
    }
    if(m_TimestampIsSet)
    {
        val[U("timestamp")] = ModelBase::toJson(m_Timestamp);
    }
    if(m_PathIsSet)
    {
        val[U("path")] = ModelBase::toJson(m_Path);
    }
    if(m_SizeIsSet)
    {
        val[U("size")] = ModelBase::toJson(m_Size);
    }
    

    return val;
}

void Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::fromJson(web::json::value& val)
{
    if(val.has_field(U("_class")))
    {
        setClass(ModelBase::stringFromJson(val[U("_class")]));
        
    }
    if(val.has_field(U("timestamp")))
    {
        setTimestamp(ModelBase::int32_tFromJson(val[U("timestamp")]));
    }
    if(val.has_field(U("path")))
    {
        setPath(ModelBase::stringFromJson(val[U("path")]));
        
    }
    if(val.has_field(U("size")))
    {
        setSize(ModelBase::int32_tFromJson(val[U("size")]));
    }
    
}

void Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("_class"), m__class));
        
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("timestamp"), m_Timestamp));
    }
    if(m_PathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("path"), m_Path));
        
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("size"), m_Size));
    }
    
}

void Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(U("_class"))));
        
    }
    if(multipart->hasContent(U("timestamp")))
    {
        setTimestamp(ModelBase::int32_tFromHttpContent(multipart->getContent(U("timestamp"))));
    }
    if(multipart->hasContent(U("path")))
    {
        setPath(ModelBase::stringFromHttpContent(multipart->getContent(U("path"))));
        
    }
    if(multipart->hasContent(U("size")))
    {
        setSize(ModelBase::int32_tFromHttpContent(multipart->getContent(U("size"))));
    }
    
}


utility::string_t Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::getClass() const
{
    return m__class;
}
void Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::_classIsSet() const
{
    return m__classIsSet;
}
void Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::unset_class()
{
    m__classIsSet = false;
}
int32_t Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::getTimestamp() const
{
    return m_Timestamp;
}
void Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::setTimestamp(int32_t value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}
bool Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::timestampIsSet() const
{
    return m_TimestampIsSet;
}
void Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
utility::string_t Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::getPath() const
{
    return m_Path;
}
void Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::setPath(utility::string_t value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::pathIsSet() const
{
    return m_PathIsSet;
}
void Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::unsetPath()
{
    m_PathIsSet = false;
}
int32_t Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::getSize() const
{
    return m_Size;
}
void Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::setSize(int32_t value)
{
    m_Size = value;
    m_SizeIsSet = true;
}
bool Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::sizeIsSet() const
{
    return m_SizeIsSet;
}
void Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace::unsetSize()
{
    m_SizeIsSet = false;
}

}
}
}
}

