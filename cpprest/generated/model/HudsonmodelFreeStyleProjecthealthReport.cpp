/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "HudsonmodelFreeStyleProjecthealthReport.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

HudsonmodelFreeStyleProjecthealthReport::HudsonmodelFreeStyleProjecthealthReport()
{
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_IconClassName = U("");
    m_IconClassNameIsSet = false;
    m_IconUrl = U("");
    m_IconUrlIsSet = false;
    m_Score = 0;
    m_ScoreIsSet = false;
    m__class = U("");
    m__classIsSet = false;
    
}

HudsonmodelFreeStyleProjecthealthReport::~HudsonmodelFreeStyleProjecthealthReport()
{
}

void HudsonmodelFreeStyleProjecthealthReport::validate()
{
    // TODO: implement validation
}

web::json::value HudsonmodelFreeStyleProjecthealthReport::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    if(m_IconClassNameIsSet)
    {
        val[U("iconClassName")] = ModelBase::toJson(m_IconClassName);
    }
    if(m_IconUrlIsSet)
    {
        val[U("iconUrl")] = ModelBase::toJson(m_IconUrl);
    }
    if(m_ScoreIsSet)
    {
        val[U("score")] = ModelBase::toJson(m_Score);
    }
    if(m__classIsSet)
    {
        val[U("_class")] = ModelBase::toJson(m__class);
    }
    

    return val;
}

void HudsonmodelFreeStyleProjecthealthReport::fromJson(web::json::value& val)
{
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
        
    }
    if(val.has_field(U("iconClassName")))
    {
        setIconClassName(ModelBase::stringFromJson(val[U("iconClassName")]));
        
    }
    if(val.has_field(U("iconUrl")))
    {
        setIconUrl(ModelBase::stringFromJson(val[U("iconUrl")]));
        
    }
    if(val.has_field(U("score")))
    {
        setScore(ModelBase::int32_tFromJson(val[U("score")]));
    }
    if(val.has_field(U("_class")))
    {
        setClass(ModelBase::stringFromJson(val[U("_class")]));
        
    }
    
}

void HudsonmodelFreeStyleProjecthealthReport::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    if(m_IconClassNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("iconClassName"), m_IconClassName));
        
    }
    if(m_IconUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("iconUrl"), m_IconUrl));
        
    }
    if(m_ScoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("score"), m_Score));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("_class"), m__class));
        
    }
    
}

void HudsonmodelFreeStyleProjecthealthReport::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
        
    }
    if(multipart->hasContent(U("iconClassName")))
    {
        setIconClassName(ModelBase::stringFromHttpContent(multipart->getContent(U("iconClassName"))));
        
    }
    if(multipart->hasContent(U("iconUrl")))
    {
        setIconUrl(ModelBase::stringFromHttpContent(multipart->getContent(U("iconUrl"))));
        
    }
    if(multipart->hasContent(U("score")))
    {
        setScore(ModelBase::int32_tFromHttpContent(multipart->getContent(U("score"))));
    }
    if(multipart->hasContent(U("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(U("_class"))));
        
    }
    
}


utility::string_t HudsonmodelFreeStyleProjecthealthReport::getDescription() const
{
    return m_Description;
}
void HudsonmodelFreeStyleProjecthealthReport::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool HudsonmodelFreeStyleProjecthealthReport::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void HudsonmodelFreeStyleProjecthealthReport::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t HudsonmodelFreeStyleProjecthealthReport::getIconClassName() const
{
    return m_IconClassName;
}
void HudsonmodelFreeStyleProjecthealthReport::setIconClassName(utility::string_t value)
{
    m_IconClassName = value;
    m_IconClassNameIsSet = true;
}
bool HudsonmodelFreeStyleProjecthealthReport::iconClassNameIsSet() const
{
    return m_IconClassNameIsSet;
}
void HudsonmodelFreeStyleProjecthealthReport::unsetIconClassName()
{
    m_IconClassNameIsSet = false;
}
utility::string_t HudsonmodelFreeStyleProjecthealthReport::getIconUrl() const
{
    return m_IconUrl;
}
void HudsonmodelFreeStyleProjecthealthReport::setIconUrl(utility::string_t value)
{
    m_IconUrl = value;
    m_IconUrlIsSet = true;
}
bool HudsonmodelFreeStyleProjecthealthReport::iconUrlIsSet() const
{
    return m_IconUrlIsSet;
}
void HudsonmodelFreeStyleProjecthealthReport::unsetIconUrl()
{
    m_IconUrlIsSet = false;
}
int32_t HudsonmodelFreeStyleProjecthealthReport::getScore() const
{
    return m_Score;
}
void HudsonmodelFreeStyleProjecthealthReport::setScore(int32_t value)
{
    m_Score = value;
    m_ScoreIsSet = true;
}
bool HudsonmodelFreeStyleProjecthealthReport::scoreIsSet() const
{
    return m_ScoreIsSet;
}
void HudsonmodelFreeStyleProjecthealthReport::unsetScore()
{
    m_ScoreIsSet = false;
}
utility::string_t HudsonmodelFreeStyleProjecthealthReport::getClass() const
{
    return m__class;
}
void HudsonmodelFreeStyleProjecthealthReport::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool HudsonmodelFreeStyleProjecthealthReport::_classIsSet() const
{
    return m__classIsSet;
}
void HudsonmodelFreeStyleProjecthealthReport::unset_class()
{
    m__classIsSet = false;
}

}
}
}
}

