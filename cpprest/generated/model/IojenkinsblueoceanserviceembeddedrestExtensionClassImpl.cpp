/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IojenkinsblueoceanserviceembeddedrestExtensionClassImpl.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::IojenkinsblueoceanserviceembeddedrestExtensionClassImpl()
{
    m__class = U("");
    m__classIsSet = false;
    m__linksIsSet = false;
    m_ClassesIsSet = false;
    
}

IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::~IojenkinsblueoceanserviceembeddedrestExtensionClassImpl()
{
}

void IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::validate()
{
    // TODO: implement validation
}

web::json::value IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[U("_class")] = ModelBase::toJson(m__class);
    }
    if(m__linksIsSet)
    {
        val[U("_links")] = ModelBase::toJson(m__links);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Classes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("classes")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::fromJson(web::json::value& val)
{
    if(val.has_field(U("_class")))
    {
        setClass(ModelBase::stringFromJson(val[U("_class")]));
        
    }
    if(val.has_field(U("_links")))
    {
        if(!val[U("_links")].is_null())
        {
            std::shared_ptr<IojenkinsblueoceanserviceembeddedrestExtensionClassImpl__links> newItem(new IojenkinsblueoceanserviceembeddedrestExtensionClassImpl__links());
            newItem->fromJson(val[U("_links")]);
            setLinks( newItem );
        }
        
    }
    {
        m_Classes.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("classes")))
        {
        for( auto& item : val[U("classes")].as_array() )
        {
            m_Classes.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    
}

void IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("_class"), m__class));
        
    }
    if(m__linksIsSet)
    {
        if (m__links.get())
        {
            m__links->toMultipart(multipart, U("_links."));
        }
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Classes )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("classes"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(U("_class"))));
        
    }
    if(multipart->hasContent(U("_links")))
    {
        if(multipart->hasContent(U("_links")))
        {
            std::shared_ptr<IojenkinsblueoceanserviceembeddedrestExtensionClassImpl__links> newItem(new IojenkinsblueoceanserviceembeddedrestExtensionClassImpl__links());
            newItem->fromMultiPart(multipart, U("_links."));
            setLinks( newItem );
        }
        
    }
    {
        m_Classes.clear();
        if(multipart->hasContent(U("classes")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("classes"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_Classes.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    
}


utility::string_t IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::getClass() const
{
    return m__class;
}
void IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::_classIsSet() const
{
    return m__classIsSet;
}
void IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::unset_class()
{
    m__classIsSet = false;
}
std::shared_ptr<IojenkinsblueoceanserviceembeddedrestExtensionClassImpl__links> IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::getLinks() const
{
    return m__links;
}
void IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::setLinks(std::shared_ptr<IojenkinsblueoceanserviceembeddedrestExtensionClassImpl__links> value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::_linksIsSet() const
{
    return m__linksIsSet;
}
void IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::unset_links()
{
    m__linksIsSet = false;
}
std::vector<utility::string_t>& IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::getClasses()
{
    return m_Classes;
}
bool IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::classesIsSet() const
{
    return m_ClassesIsSet;
}
void IojenkinsblueoceanserviceembeddedrestExtensionClassImpl::unsetClasses()
{
    m_ClassesIsSet = false;
}

}
}
}
}

