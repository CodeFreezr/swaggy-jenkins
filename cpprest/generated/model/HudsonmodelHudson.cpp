/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "HudsonmodelHudson.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

HudsonmodelHudson::HudsonmodelHudson()
{
    m__class = U("");
    m__classIsSet = false;
    m_AssignedLabelsIsSet = false;
    m_Mode = U("");
    m_ModeIsSet = false;
    m_NodeDescription = U("");
    m_NodeDescriptionIsSet = false;
    m_NodeName = U("");
    m_NodeNameIsSet = false;
    m_NumExecutors = 0;
    m_NumExecutorsIsSet = false;
    m_Description = U("");
    m_DescriptionIsSet = false;
    m_JobsIsSet = false;
    m_PrimaryViewIsSet = false;
    m_QuietingDown = false;
    m_QuietingDownIsSet = false;
    m_SlaveAgentPort = 0;
    m_SlaveAgentPortIsSet = false;
    m_UnlabeledLoadIsSet = false;
    m_UseCrumbs = false;
    m_UseCrumbsIsSet = false;
    m_UseSecurity = false;
    m_UseSecurityIsSet = false;
    m_ViewsIsSet = false;
    
}

HudsonmodelHudson::~HudsonmodelHudson()
{
}

void HudsonmodelHudson::validate()
{
    // TODO: implement validation
}

web::json::value HudsonmodelHudson::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[U("_class")] = ModelBase::toJson(m__class);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_AssignedLabels )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("assignedLabels")] = web::json::value::array(jsonArray);
        }
    }
    if(m_ModeIsSet)
    {
        val[U("mode")] = ModelBase::toJson(m_Mode);
    }
    if(m_NodeDescriptionIsSet)
    {
        val[U("nodeDescription")] = ModelBase::toJson(m_NodeDescription);
    }
    if(m_NodeNameIsSet)
    {
        val[U("nodeName")] = ModelBase::toJson(m_NodeName);
    }
    if(m_NumExecutorsIsSet)
    {
        val[U("numExecutors")] = ModelBase::toJson(m_NumExecutors);
    }
    if(m_DescriptionIsSet)
    {
        val[U("description")] = ModelBase::toJson(m_Description);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Jobs )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("jobs")] = web::json::value::array(jsonArray);
        }
    }
    if(m_PrimaryViewIsSet)
    {
        val[U("primaryView")] = ModelBase::toJson(m_PrimaryView);
    }
    if(m_QuietingDownIsSet)
    {
        val[U("quietingDown")] = ModelBase::toJson(m_QuietingDown);
    }
    if(m_SlaveAgentPortIsSet)
    {
        val[U("slaveAgentPort")] = ModelBase::toJson(m_SlaveAgentPort);
    }
    if(m_UnlabeledLoadIsSet)
    {
        val[U("unlabeledLoad")] = ModelBase::toJson(m_UnlabeledLoad);
    }
    if(m_UseCrumbsIsSet)
    {
        val[U("useCrumbs")] = ModelBase::toJson(m_UseCrumbs);
    }
    if(m_UseSecurityIsSet)
    {
        val[U("useSecurity")] = ModelBase::toJson(m_UseSecurity);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Views )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("views")] = web::json::value::array(jsonArray);
        }
    }
    

    return val;
}

void HudsonmodelHudson::fromJson(web::json::value& val)
{
    if(val.has_field(U("_class")))
    {
        setClass(ModelBase::stringFromJson(val[U("_class")]));
        
    }
    {
        m_AssignedLabels.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("assignedLabels")))
        {
        for( auto& item : val[U("assignedLabels")].as_array() )
        {
            
            if(item.is_null())
            {
                m_AssignedLabels.push_back( std::shared_ptr<HudsonmodelHudsonassignedLabels>(nullptr) );
            }
            else
            {
                std::shared_ptr<HudsonmodelHudsonassignedLabels> newItem(new HudsonmodelHudsonassignedLabels());
                newItem->fromJson(item);
                m_AssignedLabels.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("mode")))
    {
        setMode(ModelBase::stringFromJson(val[U("mode")]));
        
    }
    if(val.has_field(U("nodeDescription")))
    {
        setNodeDescription(ModelBase::stringFromJson(val[U("nodeDescription")]));
        
    }
    if(val.has_field(U("nodeName")))
    {
        setNodeName(ModelBase::stringFromJson(val[U("nodeName")]));
        
    }
    if(val.has_field(U("numExecutors")))
    {
        setNumExecutors(ModelBase::int32_tFromJson(val[U("numExecutors")]));
    }
    if(val.has_field(U("description")))
    {
        setDescription(ModelBase::stringFromJson(val[U("description")]));
        
    }
    {
        m_Jobs.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("jobs")))
        {
        for( auto& item : val[U("jobs")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Jobs.push_back( std::shared_ptr<HudsonmodelFreeStyleProject>(nullptr) );
            }
            else
            {
                std::shared_ptr<HudsonmodelFreeStyleProject> newItem(new HudsonmodelFreeStyleProject());
                newItem->fromJson(item);
                m_Jobs.push_back( newItem );
            }
            
        }
        }
    }
    if(val.has_field(U("primaryView")))
    {
        if(!val[U("primaryView")].is_null())
        {
            std::shared_ptr<HudsonmodelAllView> newItem(new HudsonmodelAllView());
            newItem->fromJson(val[U("primaryView")]);
            setPrimaryView( newItem );
        }
        
    }
    if(val.has_field(U("quietingDown")))
    {
        setQuietingDown(ModelBase::boolFromJson(val[U("quietingDown")]));
    }
    if(val.has_field(U("slaveAgentPort")))
    {
        setSlaveAgentPort(ModelBase::int32_tFromJson(val[U("slaveAgentPort")]));
    }
    if(val.has_field(U("unlabeledLoad")))
    {
        if(!val[U("unlabeledLoad")].is_null())
        {
            std::shared_ptr<JenkinsmodelUnlabeledLoadStatistics> newItem(new JenkinsmodelUnlabeledLoadStatistics());
            newItem->fromJson(val[U("unlabeledLoad")]);
            setUnlabeledLoad( newItem );
        }
        
    }
    if(val.has_field(U("useCrumbs")))
    {
        setUseCrumbs(ModelBase::boolFromJson(val[U("useCrumbs")]));
    }
    if(val.has_field(U("useSecurity")))
    {
        setUseSecurity(ModelBase::boolFromJson(val[U("useSecurity")]));
    }
    {
        m_Views.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("views")))
        {
        for( auto& item : val[U("views")].as_array() )
        {
            
            if(item.is_null())
            {
                m_Views.push_back( std::shared_ptr<HudsonmodelAllView>(nullptr) );
            }
            else
            {
                std::shared_ptr<HudsonmodelAllView> newItem(new HudsonmodelAllView());
                newItem->fromJson(item);
                m_Views.push_back( newItem );
            }
            
        }
        }
    }
    
}

void HudsonmodelHudson::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("_class"), m__class));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_AssignedLabels )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("assignedLabels"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_ModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("mode"), m_Mode));
        
    }
    if(m_NodeDescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("nodeDescription"), m_NodeDescription));
        
    }
    if(m_NodeNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("nodeName"), m_NodeName));
        
    }
    if(m_NumExecutorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("numExecutors"), m_NumExecutors));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("description"), m_Description));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Jobs )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("jobs"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_PrimaryViewIsSet)
    {
        if (m_PrimaryView.get())
        {
            m_PrimaryView->toMultipart(multipart, U("primaryView."));
        }
        
    }
    if(m_QuietingDownIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("quietingDown"), m_QuietingDown));
    }
    if(m_SlaveAgentPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("slaveAgentPort"), m_SlaveAgentPort));
    }
    if(m_UnlabeledLoadIsSet)
    {
        if (m_UnlabeledLoad.get())
        {
            m_UnlabeledLoad->toMultipart(multipart, U("unlabeledLoad."));
        }
        
    }
    if(m_UseCrumbsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("useCrumbs"), m_UseCrumbs));
    }
    if(m_UseSecurityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("useSecurity"), m_UseSecurity));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Views )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("views"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    
}

void HudsonmodelHudson::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(U("_class"))));
        
    }
    {
        m_AssignedLabels.clear();
        if(multipart->hasContent(U("assignedLabels")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("assignedLabels"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_AssignedLabels.push_back( std::shared_ptr<HudsonmodelHudsonassignedLabels>(nullptr) );
            }
            else
            {
                std::shared_ptr<HudsonmodelHudsonassignedLabels> newItem(new HudsonmodelHudsonassignedLabels());
                newItem->fromJson(item);
                m_AssignedLabels.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("mode")))
    {
        setMode(ModelBase::stringFromHttpContent(multipart->getContent(U("mode"))));
        
    }
    if(multipart->hasContent(U("nodeDescription")))
    {
        setNodeDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("nodeDescription"))));
        
    }
    if(multipart->hasContent(U("nodeName")))
    {
        setNodeName(ModelBase::stringFromHttpContent(multipart->getContent(U("nodeName"))));
        
    }
    if(multipart->hasContent(U("numExecutors")))
    {
        setNumExecutors(ModelBase::int32_tFromHttpContent(multipart->getContent(U("numExecutors"))));
    }
    if(multipart->hasContent(U("description")))
    {
        setDescription(ModelBase::stringFromHttpContent(multipart->getContent(U("description"))));
        
    }
    {
        m_Jobs.clear();
        if(multipart->hasContent(U("jobs")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("jobs"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Jobs.push_back( std::shared_ptr<HudsonmodelFreeStyleProject>(nullptr) );
            }
            else
            {
                std::shared_ptr<HudsonmodelFreeStyleProject> newItem(new HudsonmodelFreeStyleProject());
                newItem->fromJson(item);
                m_Jobs.push_back( newItem );
            }
            
        }
        }
    }
    if(multipart->hasContent(U("primaryView")))
    {
        if(multipart->hasContent(U("primaryView")))
        {
            std::shared_ptr<HudsonmodelAllView> newItem(new HudsonmodelAllView());
            newItem->fromMultiPart(multipart, U("primaryView."));
            setPrimaryView( newItem );
        }
        
    }
    if(multipart->hasContent(U("quietingDown")))
    {
        setQuietingDown(ModelBase::boolFromHttpContent(multipart->getContent(U("quietingDown"))));
    }
    if(multipart->hasContent(U("slaveAgentPort")))
    {
        setSlaveAgentPort(ModelBase::int32_tFromHttpContent(multipart->getContent(U("slaveAgentPort"))));
    }
    if(multipart->hasContent(U("unlabeledLoad")))
    {
        if(multipart->hasContent(U("unlabeledLoad")))
        {
            std::shared_ptr<JenkinsmodelUnlabeledLoadStatistics> newItem(new JenkinsmodelUnlabeledLoadStatistics());
            newItem->fromMultiPart(multipart, U("unlabeledLoad."));
            setUnlabeledLoad( newItem );
        }
        
    }
    if(multipart->hasContent(U("useCrumbs")))
    {
        setUseCrumbs(ModelBase::boolFromHttpContent(multipart->getContent(U("useCrumbs"))));
    }
    if(multipart->hasContent(U("useSecurity")))
    {
        setUseSecurity(ModelBase::boolFromHttpContent(multipart->getContent(U("useSecurity"))));
    }
    {
        m_Views.clear();
        if(multipart->hasContent(U("views")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("views"))));
        for( auto& item : jsonArray.as_array() )
        {
            
            if(item.is_null())
            {
                m_Views.push_back( std::shared_ptr<HudsonmodelAllView>(nullptr) );
            }
            else
            {
                std::shared_ptr<HudsonmodelAllView> newItem(new HudsonmodelAllView());
                newItem->fromJson(item);
                m_Views.push_back( newItem );
            }
            
        }
        }
    }
    
}


utility::string_t HudsonmodelHudson::getClass() const
{
    return m__class;
}
void HudsonmodelHudson::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool HudsonmodelHudson::_classIsSet() const
{
    return m__classIsSet;
}
void HudsonmodelHudson::unset_class()
{
    m__classIsSet = false;
}
std::vector<std::shared_ptr<HudsonmodelHudsonassignedLabels>>& HudsonmodelHudson::getAssignedLabels()
{
    return m_AssignedLabels;
}
bool HudsonmodelHudson::assignedLabelsIsSet() const
{
    return m_AssignedLabelsIsSet;
}
void HudsonmodelHudson::unsetAssignedLabels()
{
    m_AssignedLabelsIsSet = false;
}
utility::string_t HudsonmodelHudson::getMode() const
{
    return m_Mode;
}
void HudsonmodelHudson::setMode(utility::string_t value)
{
    m_Mode = value;
    m_ModeIsSet = true;
}
bool HudsonmodelHudson::modeIsSet() const
{
    return m_ModeIsSet;
}
void HudsonmodelHudson::unsetMode()
{
    m_ModeIsSet = false;
}
utility::string_t HudsonmodelHudson::getNodeDescription() const
{
    return m_NodeDescription;
}
void HudsonmodelHudson::setNodeDescription(utility::string_t value)
{
    m_NodeDescription = value;
    m_NodeDescriptionIsSet = true;
}
bool HudsonmodelHudson::nodeDescriptionIsSet() const
{
    return m_NodeDescriptionIsSet;
}
void HudsonmodelHudson::unsetNodeDescription()
{
    m_NodeDescriptionIsSet = false;
}
utility::string_t HudsonmodelHudson::getNodeName() const
{
    return m_NodeName;
}
void HudsonmodelHudson::setNodeName(utility::string_t value)
{
    m_NodeName = value;
    m_NodeNameIsSet = true;
}
bool HudsonmodelHudson::nodeNameIsSet() const
{
    return m_NodeNameIsSet;
}
void HudsonmodelHudson::unsetNodeName()
{
    m_NodeNameIsSet = false;
}
int32_t HudsonmodelHudson::getNumExecutors() const
{
    return m_NumExecutors;
}
void HudsonmodelHudson::setNumExecutors(int32_t value)
{
    m_NumExecutors = value;
    m_NumExecutorsIsSet = true;
}
bool HudsonmodelHudson::numExecutorsIsSet() const
{
    return m_NumExecutorsIsSet;
}
void HudsonmodelHudson::unsetNumExecutors()
{
    m_NumExecutorsIsSet = false;
}
utility::string_t HudsonmodelHudson::getDescription() const
{
    return m_Description;
}
void HudsonmodelHudson::setDescription(utility::string_t value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}
bool HudsonmodelHudson::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}
void HudsonmodelHudson::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::vector<std::shared_ptr<HudsonmodelFreeStyleProject>>& HudsonmodelHudson::getJobs()
{
    return m_Jobs;
}
bool HudsonmodelHudson::jobsIsSet() const
{
    return m_JobsIsSet;
}
void HudsonmodelHudson::unsetJobs()
{
    m_JobsIsSet = false;
}
std::shared_ptr<HudsonmodelAllView> HudsonmodelHudson::getPrimaryView() const
{
    return m_PrimaryView;
}
void HudsonmodelHudson::setPrimaryView(std::shared_ptr<HudsonmodelAllView> value)
{
    m_PrimaryView = value;
    m_PrimaryViewIsSet = true;
}
bool HudsonmodelHudson::primaryViewIsSet() const
{
    return m_PrimaryViewIsSet;
}
void HudsonmodelHudson::unsetPrimaryView()
{
    m_PrimaryViewIsSet = false;
}
bool HudsonmodelHudson::getQuietingDown() const
{
    return m_QuietingDown;
}
void HudsonmodelHudson::setQuietingDown(bool value)
{
    m_QuietingDown = value;
    m_QuietingDownIsSet = true;
}
bool HudsonmodelHudson::quietingDownIsSet() const
{
    return m_QuietingDownIsSet;
}
void HudsonmodelHudson::unsetQuietingDown()
{
    m_QuietingDownIsSet = false;
}
int32_t HudsonmodelHudson::getSlaveAgentPort() const
{
    return m_SlaveAgentPort;
}
void HudsonmodelHudson::setSlaveAgentPort(int32_t value)
{
    m_SlaveAgentPort = value;
    m_SlaveAgentPortIsSet = true;
}
bool HudsonmodelHudson::slaveAgentPortIsSet() const
{
    return m_SlaveAgentPortIsSet;
}
void HudsonmodelHudson::unsetSlaveAgentPort()
{
    m_SlaveAgentPortIsSet = false;
}
std::shared_ptr<JenkinsmodelUnlabeledLoadStatistics> HudsonmodelHudson::getUnlabeledLoad() const
{
    return m_UnlabeledLoad;
}
void HudsonmodelHudson::setUnlabeledLoad(std::shared_ptr<JenkinsmodelUnlabeledLoadStatistics> value)
{
    m_UnlabeledLoad = value;
    m_UnlabeledLoadIsSet = true;
}
bool HudsonmodelHudson::unlabeledLoadIsSet() const
{
    return m_UnlabeledLoadIsSet;
}
void HudsonmodelHudson::unsetUnlabeledLoad()
{
    m_UnlabeledLoadIsSet = false;
}
bool HudsonmodelHudson::getUseCrumbs() const
{
    return m_UseCrumbs;
}
void HudsonmodelHudson::setUseCrumbs(bool value)
{
    m_UseCrumbs = value;
    m_UseCrumbsIsSet = true;
}
bool HudsonmodelHudson::useCrumbsIsSet() const
{
    return m_UseCrumbsIsSet;
}
void HudsonmodelHudson::unsetUseCrumbs()
{
    m_UseCrumbsIsSet = false;
}
bool HudsonmodelHudson::getUseSecurity() const
{
    return m_UseSecurity;
}
void HudsonmodelHudson::setUseSecurity(bool value)
{
    m_UseSecurity = value;
    m_UseSecurityIsSet = true;
}
bool HudsonmodelHudson::useSecurityIsSet() const
{
    return m_UseSecurityIsSet;
}
void HudsonmodelHudson::unsetUseSecurity()
{
    m_UseSecurityIsSet = false;
}
std::vector<std::shared_ptr<HudsonmodelAllView>>& HudsonmodelHudson::getViews()
{
    return m_Views;
}
bool HudsonmodelHudson::viewsIsSet() const
{
    return m_ViewsIsSet;
}
void HudsonmodelHudson::unsetViews()
{
    m_ViewsIsSet = false;
}

}
}
}
}

