/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "HudsonmodelHudsonMasterComputer_monitorData.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

HudsonmodelHudsonMasterComputer_monitorData::HudsonmodelHudsonMasterComputer_monitorData()
{
    m_Hudson.node_monitors.SwapSpaceMonitorIsSet = false;
    m_Hudson.node_monitors.TemporarySpaceMonitorIsSet = false;
    m_Hudson.node_monitors.DiskSpaceMonitorIsSet = false;
    m_Hudson.node_monitors.ArchitectureMonitor = U("");
    m_Hudson.node_monitors.ArchitectureMonitorIsSet = false;
    m_Hudson.node_monitors.ResponseTimeMonitorIsSet = false;
    m_Hudson.node_monitors.ClockMonitorIsSet = false;
    m__class = U("");
    m__classIsSet = false;
    
}

HudsonmodelHudsonMasterComputer_monitorData::~HudsonmodelHudsonMasterComputer_monitorData()
{
}

void HudsonmodelHudsonMasterComputer_monitorData::validate()
{
    // TODO: implement validation
}

web::json::value HudsonmodelHudsonMasterComputer_monitorData::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Hudson.node_monitors.SwapSpaceMonitorIsSet)
    {
        val[U("hudson.node_monitors.SwapSpaceMonitor")] = ModelBase::toJson(m_Hudson.node_monitors.SwapSpaceMonitor);
    }
    if(m_Hudson.node_monitors.TemporarySpaceMonitorIsSet)
    {
        val[U("hudson.node_monitors.TemporarySpaceMonitor")] = ModelBase::toJson(m_Hudson.node_monitors.TemporarySpaceMonitor);
    }
    if(m_Hudson.node_monitors.DiskSpaceMonitorIsSet)
    {
        val[U("hudson.node_monitors.DiskSpaceMonitor")] = ModelBase::toJson(m_Hudson.node_monitors.DiskSpaceMonitor);
    }
    if(m_Hudson.node_monitors.ArchitectureMonitorIsSet)
    {
        val[U("hudson.node_monitors.ArchitectureMonitor")] = ModelBase::toJson(m_Hudson.node_monitors.ArchitectureMonitor);
    }
    if(m_Hudson.node_monitors.ResponseTimeMonitorIsSet)
    {
        val[U("hudson.node_monitors.ResponseTimeMonitor")] = ModelBase::toJson(m_Hudson.node_monitors.ResponseTimeMonitor);
    }
    if(m_Hudson.node_monitors.ClockMonitorIsSet)
    {
        val[U("hudson.node_monitors.ClockMonitor")] = ModelBase::toJson(m_Hudson.node_monitors.ClockMonitor);
    }
    if(m__classIsSet)
    {
        val[U("_class")] = ModelBase::toJson(m__class);
    }
    

    return val;
}

void HudsonmodelHudsonMasterComputer_monitorData::fromJson(web::json::value& val)
{
    if(val.has_field(U("hudson.node_monitors.SwapSpaceMonitor")))
    {
        if(!val[U("hudson.node_monitors.SwapSpaceMonitor")].is_null())
        {
            std::shared_ptr<Hudsonnode_monitorsSwapSpaceMonitorMemoryUsage2> newItem(new Hudsonnode_monitorsSwapSpaceMonitorMemoryUsage2());
            newItem->fromJson(val[U("hudson.node_monitors.SwapSpaceMonitor")]);
            setHudsonNodeMonitorsSwapSpaceMonitor( newItem );
        }
        
    }
    if(val.has_field(U("hudson.node_monitors.TemporarySpaceMonitor")))
    {
        if(!val[U("hudson.node_monitors.TemporarySpaceMonitor")].is_null())
        {
            std::shared_ptr<Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace> newItem(new Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace());
            newItem->fromJson(val[U("hudson.node_monitors.TemporarySpaceMonitor")]);
            setHudsonNodeMonitorsTemporarySpaceMonitor( newItem );
        }
        
    }
    if(val.has_field(U("hudson.node_monitors.DiskSpaceMonitor")))
    {
        if(!val[U("hudson.node_monitors.DiskSpaceMonitor")].is_null())
        {
            std::shared_ptr<Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace> newItem(new Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace());
            newItem->fromJson(val[U("hudson.node_monitors.DiskSpaceMonitor")]);
            setHudsonNodeMonitorsDiskSpaceMonitor( newItem );
        }
        
    }
    if(val.has_field(U("hudson.node_monitors.ArchitectureMonitor")))
    {
        setHudsonNodeMonitorsArchitectureMonitor(ModelBase::stringFromJson(val[U("hudson.node_monitors.ArchitectureMonitor")]));
        
    }
    if(val.has_field(U("hudson.node_monitors.ResponseTimeMonitor")))
    {
        if(!val[U("hudson.node_monitors.ResponseTimeMonitor")].is_null())
        {
            std::shared_ptr<Hudsonnode_monitorsResponseTimeMonitorData> newItem(new Hudsonnode_monitorsResponseTimeMonitorData());
            newItem->fromJson(val[U("hudson.node_monitors.ResponseTimeMonitor")]);
            setHudsonNodeMonitorsResponseTimeMonitor( newItem );
        }
        
    }
    if(val.has_field(U("hudson.node_monitors.ClockMonitor")))
    {
        if(!val[U("hudson.node_monitors.ClockMonitor")].is_null())
        {
            std::shared_ptr<HudsonutilClockDifference> newItem(new HudsonutilClockDifference());
            newItem->fromJson(val[U("hudson.node_monitors.ClockMonitor")]);
            setHudsonNodeMonitorsClockMonitor( newItem );
        }
        
    }
    if(val.has_field(U("_class")))
    {
        setClass(ModelBase::stringFromJson(val[U("_class")]));
        
    }
    
}

void HudsonmodelHudsonMasterComputer_monitorData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Hudson.node_monitors.SwapSpaceMonitorIsSet)
    {
        if (m_Hudson.node_monitors.SwapSpaceMonitor.get())
        {
            m_Hudson.node_monitors.SwapSpaceMonitor->toMultipart(multipart, U("hudson.node_monitors.SwapSpaceMonitor."));
        }
        
    }
    if(m_Hudson.node_monitors.TemporarySpaceMonitorIsSet)
    {
        if (m_Hudson.node_monitors.TemporarySpaceMonitor.get())
        {
            m_Hudson.node_monitors.TemporarySpaceMonitor->toMultipart(multipart, U("hudson.node_monitors.TemporarySpaceMonitor."));
        }
        
    }
    if(m_Hudson.node_monitors.DiskSpaceMonitorIsSet)
    {
        if (m_Hudson.node_monitors.DiskSpaceMonitor.get())
        {
            m_Hudson.node_monitors.DiskSpaceMonitor->toMultipart(multipart, U("hudson.node_monitors.DiskSpaceMonitor."));
        }
        
    }
    if(m_Hudson.node_monitors.ArchitectureMonitorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("hudson.node_monitors.ArchitectureMonitor"), m_Hudson.node_monitors.ArchitectureMonitor));
        
    }
    if(m_Hudson.node_monitors.ResponseTimeMonitorIsSet)
    {
        if (m_Hudson.node_monitors.ResponseTimeMonitor.get())
        {
            m_Hudson.node_monitors.ResponseTimeMonitor->toMultipart(multipart, U("hudson.node_monitors.ResponseTimeMonitor."));
        }
        
    }
    if(m_Hudson.node_monitors.ClockMonitorIsSet)
    {
        if (m_Hudson.node_monitors.ClockMonitor.get())
        {
            m_Hudson.node_monitors.ClockMonitor->toMultipart(multipart, U("hudson.node_monitors.ClockMonitor."));
        }
        
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("_class"), m__class));
        
    }
    
}

void HudsonmodelHudsonMasterComputer_monitorData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("hudson.node_monitors.SwapSpaceMonitor")))
    {
        if(multipart->hasContent(U("hudson.node_monitors.SwapSpaceMonitor")))
        {
            std::shared_ptr<Hudsonnode_monitorsSwapSpaceMonitorMemoryUsage2> newItem(new Hudsonnode_monitorsSwapSpaceMonitorMemoryUsage2());
            newItem->fromMultiPart(multipart, U("hudson.node_monitors.SwapSpaceMonitor."));
            setHudsonNodeMonitorsSwapSpaceMonitor( newItem );
        }
        
    }
    if(multipart->hasContent(U("hudson.node_monitors.TemporarySpaceMonitor")))
    {
        if(multipart->hasContent(U("hudson.node_monitors.TemporarySpaceMonitor")))
        {
            std::shared_ptr<Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace> newItem(new Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace());
            newItem->fromMultiPart(multipart, U("hudson.node_monitors.TemporarySpaceMonitor."));
            setHudsonNodeMonitorsTemporarySpaceMonitor( newItem );
        }
        
    }
    if(multipart->hasContent(U("hudson.node_monitors.DiskSpaceMonitor")))
    {
        if(multipart->hasContent(U("hudson.node_monitors.DiskSpaceMonitor")))
        {
            std::shared_ptr<Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace> newItem(new Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace());
            newItem->fromMultiPart(multipart, U("hudson.node_monitors.DiskSpaceMonitor."));
            setHudsonNodeMonitorsDiskSpaceMonitor( newItem );
        }
        
    }
    if(multipart->hasContent(U("hudson.node_monitors.ArchitectureMonitor")))
    {
        setHudsonNodeMonitorsArchitectureMonitor(ModelBase::stringFromHttpContent(multipart->getContent(U("hudson.node_monitors.ArchitectureMonitor"))));
        
    }
    if(multipart->hasContent(U("hudson.node_monitors.ResponseTimeMonitor")))
    {
        if(multipart->hasContent(U("hudson.node_monitors.ResponseTimeMonitor")))
        {
            std::shared_ptr<Hudsonnode_monitorsResponseTimeMonitorData> newItem(new Hudsonnode_monitorsResponseTimeMonitorData());
            newItem->fromMultiPart(multipart, U("hudson.node_monitors.ResponseTimeMonitor."));
            setHudsonNodeMonitorsResponseTimeMonitor( newItem );
        }
        
    }
    if(multipart->hasContent(U("hudson.node_monitors.ClockMonitor")))
    {
        if(multipart->hasContent(U("hudson.node_monitors.ClockMonitor")))
        {
            std::shared_ptr<HudsonutilClockDifference> newItem(new HudsonutilClockDifference());
            newItem->fromMultiPart(multipart, U("hudson.node_monitors.ClockMonitor."));
            setHudsonNodeMonitorsClockMonitor( newItem );
        }
        
    }
    if(multipart->hasContent(U("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(U("_class"))));
        
    }
    
}


std::shared_ptr<Hudsonnode_monitorsSwapSpaceMonitorMemoryUsage2> HudsonmodelHudsonMasterComputer_monitorData::getHudsonNodeMonitorsSwapSpaceMonitor() const
{
    return m_Hudson.node_monitors.SwapSpaceMonitor;
}
void HudsonmodelHudsonMasterComputer_monitorData::setHudsonNodeMonitorsSwapSpaceMonitor(std::shared_ptr<Hudsonnode_monitorsSwapSpaceMonitorMemoryUsage2> value)
{
    m_Hudson.node_monitors.SwapSpaceMonitor = value;
    m_Hudson.node_monitors.SwapSpaceMonitorIsSet = true;
}
bool HudsonmodelHudsonMasterComputer_monitorData::hudson.node_monitors.SwapSpaceMonitorIsSet() const
{
    return m_Hudson.node_monitors.SwapSpaceMonitorIsSet;
}
void HudsonmodelHudsonMasterComputer_monitorData::unsetHudson.node_monitors.SwapSpaceMonitor()
{
    m_Hudson.node_monitors.SwapSpaceMonitorIsSet = false;
}
std::shared_ptr<Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace> HudsonmodelHudsonMasterComputer_monitorData::getHudsonNodeMonitorsTemporarySpaceMonitor() const
{
    return m_Hudson.node_monitors.TemporarySpaceMonitor;
}
void HudsonmodelHudsonMasterComputer_monitorData::setHudsonNodeMonitorsTemporarySpaceMonitor(std::shared_ptr<Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace> value)
{
    m_Hudson.node_monitors.TemporarySpaceMonitor = value;
    m_Hudson.node_monitors.TemporarySpaceMonitorIsSet = true;
}
bool HudsonmodelHudsonMasterComputer_monitorData::hudson.node_monitors.TemporarySpaceMonitorIsSet() const
{
    return m_Hudson.node_monitors.TemporarySpaceMonitorIsSet;
}
void HudsonmodelHudsonMasterComputer_monitorData::unsetHudson.node_monitors.TemporarySpaceMonitor()
{
    m_Hudson.node_monitors.TemporarySpaceMonitorIsSet = false;
}
std::shared_ptr<Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace> HudsonmodelHudsonMasterComputer_monitorData::getHudsonNodeMonitorsDiskSpaceMonitor() const
{
    return m_Hudson.node_monitors.DiskSpaceMonitor;
}
void HudsonmodelHudsonMasterComputer_monitorData::setHudsonNodeMonitorsDiskSpaceMonitor(std::shared_ptr<Hudsonnode_monitorsDiskSpaceMonitorDescriptorDiskSpace> value)
{
    m_Hudson.node_monitors.DiskSpaceMonitor = value;
    m_Hudson.node_monitors.DiskSpaceMonitorIsSet = true;
}
bool HudsonmodelHudsonMasterComputer_monitorData::hudson.node_monitors.DiskSpaceMonitorIsSet() const
{
    return m_Hudson.node_monitors.DiskSpaceMonitorIsSet;
}
void HudsonmodelHudsonMasterComputer_monitorData::unsetHudson.node_monitors.DiskSpaceMonitor()
{
    m_Hudson.node_monitors.DiskSpaceMonitorIsSet = false;
}
utility::string_t HudsonmodelHudsonMasterComputer_monitorData::getHudsonNodeMonitorsArchitectureMonitor() const
{
    return m_Hudson.node_monitors.ArchitectureMonitor;
}
void HudsonmodelHudsonMasterComputer_monitorData::setHudsonNodeMonitorsArchitectureMonitor(utility::string_t value)
{
    m_Hudson.node_monitors.ArchitectureMonitor = value;
    m_Hudson.node_monitors.ArchitectureMonitorIsSet = true;
}
bool HudsonmodelHudsonMasterComputer_monitorData::hudson.node_monitors.ArchitectureMonitorIsSet() const
{
    return m_Hudson.node_monitors.ArchitectureMonitorIsSet;
}
void HudsonmodelHudsonMasterComputer_monitorData::unsetHudson.node_monitors.ArchitectureMonitor()
{
    m_Hudson.node_monitors.ArchitectureMonitorIsSet = false;
}
std::shared_ptr<Hudsonnode_monitorsResponseTimeMonitorData> HudsonmodelHudsonMasterComputer_monitorData::getHudsonNodeMonitorsResponseTimeMonitor() const
{
    return m_Hudson.node_monitors.ResponseTimeMonitor;
}
void HudsonmodelHudsonMasterComputer_monitorData::setHudsonNodeMonitorsResponseTimeMonitor(std::shared_ptr<Hudsonnode_monitorsResponseTimeMonitorData> value)
{
    m_Hudson.node_monitors.ResponseTimeMonitor = value;
    m_Hudson.node_monitors.ResponseTimeMonitorIsSet = true;
}
bool HudsonmodelHudsonMasterComputer_monitorData::hudson.node_monitors.ResponseTimeMonitorIsSet() const
{
    return m_Hudson.node_monitors.ResponseTimeMonitorIsSet;
}
void HudsonmodelHudsonMasterComputer_monitorData::unsetHudson.node_monitors.ResponseTimeMonitor()
{
    m_Hudson.node_monitors.ResponseTimeMonitorIsSet = false;
}
std::shared_ptr<HudsonutilClockDifference> HudsonmodelHudsonMasterComputer_monitorData::getHudsonNodeMonitorsClockMonitor() const
{
    return m_Hudson.node_monitors.ClockMonitor;
}
void HudsonmodelHudsonMasterComputer_monitorData::setHudsonNodeMonitorsClockMonitor(std::shared_ptr<HudsonutilClockDifference> value)
{
    m_Hudson.node_monitors.ClockMonitor = value;
    m_Hudson.node_monitors.ClockMonitorIsSet = true;
}
bool HudsonmodelHudsonMasterComputer_monitorData::hudson.node_monitors.ClockMonitorIsSet() const
{
    return m_Hudson.node_monitors.ClockMonitorIsSet;
}
void HudsonmodelHudsonMasterComputer_monitorData::unsetHudson.node_monitors.ClockMonitor()
{
    m_Hudson.node_monitors.ClockMonitorIsSet = false;
}
utility::string_t HudsonmodelHudsonMasterComputer_monitorData::getClass() const
{
    return m__class;
}
void HudsonmodelHudsonMasterComputer_monitorData::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool HudsonmodelHudsonMasterComputer_monitorData::_classIsSet() const
{
    return m__classIsSet;
}
void HudsonmodelHudsonMasterComputer_monitorData::unset_class()
{
    m__classIsSet = false;
}

}
}
}
}

