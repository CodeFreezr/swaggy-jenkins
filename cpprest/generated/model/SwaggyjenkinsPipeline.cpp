/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SwaggyjenkinsPipeline.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SwaggyjenkinsPipeline::SwaggyjenkinsPipeline()
{
    m__class = U("");
    m__classIsSet = false;
    m_Organization = U("");
    m_OrganizationIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_DisplayName = U("");
    m_DisplayNameIsSet = false;
    m_FullName = U("");
    m_FullNameIsSet = false;
    m_WeatherScore = 0;
    m_WeatherScoreIsSet = false;
    m_EstimatedDurationInMillis = 0;
    m_EstimatedDurationInMillisIsSet = false;
    m_LatestRunIsSet = false;
    
}

SwaggyjenkinsPipeline::~SwaggyjenkinsPipeline()
{
}

void SwaggyjenkinsPipeline::validate()
{
    // TODO: implement validation
}

web::json::value SwaggyjenkinsPipeline::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[U("_class")] = ModelBase::toJson(m__class);
    }
    if(m_OrganizationIsSet)
    {
        val[U("organization")] = ModelBase::toJson(m_Organization);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_DisplayNameIsSet)
    {
        val[U("displayName")] = ModelBase::toJson(m_DisplayName);
    }
    if(m_FullNameIsSet)
    {
        val[U("fullName")] = ModelBase::toJson(m_FullName);
    }
    if(m_WeatherScoreIsSet)
    {
        val[U("weatherScore")] = ModelBase::toJson(m_WeatherScore);
    }
    if(m_EstimatedDurationInMillisIsSet)
    {
        val[U("estimatedDurationInMillis")] = ModelBase::toJson(m_EstimatedDurationInMillis);
    }
    if(m_LatestRunIsSet)
    {
        val[U("latestRun")] = ModelBase::toJson(m_LatestRun);
    }
    

    return val;
}

void SwaggyjenkinsPipeline::fromJson(web::json::value& val)
{
    if(val.has_field(U("_class")))
    {
        setClass(ModelBase::stringFromJson(val[U("_class")]));
        
    }
    if(val.has_field(U("organization")))
    {
        setOrganization(ModelBase::stringFromJson(val[U("organization")]));
        
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
        
    }
    if(val.has_field(U("displayName")))
    {
        setDisplayName(ModelBase::stringFromJson(val[U("displayName")]));
        
    }
    if(val.has_field(U("fullName")))
    {
        setFullName(ModelBase::stringFromJson(val[U("fullName")]));
        
    }
    if(val.has_field(U("weatherScore")))
    {
        setWeatherScore(ModelBase::int32_tFromJson(val[U("weatherScore")]));
    }
    if(val.has_field(U("estimatedDurationInMillis")))
    {
        setEstimatedDurationInMillis(ModelBase::int32_tFromJson(val[U("estimatedDurationInMillis")]));
    }
    if(val.has_field(U("latestRun")))
    {
        if(!val[U("latestRun")].is_null())
        {
            std::shared_ptr<SwaggyjenkinsPipeline_latestRun> newItem(new SwaggyjenkinsPipeline_latestRun());
            newItem->fromJson(val[U("latestRun")]);
            setLatestRun( newItem );
        }
        
    }
    
}

void SwaggyjenkinsPipeline::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("_class"), m__class));
        
    }
    if(m_OrganizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("organization"), m_Organization));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("displayName"), m_DisplayName));
        
    }
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("fullName"), m_FullName));
        
    }
    if(m_WeatherScoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("weatherScore"), m_WeatherScore));
    }
    if(m_EstimatedDurationInMillisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("estimatedDurationInMillis"), m_EstimatedDurationInMillis));
    }
    if(m_LatestRunIsSet)
    {
        if (m_LatestRun.get())
        {
            m_LatestRun->toMultipart(multipart, U("latestRun."));
        }
        
    }
    
}

void SwaggyjenkinsPipeline::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(U("_class"))));
        
    }
    if(multipart->hasContent(U("organization")))
    {
        setOrganization(ModelBase::stringFromHttpContent(multipart->getContent(U("organization"))));
        
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
        
    }
    if(multipart->hasContent(U("displayName")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(U("displayName"))));
        
    }
    if(multipart->hasContent(U("fullName")))
    {
        setFullName(ModelBase::stringFromHttpContent(multipart->getContent(U("fullName"))));
        
    }
    if(multipart->hasContent(U("weatherScore")))
    {
        setWeatherScore(ModelBase::int32_tFromHttpContent(multipart->getContent(U("weatherScore"))));
    }
    if(multipart->hasContent(U("estimatedDurationInMillis")))
    {
        setEstimatedDurationInMillis(ModelBase::int32_tFromHttpContent(multipart->getContent(U("estimatedDurationInMillis"))));
    }
    if(multipart->hasContent(U("latestRun")))
    {
        if(multipart->hasContent(U("latestRun")))
        {
            std::shared_ptr<SwaggyjenkinsPipeline_latestRun> newItem(new SwaggyjenkinsPipeline_latestRun());
            newItem->fromMultiPart(multipart, U("latestRun."));
            setLatestRun( newItem );
        }
        
    }
    
}


utility::string_t SwaggyjenkinsPipeline::getClass() const
{
    return m__class;
}
void SwaggyjenkinsPipeline::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool SwaggyjenkinsPipeline::_classIsSet() const
{
    return m__classIsSet;
}
void SwaggyjenkinsPipeline::unset_class()
{
    m__classIsSet = false;
}
utility::string_t SwaggyjenkinsPipeline::getOrganization() const
{
    return m_Organization;
}
void SwaggyjenkinsPipeline::setOrganization(utility::string_t value)
{
    m_Organization = value;
    m_OrganizationIsSet = true;
}
bool SwaggyjenkinsPipeline::organizationIsSet() const
{
    return m_OrganizationIsSet;
}
void SwaggyjenkinsPipeline::unsetOrganization()
{
    m_OrganizationIsSet = false;
}
utility::string_t SwaggyjenkinsPipeline::getName() const
{
    return m_Name;
}
void SwaggyjenkinsPipeline::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool SwaggyjenkinsPipeline::nameIsSet() const
{
    return m_NameIsSet;
}
void SwaggyjenkinsPipeline::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t SwaggyjenkinsPipeline::getDisplayName() const
{
    return m_DisplayName;
}
void SwaggyjenkinsPipeline::setDisplayName(utility::string_t value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool SwaggyjenkinsPipeline::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}
void SwaggyjenkinsPipeline::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
utility::string_t SwaggyjenkinsPipeline::getFullName() const
{
    return m_FullName;
}
void SwaggyjenkinsPipeline::setFullName(utility::string_t value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}
bool SwaggyjenkinsPipeline::fullNameIsSet() const
{
    return m_FullNameIsSet;
}
void SwaggyjenkinsPipeline::unsetFullName()
{
    m_FullNameIsSet = false;
}
int32_t SwaggyjenkinsPipeline::getWeatherScore() const
{
    return m_WeatherScore;
}
void SwaggyjenkinsPipeline::setWeatherScore(int32_t value)
{
    m_WeatherScore = value;
    m_WeatherScoreIsSet = true;
}
bool SwaggyjenkinsPipeline::weatherScoreIsSet() const
{
    return m_WeatherScoreIsSet;
}
void SwaggyjenkinsPipeline::unsetWeatherScore()
{
    m_WeatherScoreIsSet = false;
}
int32_t SwaggyjenkinsPipeline::getEstimatedDurationInMillis() const
{
    return m_EstimatedDurationInMillis;
}
void SwaggyjenkinsPipeline::setEstimatedDurationInMillis(int32_t value)
{
    m_EstimatedDurationInMillis = value;
    m_EstimatedDurationInMillisIsSet = true;
}
bool SwaggyjenkinsPipeline::estimatedDurationInMillisIsSet() const
{
    return m_EstimatedDurationInMillisIsSet;
}
void SwaggyjenkinsPipeline::unsetEstimatedDurationInMillis()
{
    m_EstimatedDurationInMillisIsSet = false;
}
std::shared_ptr<SwaggyjenkinsPipeline_latestRun> SwaggyjenkinsPipeline::getLatestRun() const
{
    return m_LatestRun;
}
void SwaggyjenkinsPipeline::setLatestRun(std::shared_ptr<SwaggyjenkinsPipeline_latestRun> value)
{
    m_LatestRun = value;
    m_LatestRunIsSet = true;
}
bool SwaggyjenkinsPipeline::latestRunIsSet() const
{
    return m_LatestRunIsSet;
}
void SwaggyjenkinsPipeline::unsetLatestRun()
{
    m_LatestRunIsSet = false;
}

}
}
}
}

