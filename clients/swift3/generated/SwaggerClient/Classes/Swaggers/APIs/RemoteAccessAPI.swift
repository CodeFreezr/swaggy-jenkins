//
// RemoteAccessAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class RemoteAccessAPI: APIBase {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getComputer(completion: @escaping ((_ data: HudsonmodelComputerSet?,_ error: Error?) -> Void)) {
        getComputerWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /computer/api/json?depth=1
     - Retrieve computer details
     - examples: [{contentType=application/json, example={
  "busyExecutors" : 0,
  "totalExecutors" : 4,
  "computer" : [ {
    "idle" : true,
    "displayName" : "aeiou",
    "jnlpAgent" : true,
    "launchSupported" : true,
    "icon" : "aeiou",
    "iconClassName" : "aeiou",
    "offlineCause" : "aeiou",
    "temporarilyOffline" : true,
    "numExecutors" : 1,
    "offline" : true,
    "executors" : [ {
      "currentExecutable" : {
        "queueId" : 5,
        "displayName" : "aeiou",
        "keepLog" : true,
        "description" : "aeiou",
        "fullDisplayName" : "aeiou",
        "estimatedDuration" : 5,
        "url" : "aeiou",
        "building" : true,
        "changeSet" : {
          "kind" : "aeiou",
          "_class" : "aeiou"
        },
        "duration" : 1,
        "result" : "aeiou",
        "number" : 6,
        "executor" : "aeiou",
        "builtOn" : "aeiou",
        "_class" : "aeiou",
        "id" : "aeiou",
        "actions" : [ {
          "causes" : [ {
            "_class" : "aeiou",
            "shortDescription" : "aeiou",
            "userName" : "aeiou",
            "userId" : "aeiou"
          } ],
          "_class" : "aeiou"
        } ],
        "timestamp" : 2
      },
      "number" : 7,
      "idle" : true,
      "likelyStuck" : true,
      "progress" : 9,
      "_class" : "aeiou"
    } ],
    "monitorData" : {
      "hudson.node_monitors.SwapSpaceMonitor" : {
        "totalSwapSpace" : 7,
        "availableSwapSpace" : 2,
        "_class" : "aeiou",
        "availablePhysicalMemory" : 3,
        "totalPhysicalMemory" : 4
      },
      "hudson.node_monitors.TemporarySpaceMonitor" : {
        "path" : "aeiou",
        "size" : 1,
        "_class" : "aeiou",
        "timestamp" : 1
      },
      "hudson.node_monitors.DiskSpaceMonitor" : "",
      "hudson.node_monitors.ArchitectureMonitor" : "aeiou",
      "_class" : "aeiou",
      "hudson.node_monitors.ResponseTimeMonitor" : {
        "average" : 6,
        "_class" : "aeiou",
        "timestamp" : 1
      },
      "hudson.node_monitors.ClockMonitor" : {
        "diff" : 7,
        "_class" : "aeiou"
      }
    },
    "_class" : "aeiou",
    "loadStatistics" : {
      "_class" : "aeiou"
    },
    "manualLaunchAllowed" : true,
    "offlineCauseReason" : "aeiou"
  } ],
  "displayName" : "aeiou",
  "_class" : "aeiou"
}}]

     - returns: RequestBuilder<HudsonmodelComputerSet> 
     */
    open class func getComputerWithRequestBuilder() -> RequestBuilder<HudsonmodelComputerSet> {
        let path = "/computer/api/json?depth=1"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<HudsonmodelComputerSet>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCrumb(completion: @escaping ((_ data: HudsonsecuritycsrfDefaultCrumbIssuer?,_ error: Error?) -> Void)) {
        getCrumbWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /crumbIssuer/api/json
     - Retrieve CSRF protection token
     - examples: [{contentType=application/json, example={
  "crumb" : "aeiou",
  "_class" : "aeiou",
  "crumbRequestField" : "aeiou"
}}]

     - returns: RequestBuilder<HudsonsecuritycsrfDefaultCrumbIssuer> 
     */
    open class func getCrumbWithRequestBuilder() -> RequestBuilder<HudsonsecuritycsrfDefaultCrumbIssuer> {
        let path = "/crumbIssuer/api/json"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<HudsonsecuritycsrfDefaultCrumbIssuer>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJenkins(completion: @escaping ((_ data: HudsonmodelHudson?,_ error: Error?) -> Void)) {
        getJenkinsWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /api/json
     - Retrieve Jenkins details
     - examples: [{contentType=application/json, example={
  "nodeName" : "aeiou",
  "assignedLabels" : [ {
    "_class" : "aeiou"
  } ],
  "jobs" : [ {
    "color" : "aeiou",
    "displayName" : "aeiou",
    "lastSuccessfulBuild" : "",
    "description" : "aeiou",
    "fullDisplayName" : "aeiou",
    "lastUnstableBuild" : "aeiou",
    "queueItem" : "aeiou",
    "buildable" : true,
    "firstBuild" : "",
    "lastFailedBuild" : "aeiou",
    "lastBuild" : "",
    "nextBuildNumber" : 9,
    "builds" : [ {
      "queueId" : 5,
      "displayName" : "aeiou",
      "keepLog" : true,
      "description" : "aeiou",
      "fullDisplayName" : "aeiou",
      "estimatedDuration" : 5,
      "url" : "aeiou",
      "building" : true,
      "changeSet" : {
        "kind" : "aeiou",
        "_class" : "aeiou"
      },
      "duration" : 1,
      "result" : "aeiou",
      "number" : 6,
      "executor" : "aeiou",
      "builtOn" : "aeiou",
      "_class" : "aeiou",
      "id" : "aeiou",
      "actions" : [ {
        "causes" : [ {
          "_class" : "aeiou",
          "shortDescription" : "aeiou",
          "userName" : "aeiou",
          "userId" : "aeiou"
        } ],
        "_class" : "aeiou"
      } ],
      "timestamp" : 2
    } ],
    "scm" : {
      "_class" : "aeiou"
    },
    "keepDependencies" : true,
    "displayNameOrNull" : "aeiou",
    "inQueue" : true,
    "lastCompletedBuild" : "",
    "fullName" : "aeiou",
    "healthReport" : [ {
      "score" : 7,
      "description" : "aeiou",
      "iconClassName" : "aeiou",
      "iconUrl" : "aeiou",
      "_class" : "aeiou"
    } ],
    "lastStableBuild" : "",
    "lastUnsuccessfulBuild" : "aeiou",
    "url" : "aeiou",
    "concurrentBuild" : true,
    "name" : "aeiou",
    "_class" : "aeiou",
    "actions" : [ {
      "_class" : "aeiou"
    } ]
  } ],
  "slaveAgentPort" : 3,
  "description" : "aeiou",
  "useCrumbs" : true,
  "nodeDescription" : "aeiou",
  "primaryView" : {
    "name" : "aeiou",
    "_class" : "aeiou",
    "url" : "aeiou"
  },
  "unlabeledLoad" : {
    "_class" : "aeiou"
  },
  "mode" : "aeiou",
  "numExecutors" : 0,
  "quietingDown" : true,
  "useSecurity" : true,
  "_class" : "aeiou",
  "views" : [ "" ]
}}]

     - returns: RequestBuilder<HudsonmodelHudson> 
     */
    open class func getJenkinsWithRequestBuilder() -> RequestBuilder<HudsonmodelHudson> {
        let path = "/api/json"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<HudsonmodelHudson>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (path) Name of the job 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJob(name: String, completion: @escaping ((_ data: HudsonmodelFreeStyleProject?,_ error: Error?) -> Void)) {
        getJobWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /job/{name}/api/json
     - Retrieve job details
     - examples: [{contentType=application/json, example={
  "color" : "aeiou",
  "displayName" : "aeiou",
  "lastSuccessfulBuild" : "",
  "description" : "aeiou",
  "fullDisplayName" : "aeiou",
  "lastUnstableBuild" : "aeiou",
  "queueItem" : "aeiou",
  "buildable" : true,
  "firstBuild" : "",
  "lastFailedBuild" : "aeiou",
  "lastBuild" : "",
  "nextBuildNumber" : 7,
  "builds" : [ {
    "queueId" : 5,
    "displayName" : "aeiou",
    "keepLog" : true,
    "description" : "aeiou",
    "fullDisplayName" : "aeiou",
    "estimatedDuration" : 1,
    "url" : "aeiou",
    "building" : true,
    "changeSet" : {
      "kind" : "aeiou",
      "_class" : "aeiou"
    },
    "duration" : 6,
    "result" : "aeiou",
    "number" : 0,
    "executor" : "aeiou",
    "builtOn" : "aeiou",
    "_class" : "aeiou",
    "id" : "aeiou",
    "actions" : [ {
      "causes" : [ {
        "_class" : "aeiou",
        "shortDescription" : "aeiou",
        "userName" : "aeiou",
        "userId" : "aeiou"
      } ],
      "_class" : "aeiou"
    } ],
    "timestamp" : 5
  } ],
  "scm" : {
    "_class" : "aeiou"
  },
  "keepDependencies" : true,
  "displayNameOrNull" : "aeiou",
  "inQueue" : true,
  "lastCompletedBuild" : "",
  "fullName" : "aeiou",
  "healthReport" : [ {
    "score" : 2,
    "description" : "aeiou",
    "iconClassName" : "aeiou",
    "iconUrl" : "aeiou",
    "_class" : "aeiou"
  } ],
  "lastStableBuild" : "",
  "lastUnsuccessfulBuild" : "aeiou",
  "url" : "aeiou",
  "concurrentBuild" : true,
  "name" : "aeiou",
  "_class" : "aeiou",
  "actions" : [ {
    "_class" : "aeiou"
  } ]
}}]
     
     - parameter name: (path) Name of the job 

     - returns: RequestBuilder<HudsonmodelFreeStyleProject> 
     */
    open class func getJobWithRequestBuilder(name: String) -> RequestBuilder<HudsonmodelFreeStyleProject> {
        var path = "/job/{name}/api/json"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<HudsonmodelFreeStyleProject>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (path) Name of the job 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJobConfig(name: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getJobConfigWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /job/{name}/config.xml
     - Retrieve job configuration
     - examples: [{output=none}]
     
     - parameter name: (path) Name of the job 

     - returns: RequestBuilder<String> 
     */
    open class func getJobConfigWithRequestBuilder(name: String) -> RequestBuilder<String> {
        var path = "/job/{name}/config.xml"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (path) Name of the job 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJobLastBuild(name: String, completion: @escaping ((_ data: HudsonmodelFreeStyleBuild?,_ error: Error?) -> Void)) {
        getJobLastBuildWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /job/{name}/lastBuild/api/json
     - Retrieve job's last build details
     - examples: [{contentType=application/json, example={
  "queueId" : 5,
  "displayName" : "aeiou",
  "keepLog" : true,
  "description" : "aeiou",
  "fullDisplayName" : "aeiou",
  "estimatedDuration" : 1,
  "url" : "aeiou",
  "building" : true,
  "changeSet" : {
    "kind" : "aeiou",
    "_class" : "aeiou"
  },
  "duration" : 6,
  "result" : "aeiou",
  "number" : 0,
  "executor" : "aeiou",
  "builtOn" : "aeiou",
  "_class" : "aeiou",
  "id" : "aeiou",
  "actions" : [ {
    "causes" : [ {
      "_class" : "aeiou",
      "shortDescription" : "aeiou",
      "userName" : "aeiou",
      "userId" : "aeiou"
    } ],
    "_class" : "aeiou"
  } ],
  "timestamp" : 5
}}]
     
     - parameter name: (path) Name of the job 

     - returns: RequestBuilder<HudsonmodelFreeStyleBuild> 
     */
    open class func getJobLastBuildWithRequestBuilder(name: String) -> RequestBuilder<HudsonmodelFreeStyleBuild> {
        var path = "/job/{name}/lastBuild/api/json"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<HudsonmodelFreeStyleBuild>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (path) Name of the job 
     - parameter number: (path) Build number 
     - parameter start: (query) Starting point of progressive text output 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getJobProgressiveText(name: String, number: String, start: String, completion: @escaping ((_ error: Error?) -> Void)) {
        getJobProgressiveTextWithRequestBuilder(name: name, number: number, start: start).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /job/{name}/{number}/logText/progressiveText
     - Retrieve job's build progressive text output
     
     - parameter name: (path) Name of the job 
     - parameter number: (path) Build number 
     - parameter start: (query) Starting point of progressive text output 

     - returns: RequestBuilder<Void> 
     */
    open class func getJobProgressiveTextWithRequestBuilder(name: String, number: String, start: String) -> RequestBuilder<Void> {
        var path = "/job/{name}/{number}/logText/progressiveText"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{number}", with: "\(number)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "start": start
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQueue(completion: @escaping ((_ data: HudsonmodelQueue?,_ error: Error?) -> Void)) {
        getQueueWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /queue/api/json
     - Retrieve queue details
     - examples: [{contentType=application/json, example={
  "_class" : "aeiou",
  "items" : [ {
    "task" : {
      "color" : "aeiou",
      "displayName" : "aeiou",
      "lastSuccessfulBuild" : "",
      "description" : "aeiou",
      "fullDisplayName" : "aeiou",
      "lastUnstableBuild" : "aeiou",
      "queueItem" : "aeiou",
      "buildable" : true,
      "firstBuild" : "",
      "lastFailedBuild" : "aeiou",
      "lastBuild" : "",
      "nextBuildNumber" : 3,
      "builds" : [ {
        "queueId" : 2,
        "displayName" : "aeiou",
        "keepLog" : true,
        "description" : "aeiou",
        "fullDisplayName" : "aeiou",
        "estimatedDuration" : 5,
        "url" : "aeiou",
        "building" : true,
        "changeSet" : {
          "kind" : "aeiou",
          "_class" : "aeiou"
        },
        "duration" : 5,
        "result" : "aeiou",
        "number" : 1,
        "executor" : "aeiou",
        "builtOn" : "aeiou",
        "_class" : "aeiou",
        "id" : "aeiou",
        "actions" : [ "" ],
        "timestamp" : 7
      } ],
      "scm" : {
        "_class" : "aeiou"
      },
      "keepDependencies" : true,
      "displayNameOrNull" : "aeiou",
      "inQueue" : true,
      "lastCompletedBuild" : "",
      "fullName" : "aeiou",
      "healthReport" : [ {
        "score" : 9,
        "description" : "aeiou",
        "iconClassName" : "aeiou",
        "iconUrl" : "aeiou",
        "_class" : "aeiou"
      } ],
      "lastStableBuild" : "",
      "lastUnsuccessfulBuild" : "aeiou",
      "url" : "aeiou",
      "concurrentBuild" : true,
      "name" : "aeiou",
      "_class" : "aeiou",
      "actions" : [ {
        "_class" : "aeiou"
      } ]
    },
    "blocked" : true,
    "stuck" : true,
    "buildableStartMilliseconds" : 2,
    "why" : "aeiou",
    "_class" : "aeiou",
    "id" : 0,
    "buildable" : true,
    "params" : "aeiou",
    "actions" : [ {
      "causes" : [ {
        "_class" : "aeiou",
        "shortDescription" : "aeiou",
        "userName" : "aeiou",
        "userId" : "aeiou"
      } ],
      "_class" : "aeiou"
    } ],
    "url" : "aeiou",
    "inQueueSince" : 6
  } ]
}}]

     - returns: RequestBuilder<HudsonmodelQueue> 
     */
    open class func getQueueWithRequestBuilder() -> RequestBuilder<HudsonmodelQueue> {
        let path = "/queue/api/json"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<HudsonmodelQueue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter number: (path) Queue number 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getQueueItem(number: String, completion: @escaping ((_ data: HudsonmodelQueue?,_ error: Error?) -> Void)) {
        getQueueItemWithRequestBuilder(number: number).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /queue/item/{number}/api/json
     - Retrieve queued item details
     - examples: [{contentType=application/json, example={
  "_class" : "aeiou",
  "items" : [ {
    "task" : {
      "color" : "aeiou",
      "displayName" : "aeiou",
      "lastSuccessfulBuild" : "",
      "description" : "aeiou",
      "fullDisplayName" : "aeiou",
      "lastUnstableBuild" : "aeiou",
      "queueItem" : "aeiou",
      "buildable" : true,
      "firstBuild" : "",
      "lastFailedBuild" : "aeiou",
      "lastBuild" : "",
      "nextBuildNumber" : 3,
      "builds" : [ {
        "queueId" : 2,
        "displayName" : "aeiou",
        "keepLog" : true,
        "description" : "aeiou",
        "fullDisplayName" : "aeiou",
        "estimatedDuration" : 5,
        "url" : "aeiou",
        "building" : true,
        "changeSet" : {
          "kind" : "aeiou",
          "_class" : "aeiou"
        },
        "duration" : 5,
        "result" : "aeiou",
        "number" : 1,
        "executor" : "aeiou",
        "builtOn" : "aeiou",
        "_class" : "aeiou",
        "id" : "aeiou",
        "actions" : [ "" ],
        "timestamp" : 7
      } ],
      "scm" : {
        "_class" : "aeiou"
      },
      "keepDependencies" : true,
      "displayNameOrNull" : "aeiou",
      "inQueue" : true,
      "lastCompletedBuild" : "",
      "fullName" : "aeiou",
      "healthReport" : [ {
        "score" : 9,
        "description" : "aeiou",
        "iconClassName" : "aeiou",
        "iconUrl" : "aeiou",
        "_class" : "aeiou"
      } ],
      "lastStableBuild" : "",
      "lastUnsuccessfulBuild" : "aeiou",
      "url" : "aeiou",
      "concurrentBuild" : true,
      "name" : "aeiou",
      "_class" : "aeiou",
      "actions" : [ {
        "_class" : "aeiou"
      } ]
    },
    "blocked" : true,
    "stuck" : true,
    "buildableStartMilliseconds" : 2,
    "why" : "aeiou",
    "_class" : "aeiou",
    "id" : 0,
    "buildable" : true,
    "params" : "aeiou",
    "actions" : [ {
      "causes" : [ {
        "_class" : "aeiou",
        "shortDescription" : "aeiou",
        "userName" : "aeiou",
        "userId" : "aeiou"
      } ],
      "_class" : "aeiou"
    } ],
    "url" : "aeiou",
    "inQueueSince" : 6
  } ]
}}]
     
     - parameter number: (path) Queue number 

     - returns: RequestBuilder<HudsonmodelQueue> 
     */
    open class func getQueueItemWithRequestBuilder(number: String) -> RequestBuilder<HudsonmodelQueue> {
        var path = "/queue/item/{number}/api/json"
        path = path.replacingOccurrences(of: "{number}", with: "\(number)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<HudsonmodelQueue>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (path) Name of the view 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getView(name: String, completion: @escaping ((_ data: HudsonmodelListView?,_ error: Error?) -> Void)) {
        getViewWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /view/{name}/api/json
     - Retrieve view details
     - examples: [{contentType=application/json, example={
  "jobs" : [ {
    "color" : "aeiou",
    "displayName" : "aeiou",
    "lastSuccessfulBuild" : "",
    "description" : "aeiou",
    "fullDisplayName" : "aeiou",
    "lastUnstableBuild" : "aeiou",
    "queueItem" : "aeiou",
    "buildable" : true,
    "firstBuild" : "",
    "lastFailedBuild" : "aeiou",
    "lastBuild" : "",
    "nextBuildNumber" : 7,
    "builds" : [ {
      "queueId" : 5,
      "displayName" : "aeiou",
      "keepLog" : true,
      "description" : "aeiou",
      "fullDisplayName" : "aeiou",
      "estimatedDuration" : 1,
      "url" : "aeiou",
      "building" : true,
      "changeSet" : {
        "kind" : "aeiou",
        "_class" : "aeiou"
      },
      "duration" : 6,
      "result" : "aeiou",
      "number" : 0,
      "executor" : "aeiou",
      "builtOn" : "aeiou",
      "_class" : "aeiou",
      "id" : "aeiou",
      "actions" : [ {
        "causes" : [ {
          "_class" : "aeiou",
          "shortDescription" : "aeiou",
          "userName" : "aeiou",
          "userId" : "aeiou"
        } ],
        "_class" : "aeiou"
      } ],
      "timestamp" : 5
    } ],
    "scm" : {
      "_class" : "aeiou"
    },
    "keepDependencies" : true,
    "displayNameOrNull" : "aeiou",
    "inQueue" : true,
    "lastCompletedBuild" : "",
    "fullName" : "aeiou",
    "healthReport" : [ {
      "score" : 2,
      "description" : "aeiou",
      "iconClassName" : "aeiou",
      "iconUrl" : "aeiou",
      "_class" : "aeiou"
    } ],
    "lastStableBuild" : "",
    "lastUnsuccessfulBuild" : "aeiou",
    "url" : "aeiou",
    "concurrentBuild" : true,
    "name" : "aeiou",
    "_class" : "aeiou",
    "actions" : [ {
      "_class" : "aeiou"
    } ]
  } ],
  "name" : "aeiou",
  "description" : "aeiou",
  "_class" : "aeiou",
  "url" : "aeiou"
}}]
     
     - parameter name: (path) Name of the view 

     - returns: RequestBuilder<HudsonmodelListView> 
     */
    open class func getViewWithRequestBuilder(name: String) -> RequestBuilder<HudsonmodelListView> {
        var path = "/view/{name}/api/json"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<HudsonmodelListView>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (path) Name of the view 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getViewConfig(name: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        getViewConfigWithRequestBuilder(name: name).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /view/{name}/config.xml
     - Retrieve view configuration
     - examples: [{output=none}]
     
     - parameter name: (path) Name of the view 

     - returns: RequestBuilder<String> 
     */
    open class func getViewConfigWithRequestBuilder(name: String) -> RequestBuilder<String> {
        var path = "/view/{name}/config.xml"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func headJenkins(completion: @escaping ((_ error: Error?) -> Void)) {
        headJenkinsWithRequestBuilder().execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - HEAD /api/json
     - Retrieve Jenkins headers
     - responseHeaders: [x-jenkins(String)]

     - returns: RequestBuilder<Void> 
     */
    open class func headJenkinsWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/json"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter name: (query) Name of the new job 
     - parameter from: (query) Existing job to copy from (optional)
     - parameter mode: (query) Set to &#39;copy&#39; for copying an existing job (optional)
     - parameter body: (body) Job configuration in config.xml format (optional)
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)
     - parameter contentType: (header) Content type header application/xml (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postCreateItem(name: String, from: String? = nil, mode: String? = nil, body: String? = nil, jenkinsCrumb: String? = nil, contentType: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        postCreateItemWithRequestBuilder(name: name, from: from, mode: mode, body: body, jenkinsCrumb: jenkinsCrumb, contentType: contentType).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /createItem
     - Create a new job using job configuration, or copied from an existing job
     
     - parameter name: (query) Name of the new job 
     - parameter from: (query) Existing job to copy from (optional)
     - parameter mode: (query) Set to &#39;copy&#39; for copying an existing job (optional)
     - parameter body: (body) Job configuration in config.xml format (optional)
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)
     - parameter contentType: (header) Content type header application/xml (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postCreateItemWithRequestBuilder(name: String, from: String? = nil, mode: String? = nil, body: String? = nil, jenkinsCrumb: String? = nil, contentType: String? = nil) -> RequestBuilder<Void> {
        let path = "/createItem"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "name": name, 
            "from": from, 
            "mode": mode
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Jenkins-Crumb": jenkinsCrumb,
            "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter name: (query) Name of the new view 
     - parameter body: (body) View configuration in config.xml format (optional)
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)
     - parameter contentType: (header) Content type header application/xml (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postCreateView(name: String, body: String? = nil, jenkinsCrumb: String? = nil, contentType: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        postCreateViewWithRequestBuilder(name: name, body: body, jenkinsCrumb: jenkinsCrumb, contentType: contentType).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /createView
     - Create a new view using view configuration
     
     - parameter name: (query) Name of the new view 
     - parameter body: (body) View configuration in config.xml format (optional)
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)
     - parameter contentType: (header) Content type header application/xml (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postCreateViewWithRequestBuilder(name: String, body: String? = nil, jenkinsCrumb: String? = nil, contentType: String? = nil) -> RequestBuilder<Void> {
        let path = "/createView"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body?.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "name": name
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Jenkins-Crumb": jenkinsCrumb,
            "Content-Type": contentType
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter name: (path) Name of the job 
     - parameter json: (query)  
     - parameter token: (query)  (optional)
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postJobBuild(name: String, json: String, token: String? = nil, jenkinsCrumb: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        postJobBuildWithRequestBuilder(name: name, json: json, token: token, jenkinsCrumb: jenkinsCrumb).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /job/{name}/build
     - Build a job
     
     - parameter name: (path) Name of the job 
     - parameter json: (query)  
     - parameter token: (query)  (optional)
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postJobBuildWithRequestBuilder(name: String, json: String, token: String? = nil, jenkinsCrumb: String? = nil) -> RequestBuilder<Void> {
        var path = "/job/{name}/build"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "json": json, 
            "token": token
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Jenkins-Crumb": jenkinsCrumb
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter name: (path) Name of the job 
     - parameter body: (body) Job configuration in config.xml format 
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postJobConfig(name: String, body: String, jenkinsCrumb: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        postJobConfigWithRequestBuilder(name: name, body: body, jenkinsCrumb: jenkinsCrumb).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /job/{name}/config.xml
     - Update job configuration
     
     - parameter name: (path) Name of the job 
     - parameter body: (body) Job configuration in config.xml format 
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postJobConfigWithRequestBuilder(name: String, body: String, jenkinsCrumb: String? = nil) -> RequestBuilder<Void> {
        var path = "/job/{name}/config.xml"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Jenkins-Crumb": jenkinsCrumb
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter name: (path) Name of the job 
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postJobDelete(name: String, jenkinsCrumb: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        postJobDeleteWithRequestBuilder(name: name, jenkinsCrumb: jenkinsCrumb).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /job/{name}/doDelete
     - Delete a job
     
     - parameter name: (path) Name of the job 
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postJobDeleteWithRequestBuilder(name: String, jenkinsCrumb: String? = nil) -> RequestBuilder<Void> {
        var path = "/job/{name}/doDelete"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Jenkins-Crumb": jenkinsCrumb
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter name: (path) Name of the job 
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postJobDisable(name: String, jenkinsCrumb: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        postJobDisableWithRequestBuilder(name: name, jenkinsCrumb: jenkinsCrumb).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /job/{name}/disable
     - Disable a job
     
     - parameter name: (path) Name of the job 
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postJobDisableWithRequestBuilder(name: String, jenkinsCrumb: String? = nil) -> RequestBuilder<Void> {
        var path = "/job/{name}/disable"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Jenkins-Crumb": jenkinsCrumb
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter name: (path) Name of the job 
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postJobEnable(name: String, jenkinsCrumb: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        postJobEnableWithRequestBuilder(name: name, jenkinsCrumb: jenkinsCrumb).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /job/{name}/enable
     - Enable a job
     
     - parameter name: (path) Name of the job 
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postJobEnableWithRequestBuilder(name: String, jenkinsCrumb: String? = nil) -> RequestBuilder<Void> {
        var path = "/job/{name}/enable"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Jenkins-Crumb": jenkinsCrumb
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter name: (path) Name of the job 
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postJobLastBuildStop(name: String, jenkinsCrumb: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        postJobLastBuildStopWithRequestBuilder(name: name, jenkinsCrumb: jenkinsCrumb).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /job/{name}/lastBuild/stop
     - Stop a job
     
     - parameter name: (path) Name of the job 
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postJobLastBuildStopWithRequestBuilder(name: String, jenkinsCrumb: String? = nil) -> RequestBuilder<Void> {
        var path = "/job/{name}/lastBuild/stop"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Jenkins-Crumb": jenkinsCrumb
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter name: (path) Name of the view 
     - parameter body: (body) View configuration in config.xml format 
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postViewConfig(name: String, body: String, jenkinsCrumb: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        postViewConfigWithRequestBuilder(name: name, body: body, jenkinsCrumb: jenkinsCrumb).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - POST /view/{name}/config.xml
     - Update view configuration
     
     - parameter name: (path) Name of the view 
     - parameter body: (body) View configuration in config.xml format 
     - parameter jenkinsCrumb: (header) CSRF protection token (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postViewConfigWithRequestBuilder(name: String, body: String, jenkinsCrumb: String? = nil) -> RequestBuilder<Void> {
        var path = "/view/{name}/config.xml"
        path = path.replacingOccurrences(of: "{name}", with: "\(name)", options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Jenkins-Crumb": jenkinsCrumb
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
