// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case HttpError(statusCode: Int, data: Data?, error: Error)
    case DecodeError(response: Data?, decodeError: DecodeError)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

public enum Decoded<ValueType> {
    case success(ValueType)
    case failure(DecodeError)
}

public extension Decoded {
    var value: ValueType? {
        switch self {
        case let .success(value):
            return value
        case .failure:
            return nil
        }
    }
}

public enum DecodeError {
    case typeMismatch(expected: String, actual: String)
    case missingKey(key: String)
    case parseError(message: String)
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject, AnyObject?) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject, AnyObject?) -> Decoded<T>)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0, $1) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> Decoded<T> {
        let key = discriminator
        if let decoder = decoders[key], let value = decoder(source, nil) as? Decoded<T> {
            return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> Decoded<[T]> {
        if let sourceArray = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in sourceArray {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value):
                    values.append(value)
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> Decoded<[Key:T]> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value):
                    dictionary[key] = value
                case let .failure(error):
                    return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    static func decodeOptional<T: RawRepresentable>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        guard !(source is NSNull), source != nil else { return .success(nil) }
        if let value = source as? T.RawValue {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "\(T.RawValue.self) matching a case from the enumeration \(T.self)", actual: String(describing: type(of: source))))
        }
    }

    static func decode<T>(clazz: T.Type, source: AnyObject, instance: AnyObject?) -> Decoded<T> {
        initialize()
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int32.Type {
            return .success(value)
        }
        if let sourceNumber = source as? NSNumber, let value = sourceNumber.int32Value as? T, T.self is Int64.Type {
     	    return .success(value)
        }
        if let intermediate = source as? String, let value = UUID(uuidString: intermediate) as? T, source is String, T.self is UUID.Type {
            return .success(value)
        }
        if let value = source as? T {
            return .success(value)
        }
        if let intermediate = source as? String, let value = Data(base64Encoded: intermediate) as? T {
            return .success(value)
        }

        let key = "\(T.self)"
        if let decoder = decoders[key], let value = decoder(source, instance) as? Decoded<T> {
           return value
        } else {
            return .failure(.typeMismatch(expected: String(describing: clazz), actual: String(describing: source)))
        }
    }

    //Convert a Decoded so that its value is optional. DO WE STILL NEED THIS?
    static func toOptional<T>(decoded: Decoded<T>) -> Decoded<T?> {
        return .success(decoded.value)
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> Decoded<T?> {
        if let source = source, !(source is NSNull) {
            switch Decoders.decode(clazz: clazz, source: source, instance: nil) {
            case let .success(value): return .success(value)
            case let .failure(error): return .failure(error)
            }
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> Decoded<[T]?> {
        if let source = source as? [AnyObject] {
            var values = [T]()
            for sourceValue in source {
                switch Decoders.decode(clazz: T.self, source: sourceValue, instance: nil) {
                case let .success(value): values.append(value)
                case let .failure(error): return .failure(error)
                }
            }
            return .success(values)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> Decoded<[Key:T]?> {
        if let sourceDictionary = source as? [Key: AnyObject] {
            var dictionary = [Key:T]()
            for (key, value) in sourceDictionary {
                switch Decoders.decode(clazz: T.self, source: value, instance: nil) {
                case let .success(value): dictionary[key] = value
                case let .failure(error): return .failure(error)
                }
            }
            return .success(dictionary)
        } else {
            return .success(nil)
        }
    }

    static func decodeOptional<T: RawRepresentable, U: AnyObject where T.RawValue == U>(clazz: T, source: AnyObject) -> Decoded<T?> {
        if let value = source as? U {
            if let enumValue = T.init(rawValue: value) {
                return .success(enumValue)
            } else {
                return .failure(.typeMismatch(expected: "A value from the enumeration \(T.self)", actual: "\(value)"))
            }
        } else {
            return .failure(.typeMismatch(expected: "String", actual: String(describing: type(of: source))))
        }
    }


    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.locale = Locale(identifier: "en_US_POSIX")
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Date> in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return .success(date)
                    }
                }
            }
            if let sourceInt = source as? Int {
                // treat as a java date
                return .success(Date(timeIntervalSince1970: Double(sourceInt / 1000) ))
            }
            if source is String || source is Int {
                return .failure(.parseError(message: "Could not decode date"))
            } else {
                return .failure(.typeMismatch(expected: "String or Int", actual: "\(source)"))
            }
        }

        // Decoder for ISOFullDate
        Decoders.addDecoder(clazz: ISOFullDate.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ISOFullDate> in
            if let string = source as? String,
               let isoDate = ISOFullDate.from(string: string) {
                return .success(isoDate)
            } else {
            	return .failure(.typeMismatch(expected: "ISO date", actual: "\(source)"))
            }
        }

        // Decoder for AllView
        Decoders.addDecoder(clazz: AllView.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<AllView> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? AllView() : instance as! AllView
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?) {
                
                case let .success(value): result.url = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "AllView", actual: "\(source)"))
            }
        }
        // Decoder for Body
        Decoders.addDecoder(clazz: Body.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Body> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? Body() : instance as! Body
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["favorite"] as AnyObject?) {
                
                case let .success(value): result.favorite = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "Body", actual: "\(source)"))
            }
        }
        // Decoder for BranchImpl
        Decoders.addDecoder(clazz: BranchImpl.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BranchImpl> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? BranchImpl() : instance as! BranchImpl
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?) {
                
                case let .success(value): result.displayName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"] as AnyObject?) {
                
                case let .success(value): result.estimatedDurationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullDisplayName"] as AnyObject?) {
                
                case let .success(value): result.fullDisplayName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"] as AnyObject?) {
                
                case let .success(value): result.fullName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?) {
                
                case let .success(value): result.organization = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [StringParameterDefinition].self, source: sourceDictionary["parameters"] as AnyObject?) {
                
                case let .success(value): result.parameters = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: BranchImplpermissions.self, source: sourceDictionary["permissions"] as AnyObject?) {
                
                case let .success(value): result.permissions = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"] as AnyObject?) {
                
                case let .success(value): result.weatherScore = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pullRequest"] as AnyObject?) {
                
                case let .success(value): result.pullRequest = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: BranchImpllinks.self, source: sourceDictionary["_links"] as AnyObject?) {
                
                case let .success(value): result.links = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: PipelineRunImpl.self, source: sourceDictionary["latestRun"] as AnyObject?) {
                
                case let .success(value): result.latestRun = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "BranchImpl", actual: "\(source)"))
            }
        }
        // Decoder for BranchImpllinks
        Decoders.addDecoder(clazz: BranchImpllinks.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BranchImpllinks> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? BranchImpllinks() : instance as! BranchImpllinks
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"] as AnyObject?) {
                
                case let .success(value): result._self = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["actions"] as AnyObject?) {
                
                case let .success(value): result.actions = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["runs"] as AnyObject?) {
                
                case let .success(value): result.runs = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["queue"] as AnyObject?) {
                
                case let .success(value): result.queue = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "BranchImpllinks", actual: "\(source)"))
            }
        }
        // Decoder for BranchImplpermissions
        Decoders.addDecoder(clazz: BranchImplpermissions.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<BranchImplpermissions> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? BranchImplpermissions() : instance as! BranchImplpermissions
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["create"] as AnyObject?) {
                
                case let .success(value): result.create = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["read"] as AnyObject?) {
                
                case let .success(value): result.read = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["start"] as AnyObject?) {
                
                case let .success(value): result.start = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stop"] as AnyObject?) {
                
                case let .success(value): result.stop = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "BranchImplpermissions", actual: "\(source)"))
            }
        }
        // Decoder for CauseAction
        Decoders.addDecoder(clazz: CauseAction.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<CauseAction> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? CauseAction() : instance as! CauseAction
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [CauseUserIdCause].self, source: sourceDictionary["causes"] as AnyObject?) {
                
                case let .success(value): result.causes = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "CauseAction", actual: "\(source)"))
            }
        }
        // Decoder for CauseUserIdCause
        Decoders.addDecoder(clazz: CauseUserIdCause.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<CauseUserIdCause> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? CauseUserIdCause() : instance as! CauseUserIdCause
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shortDescription"] as AnyObject?) {
                
                case let .success(value): result.shortDescription = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"] as AnyObject?) {
                
                case let .success(value): result.userId = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userName"] as AnyObject?) {
                
                case let .success(value): result.userName = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "CauseUserIdCause", actual: "\(source)"))
            }
        }
        // Decoder for ClassesByClass
        Decoders.addDecoder(clazz: ClassesByClass.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ClassesByClass> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? ClassesByClass() : instance as! ClassesByClass
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["classes"] as AnyObject?) {
                
                case let .success(value): result.classes = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "ClassesByClass", actual: "\(source)"))
            }
        }
        // Decoder for ClockDifference
        Decoders.addDecoder(clazz: ClockDifference.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ClockDifference> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? ClockDifference() : instance as! ClockDifference
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["diff"] as AnyObject?) {
                
                case let .success(value): result.diff = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "ClockDifference", actual: "\(source)"))
            }
        }
        // Decoder for ComputerSet
        Decoders.addDecoder(clazz: ComputerSet.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ComputerSet> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? ComputerSet() : instance as! ComputerSet
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["busyExecutors"] as AnyObject?) {
                
                case let .success(value): result.busyExecutors = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [HudsonMasterComputer].self, source: sourceDictionary["computer"] as AnyObject?) {
                
                case let .success(value): result.computer = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?) {
                
                case let .success(value): result.displayName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalExecutors"] as AnyObject?) {
                
                case let .success(value): result.totalExecutors = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "ComputerSet", actual: "\(source)"))
            }
        }
        // Decoder for DefaultCrumbIssuer
        Decoders.addDecoder(clazz: DefaultCrumbIssuer.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<DefaultCrumbIssuer> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? DefaultCrumbIssuer() : instance as! DefaultCrumbIssuer
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["crumb"] as AnyObject?) {
                
                case let .success(value): result.crumb = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["crumbRequestField"] as AnyObject?) {
                
                case let .success(value): result.crumbRequestField = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "DefaultCrumbIssuer", actual: "\(source)"))
            }
        }
        // Decoder for DiskSpaceMonitorDescriptorDiskSpace
        Decoders.addDecoder(clazz: DiskSpaceMonitorDescriptorDiskSpace.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<DiskSpaceMonitorDescriptorDiskSpace> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? DiskSpaceMonitorDescriptorDiskSpace() : instance as! DiskSpaceMonitorDescriptorDiskSpace
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timestamp"] as AnyObject?) {
                
                case let .success(value): result.timestamp = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): result.path = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?) {
                
                case let .success(value): result.size = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "DiskSpaceMonitorDescriptorDiskSpace", actual: "\(source)"))
            }
        }
        // Decoder for EmptyChangeLogSet
        Decoders.addDecoder(clazz: EmptyChangeLogSet.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<EmptyChangeLogSet> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? EmptyChangeLogSet() : instance as! EmptyChangeLogSet
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["kind"] as AnyObject?) {
                
                case let .success(value): result.kind = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "EmptyChangeLogSet", actual: "\(source)"))
            }
        }
        // Decoder for ExtensionClassContainerImpl1
        Decoders.addDecoder(clazz: ExtensionClassContainerImpl1.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ExtensionClassContainerImpl1> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? ExtensionClassContainerImpl1() : instance as! ExtensionClassContainerImpl1
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: ExtensionClassContainerImpl1links.self, source: sourceDictionary["_links"] as AnyObject?) {
                
                case let .success(value): result.links = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: ExtensionClassContainerImpl1map.self, source: sourceDictionary["map"] as AnyObject?) {
                
                case let .success(value): result.map = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "ExtensionClassContainerImpl1", actual: "\(source)"))
            }
        }
        // Decoder for ExtensionClassContainerImpl1links
        Decoders.addDecoder(clazz: ExtensionClassContainerImpl1links.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ExtensionClassContainerImpl1links> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? ExtensionClassContainerImpl1links() : instance as! ExtensionClassContainerImpl1links
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"] as AnyObject?) {
                
                case let .success(value): result._self = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "ExtensionClassContainerImpl1links", actual: "\(source)"))
            }
        }
        // Decoder for ExtensionClassContainerImpl1map
        Decoders.addDecoder(clazz: ExtensionClassContainerImpl1map.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ExtensionClassContainerImpl1map> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? ExtensionClassContainerImpl1map() : instance as! ExtensionClassContainerImpl1map
                switch Decoders.decodeOptional(clazz: ExtensionClassImpl.self, source: sourceDictionary["io.jenkins.blueocean.service.embedded.rest.PipelineImpl"] as AnyObject?) {
                
                case let .success(value): result.ioJenkinsBlueoceanServiceEmbeddedRestPipelineImpl = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: ExtensionClassImpl.self, source: sourceDictionary["io.jenkins.blueocean.service.embedded.rest.MultiBranchPipelineImpl"] as AnyObject?) {
                
                case let .success(value): result.ioJenkinsBlueoceanServiceEmbeddedRestMultiBranchPipelineImpl = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "ExtensionClassContainerImpl1map", actual: "\(source)"))
            }
        }
        // Decoder for ExtensionClassImpl
        Decoders.addDecoder(clazz: ExtensionClassImpl.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ExtensionClassImpl> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? ExtensionClassImpl() : instance as! ExtensionClassImpl
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: ExtensionClassImpllinks.self, source: sourceDictionary["_links"] as AnyObject?) {
                
                case let .success(value): result.links = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["classes"] as AnyObject?) {
                
                case let .success(value): result.classes = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "ExtensionClassImpl", actual: "\(source)"))
            }
        }
        // Decoder for ExtensionClassImpllinks
        Decoders.addDecoder(clazz: ExtensionClassImpllinks.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ExtensionClassImpllinks> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? ExtensionClassImpllinks() : instance as! ExtensionClassImpllinks
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"] as AnyObject?) {
                
                case let .success(value): result._self = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "ExtensionClassImpllinks", actual: "\(source)"))
            }
        }
        // Decoder for FavoriteImpl
        Decoders.addDecoder(clazz: FavoriteImpl.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<FavoriteImpl> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? FavoriteImpl() : instance as! FavoriteImpl
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: FavoriteImpllinks.self, source: sourceDictionary["_links"] as AnyObject?) {
                
                case let .success(value): result.links = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: PipelineImpl.self, source: sourceDictionary["item"] as AnyObject?) {
                
                case let .success(value): result.item = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "FavoriteImpl", actual: "\(source)"))
            }
        }
        // Decoder for FavoriteImpllinks
        Decoders.addDecoder(clazz: FavoriteImpllinks.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<FavoriteImpllinks> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? FavoriteImpllinks() : instance as! FavoriteImpllinks
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"] as AnyObject?) {
                
                case let .success(value): result._self = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "FavoriteImpllinks", actual: "\(source)"))
            }
        }
        // Decoder for FreeStyleBuild
        Decoders.addDecoder(clazz: FreeStyleBuild.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<FreeStyleBuild> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? FreeStyleBuild() : instance as! FreeStyleBuild
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?) {
                
                case let .success(value): result.number = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?) {
                
                case let .success(value): result.url = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [CauseAction].self, source: sourceDictionary["actions"] as AnyObject?) {
                
                case let .success(value): result.actions = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["building"] as AnyObject?) {
                
                case let .success(value): result.building = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): result.description = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?) {
                
                case let .success(value): result.displayName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"] as AnyObject?) {
                
                case let .success(value): result.duration = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDuration"] as AnyObject?) {
                
                case let .success(value): result.estimatedDuration = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["executor"] as AnyObject?) {
                
                case let .success(value): result.executor = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullDisplayName"] as AnyObject?) {
                
                case let .success(value): result.fullDisplayName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): result.id = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["keepLog"] as AnyObject?) {
                
                case let .success(value): result.keepLog = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["queueId"] as AnyObject?) {
                
                case let .success(value): result.queueId = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"] as AnyObject?) {
                
                case let .success(value): result.result = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timestamp"] as AnyObject?) {
                
                case let .success(value): result.timestamp = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["builtOn"] as AnyObject?) {
                
                case let .success(value): result.builtOn = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: EmptyChangeLogSet.self, source: sourceDictionary["changeSet"] as AnyObject?) {
                
                case let .success(value): result.changeSet = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "FreeStyleBuild", actual: "\(source)"))
            }
        }
        // Decoder for FreeStyleProject
        Decoders.addDecoder(clazz: FreeStyleProject.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<FreeStyleProject> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? FreeStyleProject() : instance as! FreeStyleProject
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?) {
                
                case let .success(value): result.url = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["color"] as AnyObject?) {
                
                case let .success(value): result.color = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [FreeStyleProjectactions].self, source: sourceDictionary["actions"] as AnyObject?) {
                
                case let .success(value): result.actions = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): result.description = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?) {
                
                case let .success(value): result.displayName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayNameOrNull"] as AnyObject?) {
                
                case let .success(value): result.displayNameOrNull = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullDisplayName"] as AnyObject?) {
                
                case let .success(value): result.fullDisplayName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"] as AnyObject?) {
                
                case let .success(value): result.fullName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["buildable"] as AnyObject?) {
                
                case let .success(value): result.buildable = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [FreeStyleBuild].self, source: sourceDictionary["builds"] as AnyObject?) {
                
                case let .success(value): result.builds = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: FreeStyleBuild.self, source: sourceDictionary["firstBuild"] as AnyObject?) {
                
                case let .success(value): result.firstBuild = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [FreeStyleProjecthealthReport].self, source: sourceDictionary["healthReport"] as AnyObject?) {
                
                case let .success(value): result.healthReport = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["inQueue"] as AnyObject?) {
                
                case let .success(value): result.inQueue = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["keepDependencies"] as AnyObject?) {
                
                case let .success(value): result.keepDependencies = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: FreeStyleBuild.self, source: sourceDictionary["lastBuild"] as AnyObject?) {
                
                case let .success(value): result.lastBuild = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: FreeStyleBuild.self, source: sourceDictionary["lastCompletedBuild"] as AnyObject?) {
                
                case let .success(value): result.lastCompletedBuild = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastFailedBuild"] as AnyObject?) {
                
                case let .success(value): result.lastFailedBuild = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: FreeStyleBuild.self, source: sourceDictionary["lastStableBuild"] as AnyObject?) {
                
                case let .success(value): result.lastStableBuild = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: FreeStyleBuild.self, source: sourceDictionary["lastSuccessfulBuild"] as AnyObject?) {
                
                case let .success(value): result.lastSuccessfulBuild = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUnstableBuild"] as AnyObject?) {
                
                case let .success(value): result.lastUnstableBuild = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUnsuccessfulBuild"] as AnyObject?) {
                
                case let .success(value): result.lastUnsuccessfulBuild = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["nextBuildNumber"] as AnyObject?) {
                
                case let .success(value): result.nextBuildNumber = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueItem"] as AnyObject?) {
                
                case let .success(value): result.queueItem = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["concurrentBuild"] as AnyObject?) {
                
                case let .success(value): result.concurrentBuild = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: NullSCM.self, source: sourceDictionary["scm"] as AnyObject?) {
                
                case let .success(value): result.scm = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "FreeStyleProject", actual: "\(source)"))
            }
        }
        // Decoder for FreeStyleProjectactions
        Decoders.addDecoder(clazz: FreeStyleProjectactions.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<FreeStyleProjectactions> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? FreeStyleProjectactions() : instance as! FreeStyleProjectactions
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "FreeStyleProjectactions", actual: "\(source)"))
            }
        }
        // Decoder for FreeStyleProjecthealthReport
        Decoders.addDecoder(clazz: FreeStyleProjecthealthReport.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<FreeStyleProjecthealthReport> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? FreeStyleProjecthealthReport() : instance as! FreeStyleProjecthealthReport
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): result.description = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconClassName"] as AnyObject?) {
                
                case let .success(value): result.iconClassName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconUrl"] as AnyObject?) {
                
                case let .success(value): result.iconUrl = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["score"] as AnyObject?) {
                
                case let .success(value): result.score = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "FreeStyleProjecthealthReport", actual: "\(source)"))
            }
        }
        // Decoder for GenericResource
        Decoders.addDecoder(clazz: GenericResource.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<GenericResource> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? GenericResource() : instance as! GenericResource
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?) {
                
                case let .success(value): result.displayName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"] as AnyObject?) {
                
                case let .success(value): result.durationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): result.id = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"] as AnyObject?) {
                
                case let .success(value): result.result = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"] as AnyObject?) {
                
                case let .success(value): result.startTime = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "GenericResource", actual: "\(source)"))
            }
        }
        // Decoder for GithubContent
        Decoders.addDecoder(clazz: GithubContent.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<GithubContent> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? GithubContent() : instance as! GithubContent
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["sha"] as AnyObject?) {
                
                case let .success(value): result.sha = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["repo"] as AnyObject?) {
                
                case let .success(value): result.repo = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?) {
                
                case let .success(value): result.size = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["owner"] as AnyObject?) {
                
                case let .success(value): result.owner = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["path"] as AnyObject?) {
                
                case let .success(value): result.path = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["base64Data"] as AnyObject?) {
                
                case let .success(value): result.base64Data = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "GithubContent", actual: "\(source)"))
            }
        }
        // Decoder for GithubFile
        Decoders.addDecoder(clazz: GithubFile.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<GithubFile> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? GithubFile() : instance as! GithubFile
                switch Decoders.decodeOptional(clazz: GithubContent.self, source: sourceDictionary["content"] as AnyObject?) {
                
                case let .success(value): result.content = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "GithubFile", actual: "\(source)"))
            }
        }
        // Decoder for GithubOrganization
        Decoders.addDecoder(clazz: GithubOrganization.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<GithubOrganization> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? GithubOrganization() : instance as! GithubOrganization
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: GithubOrganizationlinks.self, source: sourceDictionary["_links"] as AnyObject?) {
                
                case let .success(value): result.links = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["jenkinsOrganizationPipeline"] as AnyObject?) {
                
                case let .success(value): result.jenkinsOrganizationPipeline = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "GithubOrganization", actual: "\(source)"))
            }
        }
        // Decoder for GithubOrganizationlinks
        Decoders.addDecoder(clazz: GithubOrganizationlinks.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<GithubOrganizationlinks> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? GithubOrganizationlinks() : instance as! GithubOrganizationlinks
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["repositories"] as AnyObject?) {
                
                case let .success(value): result.repositories = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"] as AnyObject?) {
                
                case let .success(value): result._self = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "GithubOrganizationlinks", actual: "\(source)"))
            }
        }
        // Decoder for GithubRepositories
        Decoders.addDecoder(clazz: GithubRepositories.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<GithubRepositories> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? GithubRepositories() : instance as! GithubRepositories
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: GithubRepositorieslinks.self, source: sourceDictionary["_links"] as AnyObject?) {
                
                case let .success(value): result.links = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [GithubRepository].self, source: sourceDictionary["items"] as AnyObject?) {
                
                case let .success(value): result.items = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["lastPage"] as AnyObject?) {
                
                case let .success(value): result.lastPage = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["nextPage"] as AnyObject?) {
                
                case let .success(value): result.nextPage = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["pageSize"] as AnyObject?) {
                
                case let .success(value): result.pageSize = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "GithubRepositories", actual: "\(source)"))
            }
        }
        // Decoder for GithubRepositorieslinks
        Decoders.addDecoder(clazz: GithubRepositorieslinks.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<GithubRepositorieslinks> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? GithubRepositorieslinks() : instance as! GithubRepositorieslinks
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"] as AnyObject?) {
                
                case let .success(value): result._self = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "GithubRepositorieslinks", actual: "\(source)"))
            }
        }
        // Decoder for GithubRepository
        Decoders.addDecoder(clazz: GithubRepository.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<GithubRepository> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? GithubRepository() : instance as! GithubRepository
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: GithubRepositorylinks.self, source: sourceDictionary["_links"] as AnyObject?) {
                
                case let .success(value): result.links = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["defaultBranch"] as AnyObject?) {
                
                case let .success(value): result.defaultBranch = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): result.description = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: GithubRepositorypermissions.self, source: sourceDictionary["permissions"] as AnyObject?) {
                
                case let .success(value): result.permissions = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["private"] as AnyObject?) {
                
                case let .success(value): result._private = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"] as AnyObject?) {
                
                case let .success(value): result.fullName = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "GithubRepository", actual: "\(source)"))
            }
        }
        // Decoder for GithubRepositorylinks
        Decoders.addDecoder(clazz: GithubRepositorylinks.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<GithubRepositorylinks> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? GithubRepositorylinks() : instance as! GithubRepositorylinks
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"] as AnyObject?) {
                
                case let .success(value): result._self = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "GithubRepositorylinks", actual: "\(source)"))
            }
        }
        // Decoder for GithubRepositorypermissions
        Decoders.addDecoder(clazz: GithubRepositorypermissions.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<GithubRepositorypermissions> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? GithubRepositorypermissions() : instance as! GithubRepositorypermissions
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["admin"] as AnyObject?) {
                
                case let .success(value): result.admin = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["push"] as AnyObject?) {
                
                case let .success(value): result.push = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["pull"] as AnyObject?) {
                
                case let .success(value): result.pull = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "GithubRepositorypermissions", actual: "\(source)"))
            }
        }
        // Decoder for GithubRespositoryContainer
        Decoders.addDecoder(clazz: GithubRespositoryContainer.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<GithubRespositoryContainer> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? GithubRespositoryContainer() : instance as! GithubRespositoryContainer
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: GithubRespositoryContainerlinks.self, source: sourceDictionary["_links"] as AnyObject?) {
                
                case let .success(value): result.links = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: GithubRepositories.self, source: sourceDictionary["repositories"] as AnyObject?) {
                
                case let .success(value): result.repositories = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "GithubRespositoryContainer", actual: "\(source)"))
            }
        }
        // Decoder for GithubRespositoryContainerlinks
        Decoders.addDecoder(clazz: GithubRespositoryContainerlinks.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<GithubRespositoryContainerlinks> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? GithubRespositoryContainerlinks() : instance as! GithubRespositoryContainerlinks
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"] as AnyObject?) {
                
                case let .success(value): result._self = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "GithubRespositoryContainerlinks", actual: "\(source)"))
            }
        }
        // Decoder for GithubScm
        Decoders.addDecoder(clazz: GithubScm.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<GithubScm> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? GithubScm() : instance as! GithubScm
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: GithubScmlinks.self, source: sourceDictionary["_links"] as AnyObject?) {
                
                case let .success(value): result.links = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["credentialId"] as AnyObject?) {
                
                case let .success(value): result.credentialId = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): result.id = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["uri"] as AnyObject?) {
                
                case let .success(value): result.uri = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "GithubScm", actual: "\(source)"))
            }
        }
        // Decoder for GithubScmlinks
        Decoders.addDecoder(clazz: GithubScmlinks.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<GithubScmlinks> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? GithubScmlinks() : instance as! GithubScmlinks
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"] as AnyObject?) {
                
                case let .success(value): result._self = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "GithubScmlinks", actual: "\(source)"))
            }
        }
        // Decoder for Hudson
        Decoders.addDecoder(clazz: Hudson.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Hudson> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? Hudson() : instance as! Hudson
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [HudsonassignedLabels].self, source: sourceDictionary["assignedLabels"] as AnyObject?) {
                
                case let .success(value): result.assignedLabels = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mode"] as AnyObject?) {
                
                case let .success(value): result.mode = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nodeDescription"] as AnyObject?) {
                
                case let .success(value): result.nodeDescription = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nodeName"] as AnyObject?) {
                
                case let .success(value): result.nodeName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numExecutors"] as AnyObject?) {
                
                case let .success(value): result.numExecutors = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): result.description = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [FreeStyleProject].self, source: sourceDictionary["jobs"] as AnyObject?) {
                
                case let .success(value): result.jobs = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: AllView.self, source: sourceDictionary["primaryView"] as AnyObject?) {
                
                case let .success(value): result.primaryView = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["quietingDown"] as AnyObject?) {
                
                case let .success(value): result.quietingDown = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["slaveAgentPort"] as AnyObject?) {
                
                case let .success(value): result.slaveAgentPort = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: UnlabeledLoadStatistics.self, source: sourceDictionary["unlabeledLoad"] as AnyObject?) {
                
                case let .success(value): result.unlabeledLoad = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["useCrumbs"] as AnyObject?) {
                
                case let .success(value): result.useCrumbs = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["useSecurity"] as AnyObject?) {
                
                case let .success(value): result.useSecurity = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [AllView].self, source: sourceDictionary["views"] as AnyObject?) {
                
                case let .success(value): result.views = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "Hudson", actual: "\(source)"))
            }
        }
        // Decoder for HudsonMasterComputer
        Decoders.addDecoder(clazz: HudsonMasterComputer.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<HudsonMasterComputer> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? HudsonMasterComputer() : instance as! HudsonMasterComputer
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?) {
                
                case let .success(value): result.displayName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [HudsonMasterComputerexecutors].self, source: sourceDictionary["executors"] as AnyObject?) {
                
                case let .success(value): result.executors = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icon"] as AnyObject?) {
                
                case let .success(value): result.icon = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconClassName"] as AnyObject?) {
                
                case let .success(value): result.iconClassName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["idle"] as AnyObject?) {
                
                case let .success(value): result.idle = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["jnlpAgent"] as AnyObject?) {
                
                case let .success(value): result.jnlpAgent = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["launchSupported"] as AnyObject?) {
                
                case let .success(value): result.launchSupported = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Label1.self, source: sourceDictionary["loadStatistics"] as AnyObject?) {
                
                case let .success(value): result.loadStatistics = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["manualLaunchAllowed"] as AnyObject?) {
                
                case let .success(value): result.manualLaunchAllowed = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: HudsonMasterComputermonitorData.self, source: sourceDictionary["monitorData"] as AnyObject?) {
                
                case let .success(value): result.monitorData = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numExecutors"] as AnyObject?) {
                
                case let .success(value): result.numExecutors = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["offline"] as AnyObject?) {
                
                case let .success(value): result.offline = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["offlineCause"] as AnyObject?) {
                
                case let .success(value): result.offlineCause = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["offlineCauseReason"] as AnyObject?) {
                
                case let .success(value): result.offlineCauseReason = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["temporarilyOffline"] as AnyObject?) {
                
                case let .success(value): result.temporarilyOffline = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "HudsonMasterComputer", actual: "\(source)"))
            }
        }
        // Decoder for HudsonMasterComputerexecutors
        Decoders.addDecoder(clazz: HudsonMasterComputerexecutors.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<HudsonMasterComputerexecutors> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? HudsonMasterComputerexecutors() : instance as! HudsonMasterComputerexecutors
                switch Decoders.decodeOptional(clazz: FreeStyleBuild.self, source: sourceDictionary["currentExecutable"] as AnyObject?) {
                
                case let .success(value): result.currentExecutable = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["idle"] as AnyObject?) {
                
                case let .success(value): result.idle = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["likelyStuck"] as AnyObject?) {
                
                case let .success(value): result.likelyStuck = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"] as AnyObject?) {
                
                case let .success(value): result.number = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["progress"] as AnyObject?) {
                
                case let .success(value): result.progress = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "HudsonMasterComputerexecutors", actual: "\(source)"))
            }
        }
        // Decoder for HudsonMasterComputermonitorData
        Decoders.addDecoder(clazz: HudsonMasterComputermonitorData.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<HudsonMasterComputermonitorData> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? HudsonMasterComputermonitorData() : instance as! HudsonMasterComputermonitorData
                switch Decoders.decodeOptional(clazz: SwapSpaceMonitorMemoryUsage2.self, source: sourceDictionary["hudson.node_monitors.SwapSpaceMonitor"] as AnyObject?) {
                
                case let .success(value): result.hudsonNodeMonitorsSwapSpaceMonitor = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: DiskSpaceMonitorDescriptorDiskSpace.self, source: sourceDictionary["hudson.node_monitors.TemporarySpaceMonitor"] as AnyObject?) {
                
                case let .success(value): result.hudsonNodeMonitorsTemporarySpaceMonitor = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: DiskSpaceMonitorDescriptorDiskSpace.self, source: sourceDictionary["hudson.node_monitors.DiskSpaceMonitor"] as AnyObject?) {
                
                case let .success(value): result.hudsonNodeMonitorsDiskSpaceMonitor = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hudson.node_monitors.ArchitectureMonitor"] as AnyObject?) {
                
                case let .success(value): result.hudsonNodeMonitorsArchitectureMonitor = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: ResponseTimeMonitorData.self, source: sourceDictionary["hudson.node_monitors.ResponseTimeMonitor"] as AnyObject?) {
                
                case let .success(value): result.hudsonNodeMonitorsResponseTimeMonitor = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: ClockDifference.self, source: sourceDictionary["hudson.node_monitors.ClockMonitor"] as AnyObject?) {
                
                case let .success(value): result.hudsonNodeMonitorsClockMonitor = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "HudsonMasterComputermonitorData", actual: "\(source)"))
            }
        }
        // Decoder for HudsonassignedLabels
        Decoders.addDecoder(clazz: HudsonassignedLabels.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<HudsonassignedLabels> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? HudsonassignedLabels() : instance as! HudsonassignedLabels
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "HudsonassignedLabels", actual: "\(source)"))
            }
        }
        // Decoder for InputStepImpl
        Decoders.addDecoder(clazz: InputStepImpl.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<InputStepImpl> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? InputStepImpl() : instance as! InputStepImpl
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: InputStepImpllinks.self, source: sourceDictionary["_links"] as AnyObject?) {
                
                case let .success(value): result.links = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): result.id = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?) {
                
                case let .success(value): result.message = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["ok"] as AnyObject?) {
                
                case let .success(value): result.ok = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [StringParameterDefinition].self, source: sourceDictionary["parameters"] as AnyObject?) {
                
                case let .success(value): result.parameters = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["submitter"] as AnyObject?) {
                
                case let .success(value): result.submitter = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "InputStepImpl", actual: "\(source)"))
            }
        }
        // Decoder for InputStepImpllinks
        Decoders.addDecoder(clazz: InputStepImpllinks.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<InputStepImpllinks> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? InputStepImpllinks() : instance as! InputStepImpllinks
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"] as AnyObject?) {
                
                case let .success(value): result._self = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "InputStepImpllinks", actual: "\(source)"))
            }
        }
        // Decoder for Label1
        Decoders.addDecoder(clazz: Label1.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Label1> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? Label1() : instance as! Label1
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "Label1", actual: "\(source)"))
            }
        }
        // Decoder for Link
        Decoders.addDecoder(clazz: Link.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Link> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? Link() : instance as! Link
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["href"] as AnyObject?) {
                
                case let .success(value): result.href = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "Link", actual: "\(source)"))
            }
        }
        // Decoder for ListView
        Decoders.addDecoder(clazz: ListView.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ListView> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? ListView() : instance as! ListView
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): result.description = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [FreeStyleProject].self, source: sourceDictionary["jobs"] as AnyObject?) {
                
                case let .success(value): result.jobs = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?) {
                
                case let .success(value): result.url = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "ListView", actual: "\(source)"))
            }
        }
        // Decoder for MultibranchPipeline
        Decoders.addDecoder(clazz: MultibranchPipeline.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<MultibranchPipeline> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? MultibranchPipeline() : instance as! MultibranchPipeline
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?) {
                
                case let .success(value): result.displayName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"] as AnyObject?) {
                
                case let .success(value): result.estimatedDurationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["latestRun"] as AnyObject?) {
                
                case let .success(value): result.latestRun = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?) {
                
                case let .success(value): result.organization = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"] as AnyObject?) {
                
                case let .success(value): result.weatherScore = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [String].self, source: sourceDictionary["branchNames"] as AnyObject?) {
                
                case let .success(value): result.branchNames = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfFailingBranches"] as AnyObject?) {
                
                case let .success(value): result.numberOfFailingBranches = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfFailingPullRequests"] as AnyObject?) {
                
                case let .success(value): result.numberOfFailingPullRequests = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfSuccessfulBranches"] as AnyObject?) {
                
                case let .success(value): result.numberOfSuccessfulBranches = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfSuccessfulPullRequests"] as AnyObject?) {
                
                case let .success(value): result.numberOfSuccessfulPullRequests = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalNumberOfBranches"] as AnyObject?) {
                
                case let .success(value): result.totalNumberOfBranches = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalNumberOfPullRequests"] as AnyObject?) {
                
                case let .success(value): result.totalNumberOfPullRequests = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "MultibranchPipeline", actual: "\(source)"))
            }
        }
        // Decoder for NullSCM
        Decoders.addDecoder(clazz: NullSCM.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<NullSCM> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? NullSCM() : instance as! NullSCM
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "NullSCM", actual: "\(source)"))
            }
        }
        // Decoder for Organisation
        Decoders.addDecoder(clazz: Organisation.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Organisation> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? Organisation() : instance as! Organisation
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "Organisation", actual: "\(source)"))
            }
        }
        // Decoder for Pipeline
        Decoders.addDecoder(clazz: Pipeline.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Pipeline> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? Pipeline() : instance as! Pipeline
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?) {
                
                case let .success(value): result.organization = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?) {
                
                case let .success(value): result.displayName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"] as AnyObject?) {
                
                case let .success(value): result.fullName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"] as AnyObject?) {
                
                case let .success(value): result.weatherScore = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"] as AnyObject?) {
                
                case let .success(value): result.estimatedDurationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: PipelinelatestRun.self, source: sourceDictionary["latestRun"] as AnyObject?) {
                
                case let .success(value): result.latestRun = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "Pipeline", actual: "\(source)"))
            }
        }
        // Decoder for PipelineActivity
        Decoders.addDecoder(clazz: PipelineActivity.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelineActivity> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelineActivity() : instance as! PipelineActivity
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [PipelineActivityartifacts].self, source: sourceDictionary["artifacts"] as AnyObject?) {
                
                case let .success(value): result.artifacts = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"] as AnyObject?) {
                
                case let .success(value): result.durationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"] as AnyObject?) {
                
                case let .success(value): result.estimatedDurationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enQueueTime"] as AnyObject?) {
                
                case let .success(value): result.enQueueTime = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endTime"] as AnyObject?) {
                
                case let .success(value): result.endTime = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): result.id = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?) {
                
                case let .success(value): result.organization = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pipeline"] as AnyObject?) {
                
                case let .success(value): result.pipeline = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"] as AnyObject?) {
                
                case let .success(value): result.result = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["runSummary"] as AnyObject?) {
                
                case let .success(value): result.runSummary = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"] as AnyObject?) {
                
                case let .success(value): result.startTime = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"] as AnyObject?) {
                
                case let .success(value): result.state = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): result.type = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commitId"] as AnyObject?) {
                
                case let .success(value): result.commitId = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelineActivity", actual: "\(source)"))
            }
        }
        // Decoder for PipelineActivityartifacts
        Decoders.addDecoder(clazz: PipelineActivityartifacts.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelineActivityartifacts> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelineActivityartifacts() : instance as! PipelineActivityartifacts
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?) {
                
                case let .success(value): result.size = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?) {
                
                case let .success(value): result.url = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelineActivityartifacts", actual: "\(source)"))
            }
        }
        // Decoder for PipelineBranchesitem
        Decoders.addDecoder(clazz: PipelineBranchesitem.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelineBranchesitem> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelineBranchesitem() : instance as! PipelineBranchesitem
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?) {
                
                case let .success(value): result.displayName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"] as AnyObject?) {
                
                case let .success(value): result.estimatedDurationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"] as AnyObject?) {
                
                case let .success(value): result.weatherScore = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: PipelineBranchesitemlatestRun.self, source: sourceDictionary["latestRun"] as AnyObject?) {
                
                case let .success(value): result.latestRun = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?) {
                
                case let .success(value): result.organization = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: PipelineBranchesitempullRequest.self, source: sourceDictionary["pullRequest"] as AnyObject?) {
                
                case let .success(value): result.pullRequest = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalNumberOfPullRequests"] as AnyObject?) {
                
                case let .success(value): result.totalNumberOfPullRequests = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelineBranchesitem", actual: "\(source)"))
            }
        }
        // Decoder for PipelineBranchesitemlatestRun
        Decoders.addDecoder(clazz: PipelineBranchesitemlatestRun.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelineBranchesitemlatestRun> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelineBranchesitemlatestRun() : instance as! PipelineBranchesitemlatestRun
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"] as AnyObject?) {
                
                case let .success(value): result.durationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"] as AnyObject?) {
                
                case let .success(value): result.estimatedDurationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enQueueTime"] as AnyObject?) {
                
                case let .success(value): result.enQueueTime = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endTime"] as AnyObject?) {
                
                case let .success(value): result.endTime = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): result.id = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?) {
                
                case let .success(value): result.organization = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pipeline"] as AnyObject?) {
                
                case let .success(value): result.pipeline = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"] as AnyObject?) {
                
                case let .success(value): result.result = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["runSummary"] as AnyObject?) {
                
                case let .success(value): result.runSummary = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"] as AnyObject?) {
                
                case let .success(value): result.startTime = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"] as AnyObject?) {
                
                case let .success(value): result.state = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): result.type = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commitId"] as AnyObject?) {
                
                case let .success(value): result.commitId = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelineBranchesitemlatestRun", actual: "\(source)"))
            }
        }
        // Decoder for PipelineBranchesitempullRequest
        Decoders.addDecoder(clazz: PipelineBranchesitempullRequest.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelineBranchesitempullRequest> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelineBranchesitempullRequest() : instance as! PipelineBranchesitempullRequest
                switch Decoders.decodeOptional(clazz: PipelineBranchesitempullRequestlinks.self, source: sourceDictionary["_links"] as AnyObject?) {
                
                case let .success(value): result.links = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["author"] as AnyObject?) {
                
                case let .success(value): result.author = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): result.id = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"] as AnyObject?) {
                
                case let .success(value): result.title = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?) {
                
                case let .success(value): result.url = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelineBranchesitempullRequest", actual: "\(source)"))
            }
        }
        // Decoder for PipelineBranchesitempullRequestlinks
        Decoders.addDecoder(clazz: PipelineBranchesitempullRequestlinks.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelineBranchesitempullRequestlinks> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelineBranchesitempullRequestlinks() : instance as! PipelineBranchesitempullRequestlinks
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["self"] as AnyObject?) {
                
                case let .success(value): result._self = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelineBranchesitempullRequestlinks", actual: "\(source)"))
            }
        }
        // Decoder for PipelineFolderImpl
        Decoders.addDecoder(clazz: PipelineFolderImpl.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelineFolderImpl> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelineFolderImpl() : instance as! PipelineFolderImpl
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?) {
                
                case let .success(value): result.displayName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"] as AnyObject?) {
                
                case let .success(value): result.fullName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?) {
                
                case let .success(value): result.organization = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfFolders"] as AnyObject?) {
                
                case let .success(value): result.numberOfFolders = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfPipelines"] as AnyObject?) {
                
                case let .success(value): result.numberOfPipelines = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelineFolderImpl", actual: "\(source)"))
            }
        }
        // Decoder for PipelineImpl
        Decoders.addDecoder(clazz: PipelineImpl.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelineImpl> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelineImpl() : instance as! PipelineImpl
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?) {
                
                case let .success(value): result.displayName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"] as AnyObject?) {
                
                case let .success(value): result.estimatedDurationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"] as AnyObject?) {
                
                case let .success(value): result.fullName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["latestRun"] as AnyObject?) {
                
                case let .success(value): result.latestRun = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?) {
                
                case let .success(value): result.organization = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"] as AnyObject?) {
                
                case let .success(value): result.weatherScore = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: PipelineImpllinks.self, source: sourceDictionary["_links"] as AnyObject?) {
                
                case let .success(value): result.links = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelineImpl", actual: "\(source)"))
            }
        }
        // Decoder for PipelineImpllinks
        Decoders.addDecoder(clazz: PipelineImpllinks.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelineImpllinks> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelineImpllinks() : instance as! PipelineImpllinks
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["runs"] as AnyObject?) {
                
                case let .success(value): result.runs = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"] as AnyObject?) {
                
                case let .success(value): result._self = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["queue"] as AnyObject?) {
                
                case let .success(value): result.queue = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["actions"] as AnyObject?) {
                
                case let .success(value): result.actions = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelineImpllinks", actual: "\(source)"))
            }
        }
        // Decoder for PipelineRun
        Decoders.addDecoder(clazz: PipelineRun.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelineRun> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelineRun() : instance as! PipelineRun
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [PipelineRunartifacts].self, source: sourceDictionary["artifacts"] as AnyObject?) {
                
                case let .success(value): result.artifacts = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"] as AnyObject?) {
                
                case let .success(value): result.durationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"] as AnyObject?) {
                
                case let .success(value): result.estimatedDurationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enQueueTime"] as AnyObject?) {
                
                case let .success(value): result.enQueueTime = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endTime"] as AnyObject?) {
                
                case let .success(value): result.endTime = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): result.id = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?) {
                
                case let .success(value): result.organization = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pipeline"] as AnyObject?) {
                
                case let .success(value): result.pipeline = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"] as AnyObject?) {
                
                case let .success(value): result.result = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["runSummary"] as AnyObject?) {
                
                case let .success(value): result.runSummary = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"] as AnyObject?) {
                
                case let .success(value): result.startTime = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"] as AnyObject?) {
                
                case let .success(value): result.state = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): result.type = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commitId"] as AnyObject?) {
                
                case let .success(value): result.commitId = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelineRun", actual: "\(source)"))
            }
        }
        // Decoder for PipelineRunImpl
        Decoders.addDecoder(clazz: PipelineRunImpl.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelineRunImpl> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelineRunImpl() : instance as! PipelineRunImpl
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: PipelineRunImpllinks.self, source: sourceDictionary["_links"] as AnyObject?) {
                
                case let .success(value): result.links = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"] as AnyObject?) {
                
                case let .success(value): result.durationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enQueueTime"] as AnyObject?) {
                
                case let .success(value): result.enQueueTime = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endTime"] as AnyObject?) {
                
                case let .success(value): result.endTime = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"] as AnyObject?) {
                
                case let .success(value): result.estimatedDurationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): result.id = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?) {
                
                case let .success(value): result.organization = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pipeline"] as AnyObject?) {
                
                case let .success(value): result.pipeline = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"] as AnyObject?) {
                
                case let .success(value): result.result = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["runSummary"] as AnyObject?) {
                
                case let .success(value): result.runSummary = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"] as AnyObject?) {
                
                case let .success(value): result.startTime = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"] as AnyObject?) {
                
                case let .success(value): result.state = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): result.type = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commitId"] as AnyObject?) {
                
                case let .success(value): result.commitId = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelineRunImpl", actual: "\(source)"))
            }
        }
        // Decoder for PipelineRunImpllinks
        Decoders.addDecoder(clazz: PipelineRunImpllinks.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelineRunImpllinks> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelineRunImpllinks() : instance as! PipelineRunImpllinks
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["nodes"] as AnyObject?) {
                
                case let .success(value): result.nodes = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["log"] as AnyObject?) {
                
                case let .success(value): result.log = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"] as AnyObject?) {
                
                case let .success(value): result._self = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["actions"] as AnyObject?) {
                
                case let .success(value): result.actions = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["steps"] as AnyObject?) {
                
                case let .success(value): result.steps = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelineRunImpllinks", actual: "\(source)"))
            }
        }
        // Decoder for PipelineRunNode
        Decoders.addDecoder(clazz: PipelineRunNode.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelineRunNode> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelineRunNode() : instance as! PipelineRunNode
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?) {
                
                case let .success(value): result.displayName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"] as AnyObject?) {
                
                case let .success(value): result.durationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [PipelineRunNodeedges].self, source: sourceDictionary["edges"] as AnyObject?) {
                
                case let .success(value): result.edges = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): result.id = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"] as AnyObject?) {
                
                case let .success(value): result.result = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"] as AnyObject?) {
                
                case let .success(value): result.startTime = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"] as AnyObject?) {
                
                case let .success(value): result.state = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelineRunNode", actual: "\(source)"))
            }
        }
        // Decoder for PipelineRunNodeedges
        Decoders.addDecoder(clazz: PipelineRunNodeedges.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelineRunNodeedges> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelineRunNodeedges() : instance as! PipelineRunNodeedges
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): result.id = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelineRunNodeedges", actual: "\(source)"))
            }
        }
        // Decoder for PipelineRunartifacts
        Decoders.addDecoder(clazz: PipelineRunartifacts.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelineRunartifacts> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelineRunartifacts() : instance as! PipelineRunartifacts
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?) {
                
                case let .success(value): result.size = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?) {
                
                case let .success(value): result.url = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelineRunartifacts", actual: "\(source)"))
            }
        }
        // Decoder for PipelineStepImpl
        Decoders.addDecoder(clazz: PipelineStepImpl.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelineStepImpl> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelineStepImpl() : instance as! PipelineStepImpl
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: PipelineStepImpllinks.self, source: sourceDictionary["_links"] as AnyObject?) {
                
                case let .success(value): result.links = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"] as AnyObject?) {
                
                case let .success(value): result.displayName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"] as AnyObject?) {
                
                case let .success(value): result.durationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): result.id = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: InputStepImpl.self, source: sourceDictionary["input"] as AnyObject?) {
                
                case let .success(value): result.input = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"] as AnyObject?) {
                
                case let .success(value): result.result = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"] as AnyObject?) {
                
                case let .success(value): result.startTime = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"] as AnyObject?) {
                
                case let .success(value): result.state = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelineStepImpl", actual: "\(source)"))
            }
        }
        // Decoder for PipelineStepImpllinks
        Decoders.addDecoder(clazz: PipelineStepImpllinks.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelineStepImpllinks> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelineStepImpllinks() : instance as! PipelineStepImpllinks
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["self"] as AnyObject?) {
                
                case let .success(value): result._self = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Link.self, source: sourceDictionary["actions"] as AnyObject?) {
                
                case let .success(value): result.actions = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelineStepImpllinks", actual: "\(source)"))
            }
        }
        // Decoder for PipelinelatestRun
        Decoders.addDecoder(clazz: PipelinelatestRun.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelinelatestRun> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelinelatestRun() : instance as! PipelinelatestRun
                switch Decoders.decodeOptional(clazz: [PipelinelatestRunartifacts].self, source: sourceDictionary["artifacts"] as AnyObject?) {
                
                case let .success(value): result.artifacts = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"] as AnyObject?) {
                
                case let .success(value): result.durationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"] as AnyObject?) {
                
                case let .success(value): result.estimatedDurationInMillis = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enQueueTime"] as AnyObject?) {
                
                case let .success(value): result.enQueueTime = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endTime"] as AnyObject?) {
                
                case let .success(value): result.endTime = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): result.id = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"] as AnyObject?) {
                
                case let .success(value): result.organization = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pipeline"] as AnyObject?) {
                
                case let .success(value): result.pipeline = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"] as AnyObject?) {
                
                case let .success(value): result.result = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["runSummary"] as AnyObject?) {
                
                case let .success(value): result.runSummary = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"] as AnyObject?) {
                
                case let .success(value): result.startTime = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"] as AnyObject?) {
                
                case let .success(value): result.state = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): result.type = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commitId"] as AnyObject?) {
                
                case let .success(value): result.commitId = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelinelatestRun", actual: "\(source)"))
            }
        }
        // Decoder for PipelinelatestRunartifacts
        Decoders.addDecoder(clazz: PipelinelatestRunartifacts.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<PipelinelatestRunartifacts> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? PipelinelatestRunartifacts() : instance as! PipelinelatestRunartifacts
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"] as AnyObject?) {
                
                case let .success(value): result.size = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?) {
                
                case let .success(value): result.url = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "PipelinelatestRunartifacts", actual: "\(source)"))
            }
        }
        // Decoder for Queue
        Decoders.addDecoder(clazz: Queue.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<Queue> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? Queue() : instance as! Queue
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [QueueBlockedItem].self, source: sourceDictionary["items"] as AnyObject?) {
                
                case let .success(value): result.items = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "Queue", actual: "\(source)"))
            }
        }
        // Decoder for QueueBlockedItem
        Decoders.addDecoder(clazz: QueueBlockedItem.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<QueueBlockedItem> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? QueueBlockedItem() : instance as! QueueBlockedItem
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [CauseAction].self, source: sourceDictionary["actions"] as AnyObject?) {
                
                case let .success(value): result.actions = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["blocked"] as AnyObject?) {
                
                case let .success(value): result.blocked = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["buildable"] as AnyObject?) {
                
                case let .success(value): result.buildable = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): result.id = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inQueueSince"] as AnyObject?) {
                
                case let .success(value): result.inQueueSince = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["params"] as AnyObject?) {
                
                case let .success(value): result.params = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stuck"] as AnyObject?) {
                
                case let .success(value): result.stuck = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: FreeStyleProject.self, source: sourceDictionary["task"] as AnyObject?) {
                
                case let .success(value): result.task = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?) {
                
                case let .success(value): result.url = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["why"] as AnyObject?) {
                
                case let .success(value): result.why = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["buildableStartMilliseconds"] as AnyObject?) {
                
                case let .success(value): result.buildableStartMilliseconds = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "QueueBlockedItem", actual: "\(source)"))
            }
        }
        // Decoder for QueueItemImpl
        Decoders.addDecoder(clazz: QueueItemImpl.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<QueueItemImpl> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? QueueItemImpl() : instance as! QueueItemImpl
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["expectedBuildNumber"] as AnyObject?) {
                
                case let .success(value): result.expectedBuildNumber = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): result.id = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pipeline"] as AnyObject?) {
                
                case let .success(value): result.pipeline = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["queuedTime"] as AnyObject?) {
                
                case let .success(value): result.queuedTime = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "QueueItemImpl", actual: "\(source)"))
            }
        }
        // Decoder for QueueLeftItem
        Decoders.addDecoder(clazz: QueueLeftItem.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<QueueLeftItem> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? QueueLeftItem() : instance as! QueueLeftItem
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: [CauseAction].self, source: sourceDictionary["actions"] as AnyObject?) {
                
                case let .success(value): result.actions = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["blocked"] as AnyObject?) {
                
                case let .success(value): result.blocked = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["buildable"] as AnyObject?) {
                
                case let .success(value): result.buildable = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): result.id = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inQueueSince"] as AnyObject?) {
                
                case let .success(value): result.inQueueSince = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["params"] as AnyObject?) {
                
                case let .success(value): result.params = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stuck"] as AnyObject?) {
                
                case let .success(value): result.stuck = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: FreeStyleProject.self, source: sourceDictionary["task"] as AnyObject?) {
                
                case let .success(value): result.task = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"] as AnyObject?) {
                
                case let .success(value): result.url = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["why"] as AnyObject?) {
                
                case let .success(value): result.why = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["cancelled"] as AnyObject?) {
                
                case let .success(value): result.cancelled = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: FreeStyleBuild.self, source: sourceDictionary["executable"] as AnyObject?) {
                
                case let .success(value): result.executable = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "QueueLeftItem", actual: "\(source)"))
            }
        }
        // Decoder for ResponseTimeMonitorData
        Decoders.addDecoder(clazz: ResponseTimeMonitorData.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<ResponseTimeMonitorData> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? ResponseTimeMonitorData() : instance as! ResponseTimeMonitorData
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timestamp"] as AnyObject?) {
                
                case let .success(value): result.timestamp = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["average"] as AnyObject?) {
                
                case let .success(value): result.average = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "ResponseTimeMonitorData", actual: "\(source)"))
            }
        }
        // Decoder for StringParameterDefinition
        Decoders.addDecoder(clazz: StringParameterDefinition.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<StringParameterDefinition> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? StringParameterDefinition() : instance as! StringParameterDefinition
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: StringParameterValue.self, source: sourceDictionary["defaultParameterValue"] as AnyObject?) {
                
                case let .success(value): result.defaultParameterValue = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?) {
                
                case let .success(value): result.description = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"] as AnyObject?) {
                
                case let .success(value): result.type = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "StringParameterDefinition", actual: "\(source)"))
            }
        }
        // Decoder for StringParameterValue
        Decoders.addDecoder(clazz: StringParameterValue.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<StringParameterValue> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? StringParameterValue() : instance as! StringParameterValue
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"] as AnyObject?) {
                
                case let .success(value): result.value = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "StringParameterValue", actual: "\(source)"))
            }
        }
        // Decoder for SwapSpaceMonitorMemoryUsage2
        Decoders.addDecoder(clazz: SwapSpaceMonitorMemoryUsage2.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<SwapSpaceMonitorMemoryUsage2> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? SwapSpaceMonitorMemoryUsage2() : instance as! SwapSpaceMonitorMemoryUsage2
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["availablePhysicalMemory"] as AnyObject?) {
                
                case let .success(value): result.availablePhysicalMemory = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["availableSwapSpace"] as AnyObject?) {
                
                case let .success(value): result.availableSwapSpace = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalPhysicalMemory"] as AnyObject?) {
                
                case let .success(value): result.totalPhysicalMemory = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalSwapSpace"] as AnyObject?) {
                
                case let .success(value): result.totalSwapSpace = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "SwapSpaceMonitorMemoryUsage2", actual: "\(source)"))
            }
        }
        // Decoder for UnlabeledLoadStatistics
        Decoders.addDecoder(clazz: UnlabeledLoadStatistics.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<UnlabeledLoadStatistics> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? UnlabeledLoadStatistics() : instance as! UnlabeledLoadStatistics
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "UnlabeledLoadStatistics", actual: "\(source)"))
            }
        }
        // Decoder for User
        Decoders.addDecoder(clazz: User.self) { (source: AnyObject, instance: AnyObject?) -> Decoded<User> in
            if let sourceDictionary = source as? [AnyHashable: Any] {
                let result = instance == nil ? User() : instance as! User
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"] as AnyObject?) {
                
                case let .success(value): result._class = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?) {
                
                case let .success(value): result.id = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"] as AnyObject?) {
                
                case let .success(value): result.fullName = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?) {
                
                case let .success(value): result.email = value
                case let .failure(error): return .failure(error)
                
                }
                switch Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?) {
                
                case let .success(value): result.name = value
                case let .failure(error): return .failure(error)
                
                }
                return .success(result)
            } else {
                return .failure(.typeMismatch(expected: "User", actual: "\(source)"))
            }
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
