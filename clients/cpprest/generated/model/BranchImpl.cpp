/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BranchImpl.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BranchImpl::BranchImpl()
{
    m__class = U("");
    m__classIsSet = false;
    m_DisplayName = U("");
    m_DisplayNameIsSet = false;
    m_EstimatedDurationInMillis = 0;
    m_EstimatedDurationInMillisIsSet = false;
    m_FullDisplayName = U("");
    m_FullDisplayNameIsSet = false;
    m_FullName = U("");
    m_FullNameIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_Organization = U("");
    m_OrganizationIsSet = false;
    m_ParametersIsSet = false;
    m_PermissionsIsSet = false;
    m_WeatherScore = 0;
    m_WeatherScoreIsSet = false;
    m_PullRequest = U("");
    m_PullRequestIsSet = false;
    m__linksIsSet = false;
    m_LatestRunIsSet = false;
}

BranchImpl::~BranchImpl()
{
}

void BranchImpl::validate()
{
    // TODO: implement validation
}

web::json::value BranchImpl::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[U("_class")] = ModelBase::toJson(m__class);
    }
    if(m_DisplayNameIsSet)
    {
        val[U("displayName")] = ModelBase::toJson(m_DisplayName);
    }
    if(m_EstimatedDurationInMillisIsSet)
    {
        val[U("estimatedDurationInMillis")] = ModelBase::toJson(m_EstimatedDurationInMillis);
    }
    if(m_FullDisplayNameIsSet)
    {
        val[U("fullDisplayName")] = ModelBase::toJson(m_FullDisplayName);
    }
    if(m_FullNameIsSet)
    {
        val[U("fullName")] = ModelBase::toJson(m_FullName);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_OrganizationIsSet)
    {
        val[U("organization")] = ModelBase::toJson(m_Organization);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Parameters )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("parameters")] = web::json::value::array(jsonArray);
        }
    }
    if(m_PermissionsIsSet)
    {
        val[U("permissions")] = ModelBase::toJson(m_Permissions);
    }
    if(m_WeatherScoreIsSet)
    {
        val[U("weatherScore")] = ModelBase::toJson(m_WeatherScore);
    }
    if(m_PullRequestIsSet)
    {
        val[U("pullRequest")] = ModelBase::toJson(m_PullRequest);
    }
    if(m__linksIsSet)
    {
        val[U("_links")] = ModelBase::toJson(m__links);
    }
    if(m_LatestRunIsSet)
    {
        val[U("latestRun")] = ModelBase::toJson(m_LatestRun);
    }

    return val;
}

void BranchImpl::fromJson(web::json::value& val)
{
    if(val.has_field(U("_class")))
    {
        setClass(ModelBase::stringFromJson(val[U("_class")]));
    }
    if(val.has_field(U("displayName")))
    {
        setDisplayName(ModelBase::stringFromJson(val[U("displayName")]));
    }
    if(val.has_field(U("estimatedDurationInMillis")))
    {
        setEstimatedDurationInMillis(ModelBase::int32_tFromJson(val[U("estimatedDurationInMillis")]));
    }
    if(val.has_field(U("fullDisplayName")))
    {
        setFullDisplayName(ModelBase::stringFromJson(val[U("fullDisplayName")]));
    }
    if(val.has_field(U("fullName")))
    {
        setFullName(ModelBase::stringFromJson(val[U("fullName")]));
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
    }
    if(val.has_field(U("organization")))
    {
        setOrganization(ModelBase::stringFromJson(val[U("organization")]));
    }
    {
        m_Parameters.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("parameters")))
        {
        for( auto& item : val[U("parameters")].as_array() )
        {
            if(item.is_null())
            {
                m_Parameters.push_back( std::shared_ptr<StringParameterDefinition>(nullptr) );
            }
            else
            {
                std::shared_ptr<StringParameterDefinition> newItem(new StringParameterDefinition());
                newItem->fromJson(item);
                m_Parameters.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("permissions")))
    {
        if(!val[U("permissions")].is_null())
        {
            std::shared_ptr<BranchImplpermissions> newItem(new BranchImplpermissions());
            newItem->fromJson(val[U("permissions")]);
            setPermissions( newItem );
        }
    }
    if(val.has_field(U("weatherScore")))
    {
        setWeatherScore(ModelBase::int32_tFromJson(val[U("weatherScore")]));
    }
    if(val.has_field(U("pullRequest")))
    {
        setPullRequest(ModelBase::stringFromJson(val[U("pullRequest")]));
    }
    if(val.has_field(U("_links")))
    {
        if(!val[U("_links")].is_null())
        {
            std::shared_ptr<BranchImpllinks> newItem(new BranchImpllinks());
            newItem->fromJson(val[U("_links")]);
            setLinks( newItem );
        }
    }
    if(val.has_field(U("latestRun")))
    {
        if(!val[U("latestRun")].is_null())
        {
            std::shared_ptr<PipelineRunImpl> newItem(new PipelineRunImpl());
            newItem->fromJson(val[U("latestRun")]);
            setLatestRun( newItem );
        }
    }
}

void BranchImpl::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("_class"), m__class));
        
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("displayName"), m_DisplayName));
        
    }
    if(m_EstimatedDurationInMillisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("estimatedDurationInMillis"), m_EstimatedDurationInMillis));
    }
    if(m_FullDisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("fullDisplayName"), m_FullDisplayName));
        
    }
    if(m_FullNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("fullName"), m_FullName));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_OrganizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("organization"), m_Organization));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Parameters )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("parameters"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_PermissionsIsSet)
    {
        if (m_Permissions.get())
        {
            m_Permissions->toMultipart(multipart, U("permissions."));
        }
        
    }
    if(m_WeatherScoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("weatherScore"), m_WeatherScore));
    }
    if(m_PullRequestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("pullRequest"), m_PullRequest));
        
    }
    if(m__linksIsSet)
    {
        if (m__links.get())
        {
            m__links->toMultipart(multipart, U("_links."));
        }
        
    }
    if(m_LatestRunIsSet)
    {
        if (m_LatestRun.get())
        {
            m_LatestRun->toMultipart(multipart, U("latestRun."));
        }
        
    }
}

void BranchImpl::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(U("_class"))));
    }
    if(multipart->hasContent(U("displayName")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(U("displayName"))));
    }
    if(multipart->hasContent(U("estimatedDurationInMillis")))
    {
        setEstimatedDurationInMillis(ModelBase::int32_tFromHttpContent(multipart->getContent(U("estimatedDurationInMillis"))));
    }
    if(multipart->hasContent(U("fullDisplayName")))
    {
        setFullDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(U("fullDisplayName"))));
    }
    if(multipart->hasContent(U("fullName")))
    {
        setFullName(ModelBase::stringFromHttpContent(multipart->getContent(U("fullName"))));
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    }
    if(multipart->hasContent(U("organization")))
    {
        setOrganization(ModelBase::stringFromHttpContent(multipart->getContent(U("organization"))));
    }
    {
        m_Parameters.clear();
        if(multipart->hasContent(U("parameters")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("parameters"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Parameters.push_back( std::shared_ptr<StringParameterDefinition>(nullptr) );
            }
            else
            {
                std::shared_ptr<StringParameterDefinition> newItem(new StringParameterDefinition());
                newItem->fromJson(item);
                m_Parameters.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("permissions")))
    {
        if(multipart->hasContent(U("permissions")))
        {
            std::shared_ptr<BranchImplpermissions> newItem(new BranchImplpermissions());
            newItem->fromMultiPart(multipart, U("permissions."));
            setPermissions( newItem );
        }
    }
    if(multipart->hasContent(U("weatherScore")))
    {
        setWeatherScore(ModelBase::int32_tFromHttpContent(multipart->getContent(U("weatherScore"))));
    }
    if(multipart->hasContent(U("pullRequest")))
    {
        setPullRequest(ModelBase::stringFromHttpContent(multipart->getContent(U("pullRequest"))));
    }
    if(multipart->hasContent(U("_links")))
    {
        if(multipart->hasContent(U("_links")))
        {
            std::shared_ptr<BranchImpllinks> newItem(new BranchImpllinks());
            newItem->fromMultiPart(multipart, U("_links."));
            setLinks( newItem );
        }
    }
    if(multipart->hasContent(U("latestRun")))
    {
        if(multipart->hasContent(U("latestRun")))
        {
            std::shared_ptr<PipelineRunImpl> newItem(new PipelineRunImpl());
            newItem->fromMultiPart(multipart, U("latestRun."));
            setLatestRun( newItem );
        }
    }
}

utility::string_t BranchImpl::getClass() const
{
    return m__class;
}


void BranchImpl::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool BranchImpl::classIsSet() const
{
    return m__classIsSet;
}

void BranchImpl::unset_class()
{
    m__classIsSet = false;
}

utility::string_t BranchImpl::getDisplayName() const
{
    return m_DisplayName;
}


void BranchImpl::setDisplayName(utility::string_t value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool BranchImpl::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void BranchImpl::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}

int32_t BranchImpl::getEstimatedDurationInMillis() const
{
    return m_EstimatedDurationInMillis;
}


void BranchImpl::setEstimatedDurationInMillis(int32_t value)
{
    m_EstimatedDurationInMillis = value;
    m_EstimatedDurationInMillisIsSet = true;
}
bool BranchImpl::estimatedDurationInMillisIsSet() const
{
    return m_EstimatedDurationInMillisIsSet;
}

void BranchImpl::unsetEstimatedDurationInMillis()
{
    m_EstimatedDurationInMillisIsSet = false;
}

utility::string_t BranchImpl::getFullDisplayName() const
{
    return m_FullDisplayName;
}


void BranchImpl::setFullDisplayName(utility::string_t value)
{
    m_FullDisplayName = value;
    m_FullDisplayNameIsSet = true;
}
bool BranchImpl::fullDisplayNameIsSet() const
{
    return m_FullDisplayNameIsSet;
}

void BranchImpl::unsetFullDisplayName()
{
    m_FullDisplayNameIsSet = false;
}

utility::string_t BranchImpl::getFullName() const
{
    return m_FullName;
}


void BranchImpl::setFullName(utility::string_t value)
{
    m_FullName = value;
    m_FullNameIsSet = true;
}
bool BranchImpl::fullNameIsSet() const
{
    return m_FullNameIsSet;
}

void BranchImpl::unsetFullName()
{
    m_FullNameIsSet = false;
}

utility::string_t BranchImpl::getName() const
{
    return m_Name;
}


void BranchImpl::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool BranchImpl::nameIsSet() const
{
    return m_NameIsSet;
}

void BranchImpl::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t BranchImpl::getOrganization() const
{
    return m_Organization;
}


void BranchImpl::setOrganization(utility::string_t value)
{
    m_Organization = value;
    m_OrganizationIsSet = true;
}
bool BranchImpl::organizationIsSet() const
{
    return m_OrganizationIsSet;
}

void BranchImpl::unsetOrganization()
{
    m_OrganizationIsSet = false;
}

std::vector<std::shared_ptr<StringParameterDefinition>>& BranchImpl::getParameters()
{
    return m_Parameters;
}

void BranchImpl::setParameters(std::vector<std::shared_ptr<StringParameterDefinition>> value)
{
    m_Parameters = value;
    m_ParametersIsSet = true;
}
bool BranchImpl::parametersIsSet() const
{
    return m_ParametersIsSet;
}

void BranchImpl::unsetParameters()
{
    m_ParametersIsSet = false;
}

std::shared_ptr<BranchImplpermissions> BranchImpl::getPermissions() const
{
    return m_Permissions;
}


void BranchImpl::setPermissions(std::shared_ptr<BranchImplpermissions> value)
{
    m_Permissions = value;
    m_PermissionsIsSet = true;
}
bool BranchImpl::permissionsIsSet() const
{
    return m_PermissionsIsSet;
}

void BranchImpl::unsetPermissions()
{
    m_PermissionsIsSet = false;
}

int32_t BranchImpl::getWeatherScore() const
{
    return m_WeatherScore;
}


void BranchImpl::setWeatherScore(int32_t value)
{
    m_WeatherScore = value;
    m_WeatherScoreIsSet = true;
}
bool BranchImpl::weatherScoreIsSet() const
{
    return m_WeatherScoreIsSet;
}

void BranchImpl::unsetWeatherScore()
{
    m_WeatherScoreIsSet = false;
}

utility::string_t BranchImpl::getPullRequest() const
{
    return m_PullRequest;
}


void BranchImpl::setPullRequest(utility::string_t value)
{
    m_PullRequest = value;
    m_PullRequestIsSet = true;
}
bool BranchImpl::pullRequestIsSet() const
{
    return m_PullRequestIsSet;
}

void BranchImpl::unsetPullRequest()
{
    m_PullRequestIsSet = false;
}

std::shared_ptr<BranchImpllinks> BranchImpl::getLinks() const
{
    return m__links;
}


void BranchImpl::setLinks(std::shared_ptr<BranchImpllinks> value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool BranchImpl::linksIsSet() const
{
    return m__linksIsSet;
}

void BranchImpl::unset_links()
{
    m__linksIsSet = false;
}

std::shared_ptr<PipelineRunImpl> BranchImpl::getLatestRun() const
{
    return m_LatestRun;
}


void BranchImpl::setLatestRun(std::shared_ptr<PipelineRunImpl> value)
{
    m_LatestRun = value;
    m_LatestRunIsSet = true;
}
bool BranchImpl::latestRunIsSet() const
{
    return m_LatestRunIsSet;
}

void BranchImpl::unsetLatestRun()
{
    m_LatestRunIsSet = false;
}

}
}
}
}

