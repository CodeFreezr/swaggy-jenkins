/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Hudsonnode_monitorsSwapSpaceMonitorMemoryUsage2.h
 *
 * 
 */

#ifndef Hudsonnode_monitorsSwapSpaceMonitorMemoryUsage2_H_
#define Hudsonnode_monitorsSwapSpaceMonitorMemoryUsage2_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  Hudsonnode_monitorsSwapSpaceMonitorMemoryUsage2
    : public ModelBase
{
public:
    Hudsonnode_monitorsSwapSpaceMonitorMemoryUsage2();
    virtual ~Hudsonnode_monitorsSwapSpaceMonitorMemoryUsage2();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Hudsonnode_monitorsSwapSpaceMonitorMemoryUsage2 members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClass() const;
    void setClass(utility::string_t value);
    bool _classIsSet() const;
    void unset_class();
    /// <summary>
    /// 
    /// </summary>
    int32_t getAvailablePhysicalMemory() const;
    void setAvailablePhysicalMemory(int32_t value);
    bool availablePhysicalMemoryIsSet() const;
    void unsetAvailablePhysicalMemory();
    /// <summary>
    /// 
    /// </summary>
    int32_t getAvailableSwapSpace() const;
    void setAvailableSwapSpace(int32_t value);
    bool availableSwapSpaceIsSet() const;
    void unsetAvailableSwapSpace();
    /// <summary>
    /// 
    /// </summary>
    int32_t getTotalPhysicalMemory() const;
    void setTotalPhysicalMemory(int32_t value);
    bool totalPhysicalMemoryIsSet() const;
    void unsetTotalPhysicalMemory();
    /// <summary>
    /// 
    /// </summary>
    int32_t getTotalSwapSpace() const;
    void setTotalSwapSpace(int32_t value);
    bool totalSwapSpaceIsSet() const;
    void unsetTotalSwapSpace();

protected:
    utility::string_t m__class;
    bool m__classIsSet;
int32_t m_AvailablePhysicalMemory;
    bool m_AvailablePhysicalMemoryIsSet;
int32_t m_AvailableSwapSpace;
    bool m_AvailableSwapSpaceIsSet;
int32_t m_TotalPhysicalMemory;
    bool m_TotalPhysicalMemoryIsSet;
int32_t m_TotalSwapSpace;
    bool m_TotalSwapSpaceIsSet;
};

}
}
}
}

#endif /* Hudsonnode_monitorsSwapSpaceMonitorMemoryUsage2_H_ */
