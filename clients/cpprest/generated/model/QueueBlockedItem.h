/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * QueueBlockedItem.h
 *
 * 
 */

#ifndef QueueBlockedItem_H_
#define QueueBlockedItem_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CauseAction.h"
#include "FreeStyleProject.h"
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// 
/// </summary>
class  QueueBlockedItem
    : public ModelBase
{
public:
    QueueBlockedItem();
    virtual ~QueueBlockedItem();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// QueueBlockedItem members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClass() const;
    bool classIsSet() const;
    void unset_class();
    void setClass(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<CauseAction>>& getActions();
    bool actionsIsSet() const;
    void unsetActions();
    void setActions(std::vector<std::shared_ptr<CauseAction>> value);
    /// <summary>
    /// 
    /// </summary>
    bool getBlocked() const;
    bool blockedIsSet() const;
    void unsetBlocked();
    void setBlocked(bool value);
    /// <summary>
    /// 
    /// </summary>
    bool getBuildable() const;
    bool buildableIsSet() const;
    void unsetBuildable();
    void setBuildable(bool value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();
    void setId(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getInQueueSince() const;
    bool inQueueSinceIsSet() const;
    void unsetInQueueSince();
    void setInQueueSince(int32_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getParams() const;
    bool paramsIsSet() const;
    void unsetParams();
    void setParams(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    bool getStuck() const;
    bool stuckIsSet() const;
    void unsetStuck();
    void setStuck(bool value);
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FreeStyleProject> getTask() const;
    bool taskIsSet() const;
    void unsetTask();
    void setTask(std::shared_ptr<FreeStyleProject> value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUrl() const;
    bool urlIsSet() const;
    void unsetUrl();
    void setUrl(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWhy() const;
    bool whyIsSet() const;
    void unsetWhy();
    void setWhy(utility::string_t value);
    /// <summary>
    /// 
    /// </summary>
    int32_t getBuildableStartMilliseconds() const;
    bool buildableStartMillisecondsIsSet() const;
    void unsetBuildableStartMilliseconds();
    void setBuildableStartMilliseconds(int32_t value);

protected:
    utility::string_t m__class;
    bool m__classIsSet;
    std::vector<std::shared_ptr<CauseAction>> m_Actions;
    bool m_ActionsIsSet;
    bool m_Blocked;
    bool m_BlockedIsSet;
    bool m_Buildable;
    bool m_BuildableIsSet;
    int32_t m_Id;
    bool m_IdIsSet;
    int32_t m_InQueueSince;
    bool m_InQueueSinceIsSet;
    utility::string_t m_Params;
    bool m_ParamsIsSet;
    bool m_Stuck;
    bool m_StuckIsSet;
    std::shared_ptr<FreeStyleProject> m_Task;
    bool m_TaskIsSet;
    utility::string_t m_Url;
    bool m_UrlIsSet;
    utility::string_t m_Why;
    bool m_WhyIsSet;
    int32_t m_BuildableStartMilliseconds;
    bool m_BuildableStartMillisecondsIsSet;
};

}
}
}
}

#endif /* QueueBlockedItem_H_ */
