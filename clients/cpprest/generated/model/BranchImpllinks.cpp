/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BranchImpllinks.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

BranchImpllinks::BranchImpllinks()
{
    m_SelfIsSet = false;
    m_ActionsIsSet = false;
    m_RunsIsSet = false;
    m_QueueIsSet = false;
    m__class = U("");
    m__classIsSet = false;
}

BranchImpllinks::~BranchImpllinks()
{
}

void BranchImpllinks::validate()
{
    // TODO: implement validation
}

web::json::value BranchImpllinks::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_SelfIsSet)
    {
        val[U("self")] = ModelBase::toJson(m_Self);
    }
    if(m_ActionsIsSet)
    {
        val[U("actions")] = ModelBase::toJson(m_Actions);
    }
    if(m_RunsIsSet)
    {
        val[U("runs")] = ModelBase::toJson(m_Runs);
    }
    if(m_QueueIsSet)
    {
        val[U("queue")] = ModelBase::toJson(m_Queue);
    }
    if(m__classIsSet)
    {
        val[U("_class")] = ModelBase::toJson(m__class);
    }

    return val;
}

void BranchImpllinks::fromJson(web::json::value& val)
{
    if(val.has_field(U("self")))
    {
        if(!val[U("self")].is_null())
        {
            std::shared_ptr<Link> newItem(new Link());
            newItem->fromJson(val[U("self")]);
            setSelf( newItem );
        }
    }
    if(val.has_field(U("actions")))
    {
        if(!val[U("actions")].is_null())
        {
            std::shared_ptr<Link> newItem(new Link());
            newItem->fromJson(val[U("actions")]);
            setActions( newItem );
        }
    }
    if(val.has_field(U("runs")))
    {
        if(!val[U("runs")].is_null())
        {
            std::shared_ptr<Link> newItem(new Link());
            newItem->fromJson(val[U("runs")]);
            setRuns( newItem );
        }
    }
    if(val.has_field(U("queue")))
    {
        if(!val[U("queue")].is_null())
        {
            std::shared_ptr<Link> newItem(new Link());
            newItem->fromJson(val[U("queue")]);
            setQueue( newItem );
        }
    }
    if(val.has_field(U("_class")))
    {
        setClass(ModelBase::stringFromJson(val[U("_class")]));
    }
}

void BranchImpllinks::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_SelfIsSet)
    {
        if (m_Self.get())
        {
            m_Self->toMultipart(multipart, U("self."));
        }
        
    }
    if(m_ActionsIsSet)
    {
        if (m_Actions.get())
        {
            m_Actions->toMultipart(multipart, U("actions."));
        }
        
    }
    if(m_RunsIsSet)
    {
        if (m_Runs.get())
        {
            m_Runs->toMultipart(multipart, U("runs."));
        }
        
    }
    if(m_QueueIsSet)
    {
        if (m_Queue.get())
        {
            m_Queue->toMultipart(multipart, U("queue."));
        }
        
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("_class"), m__class));
        
    }
}

void BranchImpllinks::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("self")))
    {
        if(multipart->hasContent(U("self")))
        {
            std::shared_ptr<Link> newItem(new Link());
            newItem->fromMultiPart(multipart, U("self."));
            setSelf( newItem );
        }
    }
    if(multipart->hasContent(U("actions")))
    {
        if(multipart->hasContent(U("actions")))
        {
            std::shared_ptr<Link> newItem(new Link());
            newItem->fromMultiPart(multipart, U("actions."));
            setActions( newItem );
        }
    }
    if(multipart->hasContent(U("runs")))
    {
        if(multipart->hasContent(U("runs")))
        {
            std::shared_ptr<Link> newItem(new Link());
            newItem->fromMultiPart(multipart, U("runs."));
            setRuns( newItem );
        }
    }
    if(multipart->hasContent(U("queue")))
    {
        if(multipart->hasContent(U("queue")))
        {
            std::shared_ptr<Link> newItem(new Link());
            newItem->fromMultiPart(multipart, U("queue."));
            setQueue( newItem );
        }
    }
    if(multipart->hasContent(U("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(U("_class"))));
    }
}

std::shared_ptr<Link> BranchImpllinks::getSelf() const
{
    return m_Self;
}


void BranchImpllinks::setSelf(std::shared_ptr<Link> value)
{
    m_Self = value;
    m_SelfIsSet = true;
}
bool BranchImpllinks::selfIsSet() const
{
    return m_SelfIsSet;
}

void BranchImpllinks::unsetSelf()
{
    m_SelfIsSet = false;
}

std::shared_ptr<Link> BranchImpllinks::getActions() const
{
    return m_Actions;
}


void BranchImpllinks::setActions(std::shared_ptr<Link> value)
{
    m_Actions = value;
    m_ActionsIsSet = true;
}
bool BranchImpllinks::actionsIsSet() const
{
    return m_ActionsIsSet;
}

void BranchImpllinks::unsetActions()
{
    m_ActionsIsSet = false;
}

std::shared_ptr<Link> BranchImpllinks::getRuns() const
{
    return m_Runs;
}


void BranchImpllinks::setRuns(std::shared_ptr<Link> value)
{
    m_Runs = value;
    m_RunsIsSet = true;
}
bool BranchImpllinks::runsIsSet() const
{
    return m_RunsIsSet;
}

void BranchImpllinks::unsetRuns()
{
    m_RunsIsSet = false;
}

std::shared_ptr<Link> BranchImpllinks::getQueue() const
{
    return m_Queue;
}


void BranchImpllinks::setQueue(std::shared_ptr<Link> value)
{
    m_Queue = value;
    m_QueueIsSet = true;
}
bool BranchImpllinks::queueIsSet() const
{
    return m_QueueIsSet;
}

void BranchImpllinks::unsetQueue()
{
    m_QueueIsSet = false;
}

utility::string_t BranchImpllinks::getClass() const
{
    return m__class;
}


void BranchImpllinks::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool BranchImpllinks::classIsSet() const
{
    return m__classIsSet;
}

void BranchImpllinks::unset_class()
{
    m__classIsSet = false;
}

}
}
}
}

