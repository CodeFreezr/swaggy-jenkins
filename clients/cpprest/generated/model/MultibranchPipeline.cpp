/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "MultibranchPipeline.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

MultibranchPipeline::MultibranchPipeline()
{
    m_DisplayName = U("");
    m_DisplayNameIsSet = false;
    m_EstimatedDurationInMillis = 0;
    m_EstimatedDurationInMillisIsSet = false;
    m_LatestRun = U("");
    m_LatestRunIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_Organization = U("");
    m_OrganizationIsSet = false;
    m_WeatherScore = 0;
    m_WeatherScoreIsSet = false;
    m_BranchNamesIsSet = false;
    m_NumberOfFailingBranches = 0;
    m_NumberOfFailingBranchesIsSet = false;
    m_NumberOfFailingPullRequests = 0;
    m_NumberOfFailingPullRequestsIsSet = false;
    m_NumberOfSuccessfulBranches = 0;
    m_NumberOfSuccessfulBranchesIsSet = false;
    m_NumberOfSuccessfulPullRequests = 0;
    m_NumberOfSuccessfulPullRequestsIsSet = false;
    m_TotalNumberOfBranches = 0;
    m_TotalNumberOfBranchesIsSet = false;
    m_TotalNumberOfPullRequests = 0;
    m_TotalNumberOfPullRequestsIsSet = false;
    m__class = U("");
    m__classIsSet = false;
}

MultibranchPipeline::~MultibranchPipeline()
{
}

void MultibranchPipeline::validate()
{
    // TODO: implement validation
}

web::json::value MultibranchPipeline::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_DisplayNameIsSet)
    {
        val[U("displayName")] = ModelBase::toJson(m_DisplayName);
    }
    if(m_EstimatedDurationInMillisIsSet)
    {
        val[U("estimatedDurationInMillis")] = ModelBase::toJson(m_EstimatedDurationInMillis);
    }
    if(m_LatestRunIsSet)
    {
        val[U("latestRun")] = ModelBase::toJson(m_LatestRun);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_OrganizationIsSet)
    {
        val[U("organization")] = ModelBase::toJson(m_Organization);
    }
    if(m_WeatherScoreIsSet)
    {
        val[U("weatherScore")] = ModelBase::toJson(m_WeatherScore);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_BranchNames )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("branchNames")] = web::json::value::array(jsonArray);
        }
    }
    if(m_NumberOfFailingBranchesIsSet)
    {
        val[U("numberOfFailingBranches")] = ModelBase::toJson(m_NumberOfFailingBranches);
    }
    if(m_NumberOfFailingPullRequestsIsSet)
    {
        val[U("numberOfFailingPullRequests")] = ModelBase::toJson(m_NumberOfFailingPullRequests);
    }
    if(m_NumberOfSuccessfulBranchesIsSet)
    {
        val[U("numberOfSuccessfulBranches")] = ModelBase::toJson(m_NumberOfSuccessfulBranches);
    }
    if(m_NumberOfSuccessfulPullRequestsIsSet)
    {
        val[U("numberOfSuccessfulPullRequests")] = ModelBase::toJson(m_NumberOfSuccessfulPullRequests);
    }
    if(m_TotalNumberOfBranchesIsSet)
    {
        val[U("totalNumberOfBranches")] = ModelBase::toJson(m_TotalNumberOfBranches);
    }
    if(m_TotalNumberOfPullRequestsIsSet)
    {
        val[U("totalNumberOfPullRequests")] = ModelBase::toJson(m_TotalNumberOfPullRequests);
    }
    if(m__classIsSet)
    {
        val[U("_class")] = ModelBase::toJson(m__class);
    }

    return val;
}

void MultibranchPipeline::fromJson(web::json::value& val)
{
    if(val.has_field(U("displayName")))
    {
        setDisplayName(ModelBase::stringFromJson(val[U("displayName")]));
    }
    if(val.has_field(U("estimatedDurationInMillis")))
    {
        setEstimatedDurationInMillis(ModelBase::int32_tFromJson(val[U("estimatedDurationInMillis")]));
    }
    if(val.has_field(U("latestRun")))
    {
        setLatestRun(ModelBase::stringFromJson(val[U("latestRun")]));
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
    }
    if(val.has_field(U("organization")))
    {
        setOrganization(ModelBase::stringFromJson(val[U("organization")]));
    }
    if(val.has_field(U("weatherScore")))
    {
        setWeatherScore(ModelBase::int32_tFromJson(val[U("weatherScore")]));
    }
    {
        m_BranchNames.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("branchNames")))
        {
        for( auto& item : val[U("branchNames")].as_array() )
        {
            m_BranchNames.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(val.has_field(U("numberOfFailingBranches")))
    {
        setNumberOfFailingBranches(ModelBase::int32_tFromJson(val[U("numberOfFailingBranches")]));
    }
    if(val.has_field(U("numberOfFailingPullRequests")))
    {
        setNumberOfFailingPullRequests(ModelBase::int32_tFromJson(val[U("numberOfFailingPullRequests")]));
    }
    if(val.has_field(U("numberOfSuccessfulBranches")))
    {
        setNumberOfSuccessfulBranches(ModelBase::int32_tFromJson(val[U("numberOfSuccessfulBranches")]));
    }
    if(val.has_field(U("numberOfSuccessfulPullRequests")))
    {
        setNumberOfSuccessfulPullRequests(ModelBase::int32_tFromJson(val[U("numberOfSuccessfulPullRequests")]));
    }
    if(val.has_field(U("totalNumberOfBranches")))
    {
        setTotalNumberOfBranches(ModelBase::int32_tFromJson(val[U("totalNumberOfBranches")]));
    }
    if(val.has_field(U("totalNumberOfPullRequests")))
    {
        setTotalNumberOfPullRequests(ModelBase::int32_tFromJson(val[U("totalNumberOfPullRequests")]));
    }
    if(val.has_field(U("_class")))
    {
        setClass(ModelBase::stringFromJson(val[U("_class")]));
    }
}

void MultibranchPipeline::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("displayName"), m_DisplayName));
        
    }
    if(m_EstimatedDurationInMillisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("estimatedDurationInMillis"), m_EstimatedDurationInMillis));
    }
    if(m_LatestRunIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("latestRun"), m_LatestRun));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_OrganizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("organization"), m_Organization));
        
    }
    if(m_WeatherScoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("weatherScore"), m_WeatherScore));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_BranchNames )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("branchNames"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_NumberOfFailingBranchesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("numberOfFailingBranches"), m_NumberOfFailingBranches));
    }
    if(m_NumberOfFailingPullRequestsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("numberOfFailingPullRequests"), m_NumberOfFailingPullRequests));
    }
    if(m_NumberOfSuccessfulBranchesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("numberOfSuccessfulBranches"), m_NumberOfSuccessfulBranches));
    }
    if(m_NumberOfSuccessfulPullRequestsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("numberOfSuccessfulPullRequests"), m_NumberOfSuccessfulPullRequests));
    }
    if(m_TotalNumberOfBranchesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("totalNumberOfBranches"), m_TotalNumberOfBranches));
    }
    if(m_TotalNumberOfPullRequestsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("totalNumberOfPullRequests"), m_TotalNumberOfPullRequests));
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("_class"), m__class));
        
    }
}

void MultibranchPipeline::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("displayName")))
    {
        setDisplayName(ModelBase::stringFromHttpContent(multipart->getContent(U("displayName"))));
    }
    if(multipart->hasContent(U("estimatedDurationInMillis")))
    {
        setEstimatedDurationInMillis(ModelBase::int32_tFromHttpContent(multipart->getContent(U("estimatedDurationInMillis"))));
    }
    if(multipart->hasContent(U("latestRun")))
    {
        setLatestRun(ModelBase::stringFromHttpContent(multipart->getContent(U("latestRun"))));
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    }
    if(multipart->hasContent(U("organization")))
    {
        setOrganization(ModelBase::stringFromHttpContent(multipart->getContent(U("organization"))));
    }
    if(multipart->hasContent(U("weatherScore")))
    {
        setWeatherScore(ModelBase::int32_tFromHttpContent(multipart->getContent(U("weatherScore"))));
    }
    {
        m_BranchNames.clear();
        if(multipart->hasContent(U("branchNames")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("branchNames"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_BranchNames.push_back(ModelBase::stringFromJson(item));
        }
        }
    }
    if(multipart->hasContent(U("numberOfFailingBranches")))
    {
        setNumberOfFailingBranches(ModelBase::int32_tFromHttpContent(multipart->getContent(U("numberOfFailingBranches"))));
    }
    if(multipart->hasContent(U("numberOfFailingPullRequests")))
    {
        setNumberOfFailingPullRequests(ModelBase::int32_tFromHttpContent(multipart->getContent(U("numberOfFailingPullRequests"))));
    }
    if(multipart->hasContent(U("numberOfSuccessfulBranches")))
    {
        setNumberOfSuccessfulBranches(ModelBase::int32_tFromHttpContent(multipart->getContent(U("numberOfSuccessfulBranches"))));
    }
    if(multipart->hasContent(U("numberOfSuccessfulPullRequests")))
    {
        setNumberOfSuccessfulPullRequests(ModelBase::int32_tFromHttpContent(multipart->getContent(U("numberOfSuccessfulPullRequests"))));
    }
    if(multipart->hasContent(U("totalNumberOfBranches")))
    {
        setTotalNumberOfBranches(ModelBase::int32_tFromHttpContent(multipart->getContent(U("totalNumberOfBranches"))));
    }
    if(multipart->hasContent(U("totalNumberOfPullRequests")))
    {
        setTotalNumberOfPullRequests(ModelBase::int32_tFromHttpContent(multipart->getContent(U("totalNumberOfPullRequests"))));
    }
    if(multipart->hasContent(U("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(U("_class"))));
    }
}

utility::string_t MultibranchPipeline::getDisplayName() const
{
    return m_DisplayName;
}


void MultibranchPipeline::setDisplayName(utility::string_t value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}
bool MultibranchPipeline::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void MultibranchPipeline::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}

int32_t MultibranchPipeline::getEstimatedDurationInMillis() const
{
    return m_EstimatedDurationInMillis;
}


void MultibranchPipeline::setEstimatedDurationInMillis(int32_t value)
{
    m_EstimatedDurationInMillis = value;
    m_EstimatedDurationInMillisIsSet = true;
}
bool MultibranchPipeline::estimatedDurationInMillisIsSet() const
{
    return m_EstimatedDurationInMillisIsSet;
}

void MultibranchPipeline::unsetEstimatedDurationInMillis()
{
    m_EstimatedDurationInMillisIsSet = false;
}

utility::string_t MultibranchPipeline::getLatestRun() const
{
    return m_LatestRun;
}


void MultibranchPipeline::setLatestRun(utility::string_t value)
{
    m_LatestRun = value;
    m_LatestRunIsSet = true;
}
bool MultibranchPipeline::latestRunIsSet() const
{
    return m_LatestRunIsSet;
}

void MultibranchPipeline::unsetLatestRun()
{
    m_LatestRunIsSet = false;
}

utility::string_t MultibranchPipeline::getName() const
{
    return m_Name;
}


void MultibranchPipeline::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool MultibranchPipeline::nameIsSet() const
{
    return m_NameIsSet;
}

void MultibranchPipeline::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t MultibranchPipeline::getOrganization() const
{
    return m_Organization;
}


void MultibranchPipeline::setOrganization(utility::string_t value)
{
    m_Organization = value;
    m_OrganizationIsSet = true;
}
bool MultibranchPipeline::organizationIsSet() const
{
    return m_OrganizationIsSet;
}

void MultibranchPipeline::unsetOrganization()
{
    m_OrganizationIsSet = false;
}

int32_t MultibranchPipeline::getWeatherScore() const
{
    return m_WeatherScore;
}


void MultibranchPipeline::setWeatherScore(int32_t value)
{
    m_WeatherScore = value;
    m_WeatherScoreIsSet = true;
}
bool MultibranchPipeline::weatherScoreIsSet() const
{
    return m_WeatherScoreIsSet;
}

void MultibranchPipeline::unsetWeatherScore()
{
    m_WeatherScoreIsSet = false;
}

std::vector<utility::string_t>& MultibranchPipeline::getBranchNames()
{
    return m_BranchNames;
}

void MultibranchPipeline::setBranchNames(std::vector<utility::string_t> value)
{
    m_BranchNames = value;
    m_BranchNamesIsSet = true;
}
bool MultibranchPipeline::branchNamesIsSet() const
{
    return m_BranchNamesIsSet;
}

void MultibranchPipeline::unsetBranchNames()
{
    m_BranchNamesIsSet = false;
}

int32_t MultibranchPipeline::getNumberOfFailingBranches() const
{
    return m_NumberOfFailingBranches;
}


void MultibranchPipeline::setNumberOfFailingBranches(int32_t value)
{
    m_NumberOfFailingBranches = value;
    m_NumberOfFailingBranchesIsSet = true;
}
bool MultibranchPipeline::numberOfFailingBranchesIsSet() const
{
    return m_NumberOfFailingBranchesIsSet;
}

void MultibranchPipeline::unsetNumberOfFailingBranches()
{
    m_NumberOfFailingBranchesIsSet = false;
}

int32_t MultibranchPipeline::getNumberOfFailingPullRequests() const
{
    return m_NumberOfFailingPullRequests;
}


void MultibranchPipeline::setNumberOfFailingPullRequests(int32_t value)
{
    m_NumberOfFailingPullRequests = value;
    m_NumberOfFailingPullRequestsIsSet = true;
}
bool MultibranchPipeline::numberOfFailingPullRequestsIsSet() const
{
    return m_NumberOfFailingPullRequestsIsSet;
}

void MultibranchPipeline::unsetNumberOfFailingPullRequests()
{
    m_NumberOfFailingPullRequestsIsSet = false;
}

int32_t MultibranchPipeline::getNumberOfSuccessfulBranches() const
{
    return m_NumberOfSuccessfulBranches;
}


void MultibranchPipeline::setNumberOfSuccessfulBranches(int32_t value)
{
    m_NumberOfSuccessfulBranches = value;
    m_NumberOfSuccessfulBranchesIsSet = true;
}
bool MultibranchPipeline::numberOfSuccessfulBranchesIsSet() const
{
    return m_NumberOfSuccessfulBranchesIsSet;
}

void MultibranchPipeline::unsetNumberOfSuccessfulBranches()
{
    m_NumberOfSuccessfulBranchesIsSet = false;
}

int32_t MultibranchPipeline::getNumberOfSuccessfulPullRequests() const
{
    return m_NumberOfSuccessfulPullRequests;
}


void MultibranchPipeline::setNumberOfSuccessfulPullRequests(int32_t value)
{
    m_NumberOfSuccessfulPullRequests = value;
    m_NumberOfSuccessfulPullRequestsIsSet = true;
}
bool MultibranchPipeline::numberOfSuccessfulPullRequestsIsSet() const
{
    return m_NumberOfSuccessfulPullRequestsIsSet;
}

void MultibranchPipeline::unsetNumberOfSuccessfulPullRequests()
{
    m_NumberOfSuccessfulPullRequestsIsSet = false;
}

int32_t MultibranchPipeline::getTotalNumberOfBranches() const
{
    return m_TotalNumberOfBranches;
}


void MultibranchPipeline::setTotalNumberOfBranches(int32_t value)
{
    m_TotalNumberOfBranches = value;
    m_TotalNumberOfBranchesIsSet = true;
}
bool MultibranchPipeline::totalNumberOfBranchesIsSet() const
{
    return m_TotalNumberOfBranchesIsSet;
}

void MultibranchPipeline::unsetTotalNumberOfBranches()
{
    m_TotalNumberOfBranchesIsSet = false;
}

int32_t MultibranchPipeline::getTotalNumberOfPullRequests() const
{
    return m_TotalNumberOfPullRequests;
}


void MultibranchPipeline::setTotalNumberOfPullRequests(int32_t value)
{
    m_TotalNumberOfPullRequests = value;
    m_TotalNumberOfPullRequestsIsSet = true;
}
bool MultibranchPipeline::totalNumberOfPullRequestsIsSet() const
{
    return m_TotalNumberOfPullRequestsIsSet;
}

void MultibranchPipeline::unsetTotalNumberOfPullRequests()
{
    m_TotalNumberOfPullRequestsIsSet = false;
}

utility::string_t MultibranchPipeline::getClass() const
{
    return m__class;
}


void MultibranchPipeline::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool MultibranchPipeline::classIsSet() const
{
    return m__classIsSet;
}

void MultibranchPipeline::unset_class()
{
    m__classIsSet = false;
}

}
}
}
}

