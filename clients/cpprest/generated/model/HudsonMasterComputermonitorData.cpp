/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "HudsonMasterComputermonitorData.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

HudsonMasterComputermonitorData::HudsonMasterComputermonitorData()
{
    m_Hudson_node_monitors_SwapSpaceMonitorIsSet = false;
    m_Hudson_node_monitors_TemporarySpaceMonitorIsSet = false;
    m_Hudson_node_monitors_DiskSpaceMonitorIsSet = false;
    m_Hudson_node_monitors_ArchitectureMonitor = U("");
    m_Hudson_node_monitors_ArchitectureMonitorIsSet = false;
    m_Hudson_node_monitors_ResponseTimeMonitorIsSet = false;
    m_Hudson_node_monitors_ClockMonitorIsSet = false;
    m__class = U("");
    m__classIsSet = false;
}

HudsonMasterComputermonitorData::~HudsonMasterComputermonitorData()
{
}

void HudsonMasterComputermonitorData::validate()
{
    // TODO: implement validation
}

web::json::value HudsonMasterComputermonitorData::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_Hudson_node_monitors_SwapSpaceMonitorIsSet)
    {
        val[U("hudson.node_monitors.SwapSpaceMonitor")] = ModelBase::toJson(m_Hudson_node_monitors_SwapSpaceMonitor);
    }
    if(m_Hudson_node_monitors_TemporarySpaceMonitorIsSet)
    {
        val[U("hudson.node_monitors.TemporarySpaceMonitor")] = ModelBase::toJson(m_Hudson_node_monitors_TemporarySpaceMonitor);
    }
    if(m_Hudson_node_monitors_DiskSpaceMonitorIsSet)
    {
        val[U("hudson.node_monitors.DiskSpaceMonitor")] = ModelBase::toJson(m_Hudson_node_monitors_DiskSpaceMonitor);
    }
    if(m_Hudson_node_monitors_ArchitectureMonitorIsSet)
    {
        val[U("hudson.node_monitors.ArchitectureMonitor")] = ModelBase::toJson(m_Hudson_node_monitors_ArchitectureMonitor);
    }
    if(m_Hudson_node_monitors_ResponseTimeMonitorIsSet)
    {
        val[U("hudson.node_monitors.ResponseTimeMonitor")] = ModelBase::toJson(m_Hudson_node_monitors_ResponseTimeMonitor);
    }
    if(m_Hudson_node_monitors_ClockMonitorIsSet)
    {
        val[U("hudson.node_monitors.ClockMonitor")] = ModelBase::toJson(m_Hudson_node_monitors_ClockMonitor);
    }
    if(m__classIsSet)
    {
        val[U("_class")] = ModelBase::toJson(m__class);
    }

    return val;
}

void HudsonMasterComputermonitorData::fromJson(web::json::value& val)
{
    if(val.has_field(U("hudson.node_monitors.SwapSpaceMonitor")))
    {
        if(!val[U("hudson.node_monitors.SwapSpaceMonitor")].is_null())
        {
            std::shared_ptr<SwapSpaceMonitorMemoryUsage2> newItem(new SwapSpaceMonitorMemoryUsage2());
            newItem->fromJson(val[U("hudson.node_monitors.SwapSpaceMonitor")]);
            setHudsonNodeMonitorsSwapSpaceMonitor( newItem );
        }
    }
    if(val.has_field(U("hudson.node_monitors.TemporarySpaceMonitor")))
    {
        if(!val[U("hudson.node_monitors.TemporarySpaceMonitor")].is_null())
        {
            std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> newItem(new DiskSpaceMonitorDescriptorDiskSpace());
            newItem->fromJson(val[U("hudson.node_monitors.TemporarySpaceMonitor")]);
            setHudsonNodeMonitorsTemporarySpaceMonitor( newItem );
        }
    }
    if(val.has_field(U("hudson.node_monitors.DiskSpaceMonitor")))
    {
        if(!val[U("hudson.node_monitors.DiskSpaceMonitor")].is_null())
        {
            std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> newItem(new DiskSpaceMonitorDescriptorDiskSpace());
            newItem->fromJson(val[U("hudson.node_monitors.DiskSpaceMonitor")]);
            setHudsonNodeMonitorsDiskSpaceMonitor( newItem );
        }
    }
    if(val.has_field(U("hudson.node_monitors.ArchitectureMonitor")))
    {
        setHudsonNodeMonitorsArchitectureMonitor(ModelBase::stringFromJson(val[U("hudson.node_monitors.ArchitectureMonitor")]));
    }
    if(val.has_field(U("hudson.node_monitors.ResponseTimeMonitor")))
    {
        if(!val[U("hudson.node_monitors.ResponseTimeMonitor")].is_null())
        {
            std::shared_ptr<ResponseTimeMonitorData> newItem(new ResponseTimeMonitorData());
            newItem->fromJson(val[U("hudson.node_monitors.ResponseTimeMonitor")]);
            setHudsonNodeMonitorsResponseTimeMonitor( newItem );
        }
    }
    if(val.has_field(U("hudson.node_monitors.ClockMonitor")))
    {
        if(!val[U("hudson.node_monitors.ClockMonitor")].is_null())
        {
            std::shared_ptr<ClockDifference> newItem(new ClockDifference());
            newItem->fromJson(val[U("hudson.node_monitors.ClockMonitor")]);
            setHudsonNodeMonitorsClockMonitor( newItem );
        }
    }
    if(val.has_field(U("_class")))
    {
        setClass(ModelBase::stringFromJson(val[U("_class")]));
    }
}

void HudsonMasterComputermonitorData::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_Hudson_node_monitors_SwapSpaceMonitorIsSet)
    {
        if (m_Hudson_node_monitors_SwapSpaceMonitor.get())
        {
            m_Hudson_node_monitors_SwapSpaceMonitor->toMultipart(multipart, U("hudson.node_monitors.SwapSpaceMonitor."));
        }
        
    }
    if(m_Hudson_node_monitors_TemporarySpaceMonitorIsSet)
    {
        if (m_Hudson_node_monitors_TemporarySpaceMonitor.get())
        {
            m_Hudson_node_monitors_TemporarySpaceMonitor->toMultipart(multipart, U("hudson.node_monitors.TemporarySpaceMonitor."));
        }
        
    }
    if(m_Hudson_node_monitors_DiskSpaceMonitorIsSet)
    {
        if (m_Hudson_node_monitors_DiskSpaceMonitor.get())
        {
            m_Hudson_node_monitors_DiskSpaceMonitor->toMultipart(multipart, U("hudson.node_monitors.DiskSpaceMonitor."));
        }
        
    }
    if(m_Hudson_node_monitors_ArchitectureMonitorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("hudson.node_monitors.ArchitectureMonitor"), m_Hudson_node_monitors_ArchitectureMonitor));
        
    }
    if(m_Hudson_node_monitors_ResponseTimeMonitorIsSet)
    {
        if (m_Hudson_node_monitors_ResponseTimeMonitor.get())
        {
            m_Hudson_node_monitors_ResponseTimeMonitor->toMultipart(multipart, U("hudson.node_monitors.ResponseTimeMonitor."));
        }
        
    }
    if(m_Hudson_node_monitors_ClockMonitorIsSet)
    {
        if (m_Hudson_node_monitors_ClockMonitor.get())
        {
            m_Hudson_node_monitors_ClockMonitor->toMultipart(multipart, U("hudson.node_monitors.ClockMonitor."));
        }
        
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("_class"), m__class));
        
    }
}

void HudsonMasterComputermonitorData::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("hudson.node_monitors.SwapSpaceMonitor")))
    {
        if(multipart->hasContent(U("hudson.node_monitors.SwapSpaceMonitor")))
        {
            std::shared_ptr<SwapSpaceMonitorMemoryUsage2> newItem(new SwapSpaceMonitorMemoryUsage2());
            newItem->fromMultiPart(multipart, U("hudson.node_monitors.SwapSpaceMonitor."));
            setHudsonNodeMonitorsSwapSpaceMonitor( newItem );
        }
    }
    if(multipart->hasContent(U("hudson.node_monitors.TemporarySpaceMonitor")))
    {
        if(multipart->hasContent(U("hudson.node_monitors.TemporarySpaceMonitor")))
        {
            std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> newItem(new DiskSpaceMonitorDescriptorDiskSpace());
            newItem->fromMultiPart(multipart, U("hudson.node_monitors.TemporarySpaceMonitor."));
            setHudsonNodeMonitorsTemporarySpaceMonitor( newItem );
        }
    }
    if(multipart->hasContent(U("hudson.node_monitors.DiskSpaceMonitor")))
    {
        if(multipart->hasContent(U("hudson.node_monitors.DiskSpaceMonitor")))
        {
            std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> newItem(new DiskSpaceMonitorDescriptorDiskSpace());
            newItem->fromMultiPart(multipart, U("hudson.node_monitors.DiskSpaceMonitor."));
            setHudsonNodeMonitorsDiskSpaceMonitor( newItem );
        }
    }
    if(multipart->hasContent(U("hudson.node_monitors.ArchitectureMonitor")))
    {
        setHudsonNodeMonitorsArchitectureMonitor(ModelBase::stringFromHttpContent(multipart->getContent(U("hudson.node_monitors.ArchitectureMonitor"))));
    }
    if(multipart->hasContent(U("hudson.node_monitors.ResponseTimeMonitor")))
    {
        if(multipart->hasContent(U("hudson.node_monitors.ResponseTimeMonitor")))
        {
            std::shared_ptr<ResponseTimeMonitorData> newItem(new ResponseTimeMonitorData());
            newItem->fromMultiPart(multipart, U("hudson.node_monitors.ResponseTimeMonitor."));
            setHudsonNodeMonitorsResponseTimeMonitor( newItem );
        }
    }
    if(multipart->hasContent(U("hudson.node_monitors.ClockMonitor")))
    {
        if(multipart->hasContent(U("hudson.node_monitors.ClockMonitor")))
        {
            std::shared_ptr<ClockDifference> newItem(new ClockDifference());
            newItem->fromMultiPart(multipart, U("hudson.node_monitors.ClockMonitor."));
            setHudsonNodeMonitorsClockMonitor( newItem );
        }
    }
    if(multipart->hasContent(U("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(U("_class"))));
    }
}

std::shared_ptr<SwapSpaceMonitorMemoryUsage2> HudsonMasterComputermonitorData::getHudsonNodeMonitorsSwapSpaceMonitor() const
{
    return m_Hudson_node_monitors_SwapSpaceMonitor;
}


void HudsonMasterComputermonitorData::setHudsonNodeMonitorsSwapSpaceMonitor(std::shared_ptr<SwapSpaceMonitorMemoryUsage2> value)
{
    m_Hudson_node_monitors_SwapSpaceMonitor = value;
    m_Hudson_node_monitors_SwapSpaceMonitorIsSet = true;
}
bool HudsonMasterComputermonitorData::hudsonNodeMonitorsSwapSpaceMonitorIsSet() const
{
    return m_Hudson_node_monitors_SwapSpaceMonitorIsSet;
}

void HudsonMasterComputermonitorData::unsetHudson_node_monitors_SwapSpaceMonitor()
{
    m_Hudson_node_monitors_SwapSpaceMonitorIsSet = false;
}

std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> HudsonMasterComputermonitorData::getHudsonNodeMonitorsTemporarySpaceMonitor() const
{
    return m_Hudson_node_monitors_TemporarySpaceMonitor;
}


void HudsonMasterComputermonitorData::setHudsonNodeMonitorsTemporarySpaceMonitor(std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> value)
{
    m_Hudson_node_monitors_TemporarySpaceMonitor = value;
    m_Hudson_node_monitors_TemporarySpaceMonitorIsSet = true;
}
bool HudsonMasterComputermonitorData::hudsonNodeMonitorsTemporarySpaceMonitorIsSet() const
{
    return m_Hudson_node_monitors_TemporarySpaceMonitorIsSet;
}

void HudsonMasterComputermonitorData::unsetHudson_node_monitors_TemporarySpaceMonitor()
{
    m_Hudson_node_monitors_TemporarySpaceMonitorIsSet = false;
}

std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> HudsonMasterComputermonitorData::getHudsonNodeMonitorsDiskSpaceMonitor() const
{
    return m_Hudson_node_monitors_DiskSpaceMonitor;
}


void HudsonMasterComputermonitorData::setHudsonNodeMonitorsDiskSpaceMonitor(std::shared_ptr<DiskSpaceMonitorDescriptorDiskSpace> value)
{
    m_Hudson_node_monitors_DiskSpaceMonitor = value;
    m_Hudson_node_monitors_DiskSpaceMonitorIsSet = true;
}
bool HudsonMasterComputermonitorData::hudsonNodeMonitorsDiskSpaceMonitorIsSet() const
{
    return m_Hudson_node_monitors_DiskSpaceMonitorIsSet;
}

void HudsonMasterComputermonitorData::unsetHudson_node_monitors_DiskSpaceMonitor()
{
    m_Hudson_node_monitors_DiskSpaceMonitorIsSet = false;
}

utility::string_t HudsonMasterComputermonitorData::getHudsonNodeMonitorsArchitectureMonitor() const
{
    return m_Hudson_node_monitors_ArchitectureMonitor;
}


void HudsonMasterComputermonitorData::setHudsonNodeMonitorsArchitectureMonitor(utility::string_t value)
{
    m_Hudson_node_monitors_ArchitectureMonitor = value;
    m_Hudson_node_monitors_ArchitectureMonitorIsSet = true;
}
bool HudsonMasterComputermonitorData::hudsonNodeMonitorsArchitectureMonitorIsSet() const
{
    return m_Hudson_node_monitors_ArchitectureMonitorIsSet;
}

void HudsonMasterComputermonitorData::unsetHudson_node_monitors_ArchitectureMonitor()
{
    m_Hudson_node_monitors_ArchitectureMonitorIsSet = false;
}

std::shared_ptr<ResponseTimeMonitorData> HudsonMasterComputermonitorData::getHudsonNodeMonitorsResponseTimeMonitor() const
{
    return m_Hudson_node_monitors_ResponseTimeMonitor;
}


void HudsonMasterComputermonitorData::setHudsonNodeMonitorsResponseTimeMonitor(std::shared_ptr<ResponseTimeMonitorData> value)
{
    m_Hudson_node_monitors_ResponseTimeMonitor = value;
    m_Hudson_node_monitors_ResponseTimeMonitorIsSet = true;
}
bool HudsonMasterComputermonitorData::hudsonNodeMonitorsResponseTimeMonitorIsSet() const
{
    return m_Hudson_node_monitors_ResponseTimeMonitorIsSet;
}

void HudsonMasterComputermonitorData::unsetHudson_node_monitors_ResponseTimeMonitor()
{
    m_Hudson_node_monitors_ResponseTimeMonitorIsSet = false;
}

std::shared_ptr<ClockDifference> HudsonMasterComputermonitorData::getHudsonNodeMonitorsClockMonitor() const
{
    return m_Hudson_node_monitors_ClockMonitor;
}


void HudsonMasterComputermonitorData::setHudsonNodeMonitorsClockMonitor(std::shared_ptr<ClockDifference> value)
{
    m_Hudson_node_monitors_ClockMonitor = value;
    m_Hudson_node_monitors_ClockMonitorIsSet = true;
}
bool HudsonMasterComputermonitorData::hudsonNodeMonitorsClockMonitorIsSet() const
{
    return m_Hudson_node_monitors_ClockMonitorIsSet;
}

void HudsonMasterComputermonitorData::unsetHudson_node_monitors_ClockMonitor()
{
    m_Hudson_node_monitors_ClockMonitorIsSet = false;
}

utility::string_t HudsonMasterComputermonitorData::getClass() const
{
    return m__class;
}


void HudsonMasterComputermonitorData::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool HudsonMasterComputermonitorData::classIsSet() const
{
    return m__classIsSet;
}

void HudsonMasterComputermonitorData::unset_class()
{
    m__classIsSet = false;
}

}
}
}
}

