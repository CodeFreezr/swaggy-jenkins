/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "QueueBlockedItem.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

QueueBlockedItem::QueueBlockedItem()
{
    m__class = U("");
    m__classIsSet = false;
    m_ActionsIsSet = false;
    m_Blocked = false;
    m_BlockedIsSet = false;
    m_Buildable = false;
    m_BuildableIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_InQueueSince = 0;
    m_InQueueSinceIsSet = false;
    m_Params = U("");
    m_ParamsIsSet = false;
    m_Stuck = false;
    m_StuckIsSet = false;
    m_TaskIsSet = false;
    m_Url = U("");
    m_UrlIsSet = false;
    m_Why = U("");
    m_WhyIsSet = false;
    m_BuildableStartMilliseconds = 0;
    m_BuildableStartMillisecondsIsSet = false;
}

QueueBlockedItem::~QueueBlockedItem()
{
}

void QueueBlockedItem::validate()
{
    // TODO: implement validation
}

web::json::value QueueBlockedItem::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[U("_class")] = ModelBase::toJson(m__class);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Actions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("actions")] = web::json::value::array(jsonArray);
        }
    }
    if(m_BlockedIsSet)
    {
        val[U("blocked")] = ModelBase::toJson(m_Blocked);
    }
    if(m_BuildableIsSet)
    {
        val[U("buildable")] = ModelBase::toJson(m_Buildable);
    }
    if(m_IdIsSet)
    {
        val[U("id")] = ModelBase::toJson(m_Id);
    }
    if(m_InQueueSinceIsSet)
    {
        val[U("inQueueSince")] = ModelBase::toJson(m_InQueueSince);
    }
    if(m_ParamsIsSet)
    {
        val[U("params")] = ModelBase::toJson(m_Params);
    }
    if(m_StuckIsSet)
    {
        val[U("stuck")] = ModelBase::toJson(m_Stuck);
    }
    if(m_TaskIsSet)
    {
        val[U("task")] = ModelBase::toJson(m_Task);
    }
    if(m_UrlIsSet)
    {
        val[U("url")] = ModelBase::toJson(m_Url);
    }
    if(m_WhyIsSet)
    {
        val[U("why")] = ModelBase::toJson(m_Why);
    }
    if(m_BuildableStartMillisecondsIsSet)
    {
        val[U("buildableStartMilliseconds")] = ModelBase::toJson(m_BuildableStartMilliseconds);
    }

    return val;
}

void QueueBlockedItem::fromJson(web::json::value& val)
{
    if(val.has_field(U("_class")))
    {
        setClass(ModelBase::stringFromJson(val[U("_class")]));
    }
    {
        m_Actions.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("actions")))
        {
        for( auto& item : val[U("actions")].as_array() )
        {
            if(item.is_null())
            {
                m_Actions.push_back( std::shared_ptr<CauseAction>(nullptr) );
            }
            else
            {
                std::shared_ptr<CauseAction> newItem(new CauseAction());
                newItem->fromJson(item);
                m_Actions.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("blocked")))
    {
        setBlocked(ModelBase::boolFromJson(val[U("blocked")]));
    }
    if(val.has_field(U("buildable")))
    {
        setBuildable(ModelBase::boolFromJson(val[U("buildable")]));
    }
    if(val.has_field(U("id")))
    {
        setId(ModelBase::int32_tFromJson(val[U("id")]));
    }
    if(val.has_field(U("inQueueSince")))
    {
        setInQueueSince(ModelBase::int32_tFromJson(val[U("inQueueSince")]));
    }
    if(val.has_field(U("params")))
    {
        setParams(ModelBase::stringFromJson(val[U("params")]));
    }
    if(val.has_field(U("stuck")))
    {
        setStuck(ModelBase::boolFromJson(val[U("stuck")]));
    }
    if(val.has_field(U("task")))
    {
        if(!val[U("task")].is_null())
        {
            std::shared_ptr<FreeStyleProject> newItem(new FreeStyleProject());
            newItem->fromJson(val[U("task")]);
            setTask( newItem );
        }
    }
    if(val.has_field(U("url")))
    {
        setUrl(ModelBase::stringFromJson(val[U("url")]));
    }
    if(val.has_field(U("why")))
    {
        setWhy(ModelBase::stringFromJson(val[U("why")]));
    }
    if(val.has_field(U("buildableStartMilliseconds")))
    {
        setBuildableStartMilliseconds(ModelBase::int32_tFromJson(val[U("buildableStartMilliseconds")]));
    }
}

void QueueBlockedItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("_class"), m__class));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Actions )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("actions"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_BlockedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("blocked"), m_Blocked));
    }
    if(m_BuildableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("buildable"), m_Buildable));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("id"), m_Id));
    }
    if(m_InQueueSinceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("inQueueSince"), m_InQueueSince));
    }
    if(m_ParamsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("params"), m_Params));
        
    }
    if(m_StuckIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("stuck"), m_Stuck));
    }
    if(m_TaskIsSet)
    {
        if (m_Task.get())
        {
            m_Task->toMultipart(multipart, U("task."));
        }
        
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("url"), m_Url));
        
    }
    if(m_WhyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("why"), m_Why));
        
    }
    if(m_BuildableStartMillisecondsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("buildableStartMilliseconds"), m_BuildableStartMilliseconds));
    }
}

void QueueBlockedItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(U("_class"))));
    }
    {
        m_Actions.clear();
        if(multipart->hasContent(U("actions")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("actions"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_Actions.push_back( std::shared_ptr<CauseAction>(nullptr) );
            }
            else
            {
                std::shared_ptr<CauseAction> newItem(new CauseAction());
                newItem->fromJson(item);
                m_Actions.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("blocked")))
    {
        setBlocked(ModelBase::boolFromHttpContent(multipart->getContent(U("blocked"))));
    }
    if(multipart->hasContent(U("buildable")))
    {
        setBuildable(ModelBase::boolFromHttpContent(multipart->getContent(U("buildable"))));
    }
    if(multipart->hasContent(U("id")))
    {
        setId(ModelBase::int32_tFromHttpContent(multipart->getContent(U("id"))));
    }
    if(multipart->hasContent(U("inQueueSince")))
    {
        setInQueueSince(ModelBase::int32_tFromHttpContent(multipart->getContent(U("inQueueSince"))));
    }
    if(multipart->hasContent(U("params")))
    {
        setParams(ModelBase::stringFromHttpContent(multipart->getContent(U("params"))));
    }
    if(multipart->hasContent(U("stuck")))
    {
        setStuck(ModelBase::boolFromHttpContent(multipart->getContent(U("stuck"))));
    }
    if(multipart->hasContent(U("task")))
    {
        if(multipart->hasContent(U("task")))
        {
            std::shared_ptr<FreeStyleProject> newItem(new FreeStyleProject());
            newItem->fromMultiPart(multipart, U("task."));
            setTask( newItem );
        }
    }
    if(multipart->hasContent(U("url")))
    {
        setUrl(ModelBase::stringFromHttpContent(multipart->getContent(U("url"))));
    }
    if(multipart->hasContent(U("why")))
    {
        setWhy(ModelBase::stringFromHttpContent(multipart->getContent(U("why"))));
    }
    if(multipart->hasContent(U("buildableStartMilliseconds")))
    {
        setBuildableStartMilliseconds(ModelBase::int32_tFromHttpContent(multipart->getContent(U("buildableStartMilliseconds"))));
    }
}

utility::string_t QueueBlockedItem::getClass() const
{
    return m__class;
}


void QueueBlockedItem::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool QueueBlockedItem::classIsSet() const
{
    return m__classIsSet;
}

void QueueBlockedItem::unset_class()
{
    m__classIsSet = false;
}

std::vector<std::shared_ptr<CauseAction>>& QueueBlockedItem::getActions()
{
    return m_Actions;
}

void QueueBlockedItem::setActions(std::vector<std::shared_ptr<CauseAction>> value)
{
    m_Actions = value;
    m_ActionsIsSet = true;
}
bool QueueBlockedItem::actionsIsSet() const
{
    return m_ActionsIsSet;
}

void QueueBlockedItem::unsetActions()
{
    m_ActionsIsSet = false;
}

bool QueueBlockedItem::getBlocked() const
{
    return m_Blocked;
}


void QueueBlockedItem::setBlocked(bool value)
{
    m_Blocked = value;
    m_BlockedIsSet = true;
}
bool QueueBlockedItem::blockedIsSet() const
{
    return m_BlockedIsSet;
}

void QueueBlockedItem::unsetBlocked()
{
    m_BlockedIsSet = false;
}

bool QueueBlockedItem::getBuildable() const
{
    return m_Buildable;
}


void QueueBlockedItem::setBuildable(bool value)
{
    m_Buildable = value;
    m_BuildableIsSet = true;
}
bool QueueBlockedItem::buildableIsSet() const
{
    return m_BuildableIsSet;
}

void QueueBlockedItem::unsetBuildable()
{
    m_BuildableIsSet = false;
}

int32_t QueueBlockedItem::getId() const
{
    return m_Id;
}


void QueueBlockedItem::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}
bool QueueBlockedItem::idIsSet() const
{
    return m_IdIsSet;
}

void QueueBlockedItem::unsetId()
{
    m_IdIsSet = false;
}

int32_t QueueBlockedItem::getInQueueSince() const
{
    return m_InQueueSince;
}


void QueueBlockedItem::setInQueueSince(int32_t value)
{
    m_InQueueSince = value;
    m_InQueueSinceIsSet = true;
}
bool QueueBlockedItem::inQueueSinceIsSet() const
{
    return m_InQueueSinceIsSet;
}

void QueueBlockedItem::unsetInQueueSince()
{
    m_InQueueSinceIsSet = false;
}

utility::string_t QueueBlockedItem::getParams() const
{
    return m_Params;
}


void QueueBlockedItem::setParams(utility::string_t value)
{
    m_Params = value;
    m_ParamsIsSet = true;
}
bool QueueBlockedItem::paramsIsSet() const
{
    return m_ParamsIsSet;
}

void QueueBlockedItem::unsetParams()
{
    m_ParamsIsSet = false;
}

bool QueueBlockedItem::getStuck() const
{
    return m_Stuck;
}


void QueueBlockedItem::setStuck(bool value)
{
    m_Stuck = value;
    m_StuckIsSet = true;
}
bool QueueBlockedItem::stuckIsSet() const
{
    return m_StuckIsSet;
}

void QueueBlockedItem::unsetStuck()
{
    m_StuckIsSet = false;
}

std::shared_ptr<FreeStyleProject> QueueBlockedItem::getTask() const
{
    return m_Task;
}


void QueueBlockedItem::setTask(std::shared_ptr<FreeStyleProject> value)
{
    m_Task = value;
    m_TaskIsSet = true;
}
bool QueueBlockedItem::taskIsSet() const
{
    return m_TaskIsSet;
}

void QueueBlockedItem::unsetTask()
{
    m_TaskIsSet = false;
}

utility::string_t QueueBlockedItem::getUrl() const
{
    return m_Url;
}


void QueueBlockedItem::setUrl(utility::string_t value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool QueueBlockedItem::urlIsSet() const
{
    return m_UrlIsSet;
}

void QueueBlockedItem::unsetUrl()
{
    m_UrlIsSet = false;
}

utility::string_t QueueBlockedItem::getWhy() const
{
    return m_Why;
}


void QueueBlockedItem::setWhy(utility::string_t value)
{
    m_Why = value;
    m_WhyIsSet = true;
}
bool QueueBlockedItem::whyIsSet() const
{
    return m_WhyIsSet;
}

void QueueBlockedItem::unsetWhy()
{
    m_WhyIsSet = false;
}

int32_t QueueBlockedItem::getBuildableStartMilliseconds() const
{
    return m_BuildableStartMilliseconds;
}


void QueueBlockedItem::setBuildableStartMilliseconds(int32_t value)
{
    m_BuildableStartMilliseconds = value;
    m_BuildableStartMillisecondsIsSet = true;
}
bool QueueBlockedItem::buildableStartMillisecondsIsSet() const
{
    return m_BuildableStartMillisecondsIsSet;
}

void QueueBlockedItem::unsetBuildableStartMilliseconds()
{
    m_BuildableStartMillisecondsIsSet = false;
}

}
}
}
}

