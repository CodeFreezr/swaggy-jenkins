/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "PipelinelatestRunartifacts.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

PipelinelatestRunartifacts::PipelinelatestRunartifacts()
{
    m_Name = U("");
    m_NameIsSet = false;
    m_Size = 0;
    m_SizeIsSet = false;
    m_Url = U("");
    m_UrlIsSet = false;
    m__class = U("");
    m__classIsSet = false;
}

PipelinelatestRunartifacts::~PipelinelatestRunartifacts()
{
}

void PipelinelatestRunartifacts::validate()
{
    // TODO: implement validation
}

web::json::value PipelinelatestRunartifacts::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_SizeIsSet)
    {
        val[U("size")] = ModelBase::toJson(m_Size);
    }
    if(m_UrlIsSet)
    {
        val[U("url")] = ModelBase::toJson(m_Url);
    }
    if(m__classIsSet)
    {
        val[U("_class")] = ModelBase::toJson(m__class);
    }

    return val;
}

void PipelinelatestRunartifacts::fromJson(web::json::value& val)
{
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
    }
    if(val.has_field(U("size")))
    {
        setSize(ModelBase::int32_tFromJson(val[U("size")]));
    }
    if(val.has_field(U("url")))
    {
        setUrl(ModelBase::stringFromJson(val[U("url")]));
    }
    if(val.has_field(U("_class")))
    {
        setClass(ModelBase::stringFromJson(val[U("_class")]));
    }
}

void PipelinelatestRunartifacts::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("size"), m_Size));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("url"), m_Url));
        
    }
    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("_class"), m__class));
        
    }
}

void PipelinelatestRunartifacts::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    }
    if(multipart->hasContent(U("size")))
    {
        setSize(ModelBase::int32_tFromHttpContent(multipart->getContent(U("size"))));
    }
    if(multipart->hasContent(U("url")))
    {
        setUrl(ModelBase::stringFromHttpContent(multipart->getContent(U("url"))));
    }
    if(multipart->hasContent(U("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(U("_class"))));
    }
}

utility::string_t PipelinelatestRunartifacts::getName() const
{
    return m_Name;
}


void PipelinelatestRunartifacts::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool PipelinelatestRunartifacts::nameIsSet() const
{
    return m_NameIsSet;
}

void PipelinelatestRunartifacts::unsetName()
{
    m_NameIsSet = false;
}

int32_t PipelinelatestRunartifacts::getSize() const
{
    return m_Size;
}


void PipelinelatestRunartifacts::setSize(int32_t value)
{
    m_Size = value;
    m_SizeIsSet = true;
}
bool PipelinelatestRunartifacts::sizeIsSet() const
{
    return m_SizeIsSet;
}

void PipelinelatestRunartifacts::unsetSize()
{
    m_SizeIsSet = false;
}

utility::string_t PipelinelatestRunartifacts::getUrl() const
{
    return m_Url;
}


void PipelinelatestRunartifacts::setUrl(utility::string_t value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool PipelinelatestRunartifacts::urlIsSet() const
{
    return m_UrlIsSet;
}

void PipelinelatestRunartifacts::unsetUrl()
{
    m_UrlIsSet = false;
}

utility::string_t PipelinelatestRunartifacts::getClass() const
{
    return m__class;
}


void PipelinelatestRunartifacts::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool PipelinelatestRunartifacts::classIsSet() const
{
    return m__classIsSet;
}

void PipelinelatestRunartifacts::unset_class()
{
    m__classIsSet = false;
}

}
}
}
}

