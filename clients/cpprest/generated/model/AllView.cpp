/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "AllView.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

AllView::AllView()
{
    m__class = U("");
    m__classIsSet = false;
    m_Name = U("");
    m_NameIsSet = false;
    m_Url = U("");
    m_UrlIsSet = false;
}

AllView::~AllView()
{
}

void AllView::validate()
{
    // TODO: implement validation
}

web::json::value AllView::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[U("_class")] = ModelBase::toJson(m__class);
    }
    if(m_NameIsSet)
    {
        val[U("name")] = ModelBase::toJson(m_Name);
    }
    if(m_UrlIsSet)
    {
        val[U("url")] = ModelBase::toJson(m_Url);
    }

    return val;
}

void AllView::fromJson(web::json::value& val)
{
    if(val.has_field(U("_class")))
    {
        setClass(ModelBase::stringFromJson(val[U("_class")]));
    }
    if(val.has_field(U("name")))
    {
        setName(ModelBase::stringFromJson(val[U("name")]));
    }
    if(val.has_field(U("url")))
    {
        setUrl(ModelBase::stringFromJson(val[U("url")]));
    }
}

void AllView::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("_class"), m__class));
        
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
        
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("url"), m_Url));
        
    }
}

void AllView::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(U("_class"))));
    }
    if(multipart->hasContent(U("name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    }
    if(multipart->hasContent(U("url")))
    {
        setUrl(ModelBase::stringFromHttpContent(multipart->getContent(U("url"))));
    }
}

utility::string_t AllView::getClass() const
{
    return m__class;
}


void AllView::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool AllView::classIsSet() const
{
    return m__classIsSet;
}

void AllView::unset_class()
{
    m__classIsSet = false;
}

utility::string_t AllView::getName() const
{
    return m_Name;
}


void AllView::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool AllView::nameIsSet() const
{
    return m_NameIsSet;
}

void AllView::unsetName()
{
    m_NameIsSet = false;
}

utility::string_t AllView::getUrl() const
{
    return m_Url;
}


void AllView::setUrl(utility::string_t value)
{
    m_Url = value;
    m_UrlIsSet = true;
}
bool AllView::urlIsSet() const
{
    return m_UrlIsSet;
}

void AllView::unsetUrl()
{
    m_UrlIsSet = false;
}

}
}
}
}

