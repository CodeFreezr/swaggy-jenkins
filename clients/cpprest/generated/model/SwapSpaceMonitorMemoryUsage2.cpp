/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "SwapSpaceMonitorMemoryUsage2.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

SwapSpaceMonitorMemoryUsage2::SwapSpaceMonitorMemoryUsage2()
{
    m__class = U("");
    m__classIsSet = false;
    m_AvailablePhysicalMemory = 0;
    m_AvailablePhysicalMemoryIsSet = false;
    m_AvailableSwapSpace = 0;
    m_AvailableSwapSpaceIsSet = false;
    m_TotalPhysicalMemory = 0;
    m_TotalPhysicalMemoryIsSet = false;
    m_TotalSwapSpace = 0;
    m_TotalSwapSpaceIsSet = false;
}

SwapSpaceMonitorMemoryUsage2::~SwapSpaceMonitorMemoryUsage2()
{
}

void SwapSpaceMonitorMemoryUsage2::validate()
{
    // TODO: implement validation
}

web::json::value SwapSpaceMonitorMemoryUsage2::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m__classIsSet)
    {
        val[U("_class")] = ModelBase::toJson(m__class);
    }
    if(m_AvailablePhysicalMemoryIsSet)
    {
        val[U("availablePhysicalMemory")] = ModelBase::toJson(m_AvailablePhysicalMemory);
    }
    if(m_AvailableSwapSpaceIsSet)
    {
        val[U("availableSwapSpace")] = ModelBase::toJson(m_AvailableSwapSpace);
    }
    if(m_TotalPhysicalMemoryIsSet)
    {
        val[U("totalPhysicalMemory")] = ModelBase::toJson(m_TotalPhysicalMemory);
    }
    if(m_TotalSwapSpaceIsSet)
    {
        val[U("totalSwapSpace")] = ModelBase::toJson(m_TotalSwapSpace);
    }

    return val;
}

void SwapSpaceMonitorMemoryUsage2::fromJson(web::json::value& val)
{
    if(val.has_field(U("_class")))
    {
        setClass(ModelBase::stringFromJson(val[U("_class")]));
    }
    if(val.has_field(U("availablePhysicalMemory")))
    {
        setAvailablePhysicalMemory(ModelBase::int32_tFromJson(val[U("availablePhysicalMemory")]));
    }
    if(val.has_field(U("availableSwapSpace")))
    {
        setAvailableSwapSpace(ModelBase::int32_tFromJson(val[U("availableSwapSpace")]));
    }
    if(val.has_field(U("totalPhysicalMemory")))
    {
        setTotalPhysicalMemory(ModelBase::int32_tFromJson(val[U("totalPhysicalMemory")]));
    }
    if(val.has_field(U("totalSwapSpace")))
    {
        setTotalSwapSpace(ModelBase::int32_tFromJson(val[U("totalSwapSpace")]));
    }
}

void SwapSpaceMonitorMemoryUsage2::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m__classIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("_class"), m__class));
        
    }
    if(m_AvailablePhysicalMemoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("availablePhysicalMemory"), m_AvailablePhysicalMemory));
    }
    if(m_AvailableSwapSpaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("availableSwapSpace"), m_AvailableSwapSpace));
    }
    if(m_TotalPhysicalMemoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("totalPhysicalMemory"), m_TotalPhysicalMemory));
    }
    if(m_TotalSwapSpaceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("totalSwapSpace"), m_TotalSwapSpace));
    }
}

void SwapSpaceMonitorMemoryUsage2::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("_class")))
    {
        setClass(ModelBase::stringFromHttpContent(multipart->getContent(U("_class"))));
    }
    if(multipart->hasContent(U("availablePhysicalMemory")))
    {
        setAvailablePhysicalMemory(ModelBase::int32_tFromHttpContent(multipart->getContent(U("availablePhysicalMemory"))));
    }
    if(multipart->hasContent(U("availableSwapSpace")))
    {
        setAvailableSwapSpace(ModelBase::int32_tFromHttpContent(multipart->getContent(U("availableSwapSpace"))));
    }
    if(multipart->hasContent(U("totalPhysicalMemory")))
    {
        setTotalPhysicalMemory(ModelBase::int32_tFromHttpContent(multipart->getContent(U("totalPhysicalMemory"))));
    }
    if(multipart->hasContent(U("totalSwapSpace")))
    {
        setTotalSwapSpace(ModelBase::int32_tFromHttpContent(multipart->getContent(U("totalSwapSpace"))));
    }
}

utility::string_t SwapSpaceMonitorMemoryUsage2::getClass() const
{
    return m__class;
}


void SwapSpaceMonitorMemoryUsage2::setClass(utility::string_t value)
{
    m__class = value;
    m__classIsSet = true;
}
bool SwapSpaceMonitorMemoryUsage2::classIsSet() const
{
    return m__classIsSet;
}

void SwapSpaceMonitorMemoryUsage2::unset_class()
{
    m__classIsSet = false;
}

int32_t SwapSpaceMonitorMemoryUsage2::getAvailablePhysicalMemory() const
{
    return m_AvailablePhysicalMemory;
}


void SwapSpaceMonitorMemoryUsage2::setAvailablePhysicalMemory(int32_t value)
{
    m_AvailablePhysicalMemory = value;
    m_AvailablePhysicalMemoryIsSet = true;
}
bool SwapSpaceMonitorMemoryUsage2::availablePhysicalMemoryIsSet() const
{
    return m_AvailablePhysicalMemoryIsSet;
}

void SwapSpaceMonitorMemoryUsage2::unsetAvailablePhysicalMemory()
{
    m_AvailablePhysicalMemoryIsSet = false;
}

int32_t SwapSpaceMonitorMemoryUsage2::getAvailableSwapSpace() const
{
    return m_AvailableSwapSpace;
}


void SwapSpaceMonitorMemoryUsage2::setAvailableSwapSpace(int32_t value)
{
    m_AvailableSwapSpace = value;
    m_AvailableSwapSpaceIsSet = true;
}
bool SwapSpaceMonitorMemoryUsage2::availableSwapSpaceIsSet() const
{
    return m_AvailableSwapSpaceIsSet;
}

void SwapSpaceMonitorMemoryUsage2::unsetAvailableSwapSpace()
{
    m_AvailableSwapSpaceIsSet = false;
}

int32_t SwapSpaceMonitorMemoryUsage2::getTotalPhysicalMemory() const
{
    return m_TotalPhysicalMemory;
}


void SwapSpaceMonitorMemoryUsage2::setTotalPhysicalMemory(int32_t value)
{
    m_TotalPhysicalMemory = value;
    m_TotalPhysicalMemoryIsSet = true;
}
bool SwapSpaceMonitorMemoryUsage2::totalPhysicalMemoryIsSet() const
{
    return m_TotalPhysicalMemoryIsSet;
}

void SwapSpaceMonitorMemoryUsage2::unsetTotalPhysicalMemory()
{
    m_TotalPhysicalMemoryIsSet = false;
}

int32_t SwapSpaceMonitorMemoryUsage2::getTotalSwapSpace() const
{
    return m_TotalSwapSpace;
}


void SwapSpaceMonitorMemoryUsage2::setTotalSwapSpace(int32_t value)
{
    m_TotalSwapSpace = value;
    m_TotalSwapSpaceIsSet = true;
}
bool SwapSpaceMonitorMemoryUsage2::totalSwapSpaceIsSet() const
{
    return m_TotalSwapSpaceIsSet;
}

void SwapSpaceMonitorMemoryUsage2::unsetTotalSwapSpace()
{
    m_TotalSwapSpaceIsSet = false;
}

}
}
}
}

