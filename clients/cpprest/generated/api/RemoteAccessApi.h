/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * RemoteAccessApi.h
 *
 * 
 */

#ifndef RemoteAccessApi_H_
#define RemoteAccessApi_H_


#include "ApiClient.h"

#include "HudsonmodelComputerSet.h"
#include "HudsonmodelFreeStyleBuild.h"
#include "HudsonmodelFreeStyleProject.h"
#include "HudsonmodelHudson.h"
#include "HudsonmodelListView.h"
#include "HudsonmodelQueue.h"
#include "HudsonsecuritycsrfDefaultCrumbIssuer.h"
#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace api {

using namespace io::swagger::client::model;

class  RemoteAccessApi
{
public:
    RemoteAccessApi( std::shared_ptr<ApiClient> apiClient );
    virtual ~RemoteAccessApi();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve computer details
    /// </remarks>
    
    pplx::task<std::shared_ptr<HudsonmodelComputerSet>> getComputer();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve CSRF protection token
    /// </remarks>
    
    pplx::task<std::shared_ptr<HudsonsecuritycsrfDefaultCrumbIssuer>> getCrumb();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve Jenkins details
    /// </remarks>
    
    pplx::task<std::shared_ptr<HudsonmodelHudson>> getJenkins();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve job details
    /// </remarks>
    /// <param name="name">Name of the job</param>
    pplx::task<std::shared_ptr<HudsonmodelFreeStyleProject>> getJob(utility::string_t name);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve job configuration
    /// </remarks>
    /// <param name="name">Name of the job</param>
    pplx::task<utility::string_t> getJobConfig(utility::string_t name);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve job&#39;s last build details
    /// </remarks>
    /// <param name="name">Name of the job</param>
    pplx::task<std::shared_ptr<HudsonmodelFreeStyleBuild>> getJobLastBuild(utility::string_t name);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve job&#39;s build progressive text output
    /// </remarks>
    /// <param name="name">Name of the job</param>/// <param name="number">Build number</param>/// <param name="start">Starting point of progressive text output</param>
    pplx::task<void> getJobProgressiveText(utility::string_t name, utility::string_t number, utility::string_t start);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve queue details
    /// </remarks>
    
    pplx::task<std::shared_ptr<HudsonmodelQueue>> getQueue();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve queued item details
    /// </remarks>
    /// <param name="number">Queue number</param>
    pplx::task<std::shared_ptr<HudsonmodelQueue>> getQueueItem(utility::string_t number);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve view details
    /// </remarks>
    /// <param name="name">Name of the view</param>
    pplx::task<std::shared_ptr<HudsonmodelListView>> getView(utility::string_t name);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve view configuration
    /// </remarks>
    /// <param name="name">Name of the view</param>
    pplx::task<utility::string_t> getViewConfig(utility::string_t name);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve Jenkins headers
    /// </remarks>
    
    pplx::task<void> headJenkins();
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new job using job configuration, or copied from an existing job
    /// </remarks>
    /// <param name="name">Name of the new job</param>/// <param name="from">Existing job to copy from (optional)</param>/// <param name="mode">Set to &#39;copy&#39; for copying an existing job (optional)</param>/// <param name="body">Job configuration in config.xml format (optional)</param>/// <param name="jenkinsCrumb">CSRF protection token (optional)</param>/// <param name="contentType">Content type header application/xml (optional)</param>
    pplx::task<void> postCreateItem(utility::string_t name, utility::string_t from, utility::string_t mode, utility::string_t body, utility::string_t jenkinsCrumb, utility::string_t contentType);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new view using view configuration
    /// </remarks>
    /// <param name="name">Name of the new view</param>/// <param name="body">View configuration in config.xml format (optional)</param>/// <param name="jenkinsCrumb">CSRF protection token (optional)</param>/// <param name="contentType">Content type header application/xml (optional)</param>
    pplx::task<void> postCreateView(utility::string_t name, utility::string_t body, utility::string_t jenkinsCrumb, utility::string_t contentType);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Build a job
    /// </remarks>
    /// <param name="name">Name of the job</param>/// <param name="json"></param>/// <param name="token"> (optional)</param>/// <param name="jenkinsCrumb">CSRF protection token (optional)</param>
    pplx::task<void> postJobBuild(utility::string_t name, utility::string_t json, utility::string_t token, utility::string_t jenkinsCrumb);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update job configuration
    /// </remarks>
    /// <param name="name">Name of the job</param>/// <param name="body">Job configuration in config.xml format</param>/// <param name="jenkinsCrumb">CSRF protection token (optional)</param>
    pplx::task<void> postJobConfig(utility::string_t name, utility::string_t body, utility::string_t jenkinsCrumb);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a job
    /// </remarks>
    /// <param name="name">Name of the job</param>/// <param name="jenkinsCrumb">CSRF protection token (optional)</param>
    pplx::task<void> postJobDelete(utility::string_t name, utility::string_t jenkinsCrumb);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Disable a job
    /// </remarks>
    /// <param name="name">Name of the job</param>/// <param name="jenkinsCrumb">CSRF protection token (optional)</param>
    pplx::task<void> postJobDisable(utility::string_t name, utility::string_t jenkinsCrumb);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Enable a job
    /// </remarks>
    /// <param name="name">Name of the job</param>/// <param name="jenkinsCrumb">CSRF protection token (optional)</param>
    pplx::task<void> postJobEnable(utility::string_t name, utility::string_t jenkinsCrumb);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Stop a job
    /// </remarks>
    /// <param name="name">Name of the job</param>/// <param name="jenkinsCrumb">CSRF protection token (optional)</param>
    pplx::task<void> postJobLastBuildStop(utility::string_t name, utility::string_t jenkinsCrumb);
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update view configuration
    /// </remarks>
    /// <param name="name">Name of the view</param>/// <param name="body">View configuration in config.xml format</param>/// <param name="jenkinsCrumb">CSRF protection token (optional)</param>
    pplx::task<void> postViewConfig(utility::string_t name, utility::string_t body, utility::string_t jenkinsCrumb);

protected:
    std::shared_ptr<ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* RemoteAccessApi_H_ */

