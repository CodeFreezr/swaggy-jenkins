/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.GetMultibranchPipeline;
import io.swagger.client.model.GetOrganisations;
import io.swagger.client.model.GetPipelines;
import io.swagger.client.model.IojenkinsblueoceanrestimplpipelineBranchImpl;
import io.swagger.client.model.IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl;
import io.swagger.client.model.IojenkinsblueoceanserviceembeddedrestPipelineImpl;
import io.swagger.client.model.SwaggyjenkinsOrganisation;
import io.swagger.client.model.SwaggyjenkinsPipeline;
import io.swagger.client.model.SwaggyjenkinsUser;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class BlueOceanApi {
  String basePath = "http://localhost";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * 
  * Retrieve authenticated user details for an organisation
   * @param organisation Name of the organisation
   * @return SwaggyjenkinsUser
  */
  public SwaggyjenkinsUser getAuthenticatedUser (String organisation) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getAuthenticatedUser",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getAuthenticatedUser"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/user/".replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SwaggyjenkinsUser) ApiInvoker.deserialize(localVarResponse, "", SwaggyjenkinsUser.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve authenticated user details for an organisation
   * @param organisation Name of the organisation
  */
  public void getAuthenticatedUser (String organisation, final Response.Listener<SwaggyjenkinsUser> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getAuthenticatedUser",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getAuthenticatedUser"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/user/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SwaggyjenkinsUser) ApiInvoker.deserialize(localVarResponse,  "", SwaggyjenkinsUser.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get a list of class names supported by a given class
   * @param _class Name of the class
   * @return String
  */
  public String getClasses (String _class) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling getClasses",
        new ApiException(400, "Missing the required parameter '_class' when calling getClasses"));
    }

    // create path and map variables
    String path = "/blue/rest/classes/{class}".replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get a list of class names supported by a given class
   * @param _class Name of the class
  */
  public void getClasses (String _class, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter '_class' is set
    if (_class == null) {
      VolleyError error = new VolleyError("Missing the required parameter '_class' when calling getClasses",
        new ApiException(400, "Missing the required parameter '_class' when calling getClasses"));
    }

    // create path and map variables
    String path = "/blue/rest/classes/{class}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "class" + "\\}", apiInvoker.escapeString(_class.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve organisation details
   * @param organisation Name of the organisation
   * @return SwaggyjenkinsOrganisation
  */
  public SwaggyjenkinsOrganisation getOrganisation (String organisation) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getOrganisation",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getOrganisation"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}".replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SwaggyjenkinsOrganisation) ApiInvoker.deserialize(localVarResponse, "", SwaggyjenkinsOrganisation.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve organisation details
   * @param organisation Name of the organisation
  */
  public void getOrganisation (String organisation, final Response.Listener<SwaggyjenkinsOrganisation> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getOrganisation",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getOrganisation"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SwaggyjenkinsOrganisation) ApiInvoker.deserialize(localVarResponse,  "", SwaggyjenkinsOrganisation.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve all organisations details
   * @return GetOrganisations
  */
  public GetOrganisations getOrganisations () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/blue/rest/organizations/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetOrganisations) ApiInvoker.deserialize(localVarResponse, "", GetOrganisations.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve all organisations details

  */
  public void getOrganisations (final Response.Listener<GetOrganisations> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/blue/rest/organizations/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetOrganisations) ApiInvoker.deserialize(localVarResponse,  "", GetOrganisations.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve branch details for an organisation pipeline
   * @param organisation Name of the organisation
   * @param pipeline Name of the pipeline
   * @param branch Name of the branch
   * @return IojenkinsblueoceanrestimplpipelineBranchImpl
  */
  public IojenkinsblueoceanrestimplpipelineBranchImpl getPipelineBranchByOrg (String organisation, String pipeline, String branch) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getPipelineBranchByOrg",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getPipelineBranchByOrg"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineBranchByOrg",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineBranchByOrg"));
    }
    // verify the required parameter 'branch' is set
    if (branch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'branch' when calling getPipelineBranchByOrg",
        new ApiException(400, "Missing the required parameter 'branch' when calling getPipelineBranchByOrg"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches/{branch}/".replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "branch" + "\\}", apiInvoker.escapeString(branch.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (IojenkinsblueoceanrestimplpipelineBranchImpl) ApiInvoker.deserialize(localVarResponse, "", IojenkinsblueoceanrestimplpipelineBranchImpl.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve branch details for an organisation pipeline
   * @param organisation Name of the organisation   * @param pipeline Name of the pipeline   * @param branch Name of the branch
  */
  public void getPipelineBranchByOrg (String organisation, String pipeline, String branch, final Response.Listener<IojenkinsblueoceanrestimplpipelineBranchImpl> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getPipelineBranchByOrg",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getPipelineBranchByOrg"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineBranchByOrg",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineBranchByOrg"));
    }
    // verify the required parameter 'branch' is set
    if (branch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'branch' when calling getPipelineBranchByOrg",
        new ApiException(400, "Missing the required parameter 'branch' when calling getPipelineBranchByOrg"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches/{branch}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "branch" + "\\}", apiInvoker.escapeString(branch.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((IojenkinsblueoceanrestimplpipelineBranchImpl) ApiInvoker.deserialize(localVarResponse,  "", IojenkinsblueoceanrestimplpipelineBranchImpl.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve all branches details for an organisation pipeline
   * @param organisation Name of the organisation
   * @param pipeline Name of the pipeline
   * @return GetMultibranchPipeline
  */
  public GetMultibranchPipeline getPipelineBranchesByOrg (String organisation, String pipeline) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getPipelineBranchesByOrg",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getPipelineBranchesByOrg"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineBranchesByOrg",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineBranchesByOrg"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches".replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetMultibranchPipeline) ApiInvoker.deserialize(localVarResponse, "", GetMultibranchPipeline.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve all branches details for an organisation pipeline
   * @param organisation Name of the organisation   * @param pipeline Name of the pipeline
  */
  public void getPipelineBranchesByOrg (String organisation, String pipeline, final Response.Listener<GetMultibranchPipeline> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getPipelineBranchesByOrg",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getPipelineBranchesByOrg"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineBranchesByOrg",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineBranchesByOrg"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetMultibranchPipeline) ApiInvoker.deserialize(localVarResponse,  "", GetMultibranchPipeline.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve pipeline details for an organisation
   * @param organisation Name of the organisation
   * @param pipeline Name of the pipeline
   * @return SwaggyjenkinsPipeline
  */
  public SwaggyjenkinsPipeline getPipelineByOrg (String organisation, String pipeline) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getPipelineByOrg",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getPipelineByOrg"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineByOrg",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineByOrg"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}".replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SwaggyjenkinsPipeline) ApiInvoker.deserialize(localVarResponse, "", SwaggyjenkinsPipeline.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve pipeline details for an organisation
   * @param organisation Name of the organisation   * @param pipeline Name of the pipeline
  */
  public void getPipelineByOrg (String organisation, String pipeline, final Response.Listener<SwaggyjenkinsPipeline> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getPipelineByOrg",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getPipelineByOrg"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineByOrg",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineByOrg"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SwaggyjenkinsPipeline) ApiInvoker.deserialize(localVarResponse,  "", SwaggyjenkinsPipeline.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve pipeline folder for an organisation
   * @param organisation Name of the organisation
   * @param folder Name of the folder
   * @return IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl
  */
  public IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl getPipelineFolderByOrg (String organisation, String folder) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getPipelineFolderByOrg",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getPipelineFolderByOrg"));
    }
    // verify the required parameter 'folder' is set
    if (folder == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'folder' when calling getPipelineFolderByOrg",
        new ApiException(400, "Missing the required parameter 'folder' when calling getPipelineFolderByOrg"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/pipelines/{folder}/".replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString())).replaceAll("\\{" + "folder" + "\\}", apiInvoker.escapeString(folder.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl) ApiInvoker.deserialize(localVarResponse, "", IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve pipeline folder for an organisation
   * @param organisation Name of the organisation   * @param folder Name of the folder
  */
  public void getPipelineFolderByOrg (String organisation, String folder, final Response.Listener<IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getPipelineFolderByOrg",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getPipelineFolderByOrg"));
    }
    // verify the required parameter 'folder' is set
    if (folder == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'folder' when calling getPipelineFolderByOrg",
        new ApiException(400, "Missing the required parameter 'folder' when calling getPipelineFolderByOrg"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/pipelines/{folder}/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString())).replaceAll("\\{" + "folder" + "\\}", apiInvoker.escapeString(folder.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl) ApiInvoker.deserialize(localVarResponse,  "", IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve pipeline details for an organisation folder
   * @param organisation Name of the organisation
   * @param pipeline Name of the pipeline
   * @param folder Name of the folder
   * @return IojenkinsblueoceanserviceembeddedrestPipelineImpl
  */
  public IojenkinsblueoceanserviceembeddedrestPipelineImpl getPipelineFolderByOrg_1 (String organisation, String pipeline, String folder) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getPipelineFolderByOrg_1",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getPipelineFolderByOrg_1"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineFolderByOrg_1",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineFolderByOrg_1"));
    }
    // verify the required parameter 'folder' is set
    if (folder == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'folder' when calling getPipelineFolderByOrg_1",
        new ApiException(400, "Missing the required parameter 'folder' when calling getPipelineFolderByOrg_1"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/pipelines/{folder}/pipelines/{pipeline}".replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "folder" + "\\}", apiInvoker.escapeString(folder.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (IojenkinsblueoceanserviceembeddedrestPipelineImpl) ApiInvoker.deserialize(localVarResponse, "", IojenkinsblueoceanserviceembeddedrestPipelineImpl.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve pipeline details for an organisation folder
   * @param organisation Name of the organisation   * @param pipeline Name of the pipeline   * @param folder Name of the folder
  */
  public void getPipelineFolderByOrg_1 (String organisation, String pipeline, String folder, final Response.Listener<IojenkinsblueoceanserviceembeddedrestPipelineImpl> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getPipelineFolderByOrg_1",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getPipelineFolderByOrg_1"));
    }
    // verify the required parameter 'pipeline' is set
    if (pipeline == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pipeline' when calling getPipelineFolderByOrg_1",
        new ApiException(400, "Missing the required parameter 'pipeline' when calling getPipelineFolderByOrg_1"));
    }
    // verify the required parameter 'folder' is set
    if (folder == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'folder' when calling getPipelineFolderByOrg_1",
        new ApiException(400, "Missing the required parameter 'folder' when calling getPipelineFolderByOrg_1"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/pipelines/{folder}/pipelines/{pipeline}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString())).replaceAll("\\{" + "pipeline" + "\\}", apiInvoker.escapeString(pipeline.toString())).replaceAll("\\{" + "folder" + "\\}", apiInvoker.escapeString(folder.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((IojenkinsblueoceanserviceembeddedrestPipelineImpl) ApiInvoker.deserialize(localVarResponse,  "", IojenkinsblueoceanserviceembeddedrestPipelineImpl.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve all pipelines details for an organisation
   * @param organisation Name of the organisation
   * @return GetPipelines
  */
  public GetPipelines getPipelinesByOrg (String organisation) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getPipelinesByOrg",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getPipelinesByOrg"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/pipelines/".replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (GetPipelines) ApiInvoker.deserialize(localVarResponse, "", GetPipelines.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve all pipelines details for an organisation
   * @param organisation Name of the organisation
  */
  public void getPipelinesByOrg (String organisation, final Response.Listener<GetPipelines> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getPipelinesByOrg",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getPipelinesByOrg"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/pipelines/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GetPipelines) ApiInvoker.deserialize(localVarResponse,  "", GetPipelines.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve user details for an organisation
   * @param organisation Name of the organisation
   * @param user Name of the user
   * @return SwaggyjenkinsUser
  */
  public SwaggyjenkinsUser getUser (String organisation, String user) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getUser",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getUser"));
    }
    // verify the required parameter 'user' is set
    if (user == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'user' when calling getUser",
        new ApiException(400, "Missing the required parameter 'user' when calling getUser"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/users/{user}".replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString())).replaceAll("\\{" + "user" + "\\}", apiInvoker.escapeString(user.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SwaggyjenkinsUser) ApiInvoker.deserialize(localVarResponse, "", SwaggyjenkinsUser.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve user details for an organisation
   * @param organisation Name of the organisation   * @param user Name of the user
  */
  public void getUser (String organisation, String user, final Response.Listener<SwaggyjenkinsUser> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getUser",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getUser"));
    }
    // verify the required parameter 'user' is set
    if (user == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'user' when calling getUser",
        new ApiException(400, "Missing the required parameter 'user' when calling getUser"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/users/{user}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString())).replaceAll("\\{" + "user" + "\\}", apiInvoker.escapeString(user.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SwaggyjenkinsUser) ApiInvoker.deserialize(localVarResponse,  "", SwaggyjenkinsUser.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Retrieve users details for an organisation
   * @param organisation Name of the organisation
   * @return SwaggyjenkinsUser
  */
  public SwaggyjenkinsUser getUsers (String organisation) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getUsers",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getUsers"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/users/".replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (SwaggyjenkinsUser) ApiInvoker.deserialize(localVarResponse, "", SwaggyjenkinsUser.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Retrieve users details for an organisation
   * @param organisation Name of the organisation
  */
  public void getUsers (String organisation, final Response.Listener<SwaggyjenkinsUser> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organisation' is set
    if (organisation == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organisation' when calling getUsers",
        new ApiException(400, "Missing the required parameter 'organisation' when calling getUsers"));
    }

    // create path and map variables
    String path = "/blue/rest/organizations/{organisation}/users/".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organisation" + "\\}", apiInvoker.escapeString(organisation.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SwaggyjenkinsUser) ApiInvoker.deserialize(localVarResponse,  "", SwaggyjenkinsUser.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Get classes details
   * @param q Query string containing an array of class names
   * @return String
  */
  public String search (String q) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'q' is set
    if (q == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'q' when calling search",
        new ApiException(400, "Missing the required parameter 'q' when calling search"));
    }

    // create path and map variables
    String path = "/blue/rest/classes/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Get classes details
   * @param q Query string containing an array of class names
  */
  public void search (String q, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'q' is set
    if (q == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'q' when calling search",
        new ApiException(400, "Missing the required parameter 'q' when calling search"));
    }

    // create path and map variables
    String path = "/blue/rest/classes/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 
  * Search for any resource details
   * @param q Query string
   * @return String
  */
  public String search_2 (String q) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'q' is set
    if (q == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'q' when calling search_2",
        new ApiException(400, "Missing the required parameter 'q' when calling search_2"));
    }

    // create path and map variables
    String path = "/blue/rest/search/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] {  };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * 
   * Search for any resource details
   * @param q Query string
  */
  public void search_2 (String q, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'q' is set
    if (q == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'q' when calling search_2",
        new ApiException(400, "Missing the required parameter 'q' when calling search_2"));
    }

    // create path and map variables
    String path = "/blue/rest/search/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "q", q));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
