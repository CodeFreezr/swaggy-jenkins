<?php

/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/**
 * Swaggy Jenkins
 * @version 0.1.0
 */

$app->get('/', function () use ($app) {
    return $app->version();
});

/**
 * GET search
 * Summary: 
 * Notes: Get classes details
 * Output-Formats: [application/json]
 */
$app->GET('//blue/rest/classes/', 'BlueOceanApi@search');
/**
 * GET getClasses
 * Summary: 
 * Notes: Get a list of class names supported by a given class
 * Output-Formats: [application/json]
 */
$app->GET('//blue/rest/classes/{class}', 'BlueOceanApi@getClasses');
/**
 * GET getOrganisations
 * Summary: 
 * Notes: Retrieve all organisations details
 * Output-Formats: [application/json]
 */
$app->GET('//blue/rest/organizations/', 'BlueOceanApi@getOrganisations');
/**
 * GET getOrganisation
 * Summary: 
 * Notes: Retrieve organisation details
 * Output-Formats: [application/json]
 */
$app->GET('//blue/rest/organizations/{organisation}', 'BlueOceanApi@getOrganisation');
/**
 * GET getPipelinesByOrg
 * Summary: 
 * Notes: Retrieve all pipelines details for an organisation
 * Output-Formats: [application/json]
 */
$app->GET('//blue/rest/organizations/{organisation}/pipelines/', 'BlueOceanApi@getPipelinesByOrg');
/**
 * GET getPipelineFolderByOrg
 * Summary: 
 * Notes: Retrieve pipeline folder for an organisation
 * Output-Formats: [application/json]
 */
$app->GET('//blue/rest/organizations/{organisation}/pipelines/{folder}/', 'BlueOceanApi@getPipelineFolderByOrg');
/**
 * GET getPipelineFolderByOrg_0
 * Summary: 
 * Notes: Retrieve pipeline details for an organisation folder
 * Output-Formats: [application/json]
 */
$app->GET('//blue/rest/organizations/{organisation}/pipelines/{folder}/pipelines/{pipeline}', 'BlueOceanApi@getPipelineFolderByOrg_0');
/**
 * GET getPipelineByOrg
 * Summary: 
 * Notes: Retrieve pipeline details for an organisation
 * Output-Formats: [application/json]
 */
$app->GET('//blue/rest/organizations/{organisation}/pipelines/{pipeline}', 'BlueOceanApi@getPipelineByOrg');
/**
 * GET getPipelineBranchesByOrg
 * Summary: 
 * Notes: Retrieve all branches details for an organisation pipeline
 * Output-Formats: [application/json]
 */
$app->GET('//blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches', 'BlueOceanApi@getPipelineBranchesByOrg');
/**
 * GET getPipelineBranchByOrg
 * Summary: 
 * Notes: Retrieve branch details for an organisation pipeline
 * Output-Formats: [application/json]
 */
$app->GET('//blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches/{branch}/', 'BlueOceanApi@getPipelineBranchByOrg');
/**
 * GET getAuthenticatedUser
 * Summary: 
 * Notes: Retrieve authenticated user details for an organisation
 * Output-Formats: [application/json]
 */
$app->GET('//blue/rest/organizations/{organisation}/user/', 'BlueOceanApi@getAuthenticatedUser');
/**
 * GET getUsers
 * Summary: 
 * Notes: Retrieve users details for an organisation
 * Output-Formats: [application/json]
 */
$app->GET('//blue/rest/organizations/{organisation}/users/', 'BlueOceanApi@getUsers');
/**
 * GET getUser
 * Summary: 
 * Notes: Retrieve user details for an organisation
 * Output-Formats: [application/json]
 */
$app->GET('//blue/rest/organizations/{organisation}/users/{user}', 'BlueOceanApi@getUser');
/**
 * GET search_0
 * Summary: 
 * Notes: Search for any resource details
 * Output-Formats: [application/json]
 */
$app->GET('//blue/rest/search/', 'BlueOceanApi@search_0');
/**
 * GET getJenkins
 * Summary: 
 * Notes: Retrieve Jenkins details
 * Output-Formats: [application/json]
 */
$app->GET('//api/json', 'RemoteAccessApi@getJenkins');
/**
 * HEAD headJenkins
 * Summary: 
 * Notes: Retrieve Jenkins headers

 */
$app->HEAD('//api/json', 'RemoteAccessApi@headJenkins');
/**
 * GET getComputer
 * Summary: 
 * Notes: Retrieve computer details
 * Output-Formats: [application/json]
 */
$app->GET('//computer/api/json?depth=1', 'RemoteAccessApi@getComputer');
/**
 * POST postCreateItem
 * Summary: 
 * Notes: Create a new job using job configuration, or copied from an existing job
 * Output-Formats: [text/html]
 */
$app->POST('//createItem', 'RemoteAccessApi@postCreateItem');
/**
 * POST postCreateView
 * Summary: 
 * Notes: Create a new view using view configuration
 * Output-Formats: [text/html]
 */
$app->POST('//createView', 'RemoteAccessApi@postCreateView');
/**
 * GET getCrumb
 * Summary: 
 * Notes: Retrieve CSRF protection token
 * Output-Formats: [application/json]
 */
$app->GET('//crumbIssuer/api/json', 'RemoteAccessApi@getCrumb');
/**
 * GET getJob
 * Summary: 
 * Notes: Retrieve job details
 * Output-Formats: [application/json]
 */
$app->GET('//job/{name}/api/json', 'RemoteAccessApi@getJob');
/**
 * POST postJobBuild
 * Summary: 
 * Notes: Build a job

 */
$app->POST('//job/{name}/build', 'RemoteAccessApi@postJobBuild');
/**
 * GET getJobConfig
 * Summary: 
 * Notes: Retrieve job configuration
 * Output-Formats: [text/xml]
 */
$app->GET('//job/{name}/config.xml', 'RemoteAccessApi@getJobConfig');
/**
 * POST postJobConfig
 * Summary: 
 * Notes: Update job configuration
 * Output-Formats: [text/xml]
 */
$app->POST('//job/{name}/config.xml', 'RemoteAccessApi@postJobConfig');
/**
 * POST postJobDisable
 * Summary: 
 * Notes: Disable a job

 */
$app->POST('//job/{name}/disable', 'RemoteAccessApi@postJobDisable');
/**
 * POST postJobDelete
 * Summary: 
 * Notes: Delete a job

 */
$app->POST('//job/{name}/doDelete', 'RemoteAccessApi@postJobDelete');
/**
 * POST postJobEnable
 * Summary: 
 * Notes: Enable a job

 */
$app->POST('//job/{name}/enable', 'RemoteAccessApi@postJobEnable');
/**
 * GET getJobLastBuild
 * Summary: 
 * Notes: Retrieve job&#39;s last build details
 * Output-Formats: [application/json]
 */
$app->GET('//job/{name}/lastBuild/api/json', 'RemoteAccessApi@getJobLastBuild');
/**
 * POST postJobLastBuildStop
 * Summary: 
 * Notes: Stop a job

 */
$app->POST('//job/{name}/lastBuild/stop', 'RemoteAccessApi@postJobLastBuildStop');
/**
 * GET getJobProgressiveText
 * Summary: 
 * Notes: Retrieve job&#39;s build progressive text output

 */
$app->GET('//job/{name}/{number}/logText/progressiveText', 'RemoteAccessApi@getJobProgressiveText');
/**
 * GET getQueue
 * Summary: 
 * Notes: Retrieve queue details
 * Output-Formats: [application/json]
 */
$app->GET('//queue/api/json', 'RemoteAccessApi@getQueue');
/**
 * GET getQueueItem
 * Summary: 
 * Notes: Retrieve queued item details
 * Output-Formats: [application/json]
 */
$app->GET('//queue/item/{number}/api/json', 'RemoteAccessApi@getQueueItem');
/**
 * GET getView
 * Summary: 
 * Notes: Retrieve view details
 * Output-Formats: [application/json]
 */
$app->GET('//view/{name}/api/json', 'RemoteAccessApi@getView');
/**
 * GET getViewConfig
 * Summary: 
 * Notes: Retrieve view configuration
 * Output-Formats: [text/xml]
 */
$app->GET('//view/{name}/config.xml', 'RemoteAccessApi@getViewConfig');
/**
 * POST postViewConfig
 * Summary: 
 * Notes: Update view configuration

 */
$app->POST('//view/{name}/config.xml', 'RemoteAccessApi@postViewConfig');

