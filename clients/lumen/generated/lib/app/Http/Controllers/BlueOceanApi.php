<?php

/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


namespace App\Http\Controllers;

use Illuminate\Support\Facades\Request;

class BlueOceanApi extends Controller
{
    /**
     * Constructor
     */
    public function __construct()
    {
    }

    /**
     * Operation search
     *
     * .
     *
     *
     * @return Http response
     */
    public function search()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['q'])) {
            throw new \InvalidArgumentException('Missing the required parameter $q when calling search');
        }
        $q = $input['q'];


        return response('How about implementing search as a GET method ?');
    }
    /**
     * Operation getClasses
     *
     * .
     *
     * @param string $class Name of the class (required)
     *
     * @return Http response
     */
    public function getClasses($class)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getClasses as a GET method ?');
    }
    /**
     * Operation getOrganisations
     *
     * .
     *
     *
     * @return Http response
     */
    public function getOrganisations()
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getOrganisations as a GET method ?');
    }
    /**
     * Operation getOrganisation
     *
     * .
     *
     * @param string $organisation Name of the organisation (required)
     *
     * @return Http response
     */
    public function getOrganisation($organisation)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getOrganisation as a GET method ?');
    }
    /**
     * Operation getPipelinesByOrg
     *
     * .
     *
     * @param string $organisation Name of the organisation (required)
     *
     * @return Http response
     */
    public function getPipelinesByOrg($organisation)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getPipelinesByOrg as a GET method ?');
    }
    /**
     * Operation getPipelineFolderByOrg
     *
     * .
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $folder Name of the folder (required)
     *
     * @return Http response
     */
    public function getPipelineFolderByOrg($organisation, $folder)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getPipelineFolderByOrg as a GET method ?');
    }
    /**
     * Operation getPipelineFolderByOrg_0
     *
     * .
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $pipeline Name of the pipeline (required)
     * @param string $folder Name of the folder (required)
     *
     * @return Http response
     */
    public function getPipelineFolderByOrg_0($organisation, $pipeline, $folder)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getPipelineFolderByOrg_1 as a GET method ?');
    }
    /**
     * Operation getPipelineByOrg
     *
     * .
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $pipeline Name of the pipeline (required)
     *
     * @return Http response
     */
    public function getPipelineByOrg($organisation, $pipeline)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getPipelineByOrg as a GET method ?');
    }
    /**
     * Operation getPipelineBranchesByOrg
     *
     * .
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $pipeline Name of the pipeline (required)
     *
     * @return Http response
     */
    public function getPipelineBranchesByOrg($organisation, $pipeline)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getPipelineBranchesByOrg as a GET method ?');
    }
    /**
     * Operation getPipelineBranchByOrg
     *
     * .
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $pipeline Name of the pipeline (required)
     * @param string $branch Name of the branch (required)
     *
     * @return Http response
     */
    public function getPipelineBranchByOrg($organisation, $pipeline, $branch)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getPipelineBranchByOrg as a GET method ?');
    }
    /**
     * Operation getAuthenticatedUser
     *
     * .
     *
     * @param string $organisation Name of the organisation (required)
     *
     * @return Http response
     */
    public function getAuthenticatedUser($organisation)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getAuthenticatedUser as a GET method ?');
    }
    /**
     * Operation getUsers
     *
     * .
     *
     * @param string $organisation Name of the organisation (required)
     *
     * @return Http response
     */
    public function getUsers($organisation)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getUsers as a GET method ?');
    }
    /**
     * Operation getUser
     *
     * .
     *
     * @param string $organisation Name of the organisation (required)
     * @param string $user Name of the user (required)
     *
     * @return Http response
     */
    public function getUser($organisation, $user)
    {
        $input = Request::all();

        //path params validation


        //not path params validation

        return response('How about implementing getUser as a GET method ?');
    }
    /**
     * Operation search_0
     *
     * .
     *
     *
     * @return Http response
     */
    public function search_0()
    {
        $input = Request::all();

        //path params validation


        //not path params validation
        if (!isset($input['q'])) {
            throw new \InvalidArgumentException('Missing the required parameter $q when calling search_0');
        }
        $q = $input['q'];


        return response('How about implementing search_2 as a GET method ?');
    }
}
