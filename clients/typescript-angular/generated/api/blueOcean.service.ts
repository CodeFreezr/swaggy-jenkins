/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { Http, Headers, URLSearchParams }                    from '@angular/http';
import { RequestMethod, RequestOptions, RequestOptionsArgs } from '@angular/http';
import { Response, ResponseContentType }                     from '@angular/http';

import { Observable }                                        from 'rxjs/Observable';
import '../rxjs-operators';

import { Body } from '../model/body';
import { BranchImpl } from '../model/branchImpl';
import { FavoriteImpl } from '../model/favoriteImpl';
import { GithubScm } from '../model/githubScm';
import { MultibranchPipeline } from '../model/multibranchPipeline';
import { Organisation } from '../model/organisation';
import { Organisations } from '../model/organisations';
import { Pipeline } from '../model/pipeline';
import { PipelineActivities } from '../model/pipelineActivities';
import { PipelineFolderImpl } from '../model/pipelineFolderImpl';
import { PipelineImpl } from '../model/pipelineImpl';
import { PipelineQueue } from '../model/pipelineQueue';
import { PipelineRun } from '../model/pipelineRun';
import { PipelineRunNode } from '../model/pipelineRunNode';
import { PipelineRunNodeSteps } from '../model/pipelineRunNodeSteps';
import { PipelineRunNodes } from '../model/pipelineRunNodes';
import { PipelineRuns } from '../model/pipelineRuns';
import { PipelineStepImpl } from '../model/pipelineStepImpl';
import { Pipelines } from '../model/pipelines';
import { QueueItemImpl } from '../model/queueItemImpl';
import { ScmOrganisations } from '../model/scmOrganisations';
import { User } from '../model/user';
import { UserFavorites } from '../model/userFavorites';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class BlueOceanService {

    protected basePath = 'http://localhost';
    public defaultHeaders: Headers = new Headers();
    public configuration: Configuration = new Configuration();

    constructor(protected http: Http, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
			this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * 
     * Extends object by coping non-existing properties.
     * @param objA object to be extended
     * @param objB source object
     */
    private extendObj<T1,T2>(objA: T1, objB: T2) {
        for(let key in objB){
            if(objB.hasOwnProperty(key)){
                (objA as any)[key] = (objB as any)[key];
            }
        }
        return <T1&T2>objA;
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (let consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    /**
     * Delete queue item from an organization pipeline queue
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param queue Name of the queue item
     */
    public deletePipelineQueueItem(organization: string, pipeline: string, queue: string, extraHttpRequestParams?: any): Observable<{}> {
        return this.deletePipelineQueueItemWithHttpInfo(organization, pipeline, queue, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve authenticated user details for an organization
     * @param organization Name of the organization
     */
    public getAuthenticatedUser(organization: string, extraHttpRequestParams?: any): Observable<User> {
        return this.getAuthenticatedUserWithHttpInfo(organization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Get a list of class names supported by a given class
     * @param _class Name of the class
     */
    public getClasses(_class: string, extraHttpRequestParams?: any): Observable<string> {
        return this.getClassesWithHttpInfo(_class, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve organization details
     * @param organization Name of the organization
     */
    public getOrganisation(organization: string, extraHttpRequestParams?: any): Observable<Organisation> {
        return this.getOrganisationWithHttpInfo(organization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve all organizations details
     */
    public getOrganisations(extraHttpRequestParams?: any): Observable<Organisations> {
        return this.getOrganisationsWithHttpInfo(extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve pipeline details for an organization
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     */
    public getPipeline(organization: string, pipeline: string, extraHttpRequestParams?: any): Observable<Pipeline> {
        return this.getPipelineWithHttpInfo(organization, pipeline, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve all activities details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     */
    public getPipelineActivities(organization: string, pipeline: string, extraHttpRequestParams?: any): Observable<PipelineActivities> {
        return this.getPipelineActivitiesWithHttpInfo(organization, pipeline, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve branch details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param branch Name of the branch
     */
    public getPipelineBranch(organization: string, pipeline: string, branch: string, extraHttpRequestParams?: any): Observable<BranchImpl> {
        return this.getPipelineBranchWithHttpInfo(organization, pipeline, branch, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve branch run details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param branch Name of the branch
     * @param run Name of the run
     */
    public getPipelineBranchRun(organization: string, pipeline: string, branch: string, run: string, extraHttpRequestParams?: any): Observable<PipelineRun> {
        return this.getPipelineBranchRunWithHttpInfo(organization, pipeline, branch, run, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve all branches details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     */
    public getPipelineBranches(organization: string, pipeline: string, extraHttpRequestParams?: any): Observable<MultibranchPipeline> {
        return this.getPipelineBranchesWithHttpInfo(organization, pipeline, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve pipeline folder for an organization
     * @param organization Name of the organization
     * @param folder Name of the folder
     */
    public getPipelineFolder(organization: string, folder: string, extraHttpRequestParams?: any): Observable<PipelineFolderImpl> {
        return this.getPipelineFolderWithHttpInfo(organization, folder, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve pipeline details for an organization folder
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param folder Name of the folder
     */
    public getPipelineFolderPipeline(organization: string, pipeline: string, folder: string, extraHttpRequestParams?: any): Observable<PipelineImpl> {
        return this.getPipelineFolderPipelineWithHttpInfo(organization, pipeline, folder, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve queue details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     */
    public getPipelineQueue(organization: string, pipeline: string, extraHttpRequestParams?: any): Observable<PipelineQueue> {
        return this.getPipelineQueueWithHttpInfo(organization, pipeline, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve run details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     */
    public getPipelineRun(organization: string, pipeline: string, run: string, extraHttpRequestParams?: any): Observable<PipelineRun> {
        return this.getPipelineRunWithHttpInfo(organization, pipeline, run, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Get log for a pipeline run
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param start Start position of the log
     * @param download Set to true in order to download the file, otherwise it&#39;s passed as a response body
     */
    public getPipelineRunLog(organization: string, pipeline: string, run: string, start?: number, download?: boolean, extraHttpRequestParams?: any): Observable<string> {
        return this.getPipelineRunLogWithHttpInfo(organization, pipeline, run, start, download, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     */
    public getPipelineRunNode(organization: string, pipeline: string, run: string, node: string, extraHttpRequestParams?: any): Observable<PipelineRunNode> {
        return this.getPipelineRunNodeWithHttpInfo(organization, pipeline, run, node, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     * @param step Name of the step
     */
    public getPipelineRunNodeStep(organization: string, pipeline: string, run: string, node: string, step: string, extraHttpRequestParams?: any): Observable<PipelineStepImpl> {
        return this.getPipelineRunNodeStepWithHttpInfo(organization, pipeline, run, node, step, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Get log for a pipeline run node step
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     * @param step Name of the step
     */
    public getPipelineRunNodeStepLog(organization: string, pipeline: string, run: string, node: string, step: string, extraHttpRequestParams?: any): Observable<string> {
        return this.getPipelineRunNodeStepLogWithHttpInfo(organization, pipeline, run, node, step, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve run node steps details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     */
    public getPipelineRunNodeSteps(organization: string, pipeline: string, run: string, node: string, extraHttpRequestParams?: any): Observable<PipelineRunNodeSteps> {
        return this.getPipelineRunNodeStepsWithHttpInfo(organization, pipeline, run, node, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve run nodes details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     */
    public getPipelineRunNodes(organization: string, pipeline: string, run: string, extraHttpRequestParams?: any): Observable<PipelineRunNodes> {
        return this.getPipelineRunNodesWithHttpInfo(organization, pipeline, run, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve all runs details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     */
    public getPipelineRuns(organization: string, pipeline: string, extraHttpRequestParams?: any): Observable<PipelineRuns> {
        return this.getPipelineRunsWithHttpInfo(organization, pipeline, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve all pipelines details for an organization
     * @param organization Name of the organization
     */
    public getPipelines(organization: string, extraHttpRequestParams?: any): Observable<Pipelines> {
        return this.getPipelinesWithHttpInfo(organization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve SCM details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     */
    public getSCM(organization: string, scm: string, extraHttpRequestParams?: any): Observable<GithubScm> {
        return this.getSCMWithHttpInfo(organization, scm, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve SCM organization repositories details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     * @param scmOrganisation Name of the SCM organization
     * @param credentialId Credential ID
     * @param pageSize Number of items in a page
     * @param pageNumber Page number
     */
    public getSCMOrganisationRepositories(organization: string, scm: string, scmOrganisation: string, credentialId?: string, pageSize?: number, pageNumber?: number, extraHttpRequestParams?: any): Observable<ScmOrganisations> {
        return this.getSCMOrganisationRepositoriesWithHttpInfo(organization, scm, scmOrganisation, credentialId, pageSize, pageNumber, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve SCM organization repository details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     * @param scmOrganisation Name of the SCM organization
     * @param repository Name of the SCM repository
     * @param credentialId Credential ID
     */
    public getSCMOrganisationRepository(organization: string, scm: string, scmOrganisation: string, repository: string, credentialId?: string, extraHttpRequestParams?: any): Observable<ScmOrganisations> {
        return this.getSCMOrganisationRepositoryWithHttpInfo(organization, scm, scmOrganisation, repository, credentialId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve SCM organizations details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     * @param credentialId Credential ID
     */
    public getSCMOrganisations(organization: string, scm: string, credentialId?: string, extraHttpRequestParams?: any): Observable<ScmOrganisations> {
        return this.getSCMOrganisationsWithHttpInfo(organization, scm, credentialId, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve user details for an organization
     * @param organization Name of the organization
     * @param user Name of the user
     */
    public getUser(organization: string, user: string, extraHttpRequestParams?: any): Observable<User> {
        return this.getUserWithHttpInfo(organization, user, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve user favorites details for an organization
     * @param user Name of the user
     */
    public getUserFavorites(user: string, extraHttpRequestParams?: any): Observable<UserFavorites> {
        return this.getUserFavoritesWithHttpInfo(user, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Retrieve users details for an organization
     * @param organization Name of the organization
     */
    public getUsers(organization: string, extraHttpRequestParams?: any): Observable<User> {
        return this.getUsersWithHttpInfo(organization, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Replay an organization pipeline run
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     */
    public postPipelineRun(organization: string, pipeline: string, run: string, extraHttpRequestParams?: any): Observable<QueueItemImpl> {
        return this.postPipelineRunWithHttpInfo(organization, pipeline, run, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Start a build for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     */
    public postPipelineRuns(organization: string, pipeline: string, extraHttpRequestParams?: any): Observable<QueueItemImpl> {
        return this.postPipelineRunsWithHttpInfo(organization, pipeline, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Favorite/unfavorite a pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param body Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite
     */
    public putPipelineFavorite(organization: string, pipeline: string, body: Body, extraHttpRequestParams?: any): Observable<FavoriteImpl> {
        return this.putPipelineFavoriteWithHttpInfo(organization, pipeline, body, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Stop a build of an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param blocking Set to true to make blocking stop, default: false
     * @param timeOutInSecs Timeout in seconds, default: 10 seconds
     */
    public putPipelineRun(organization: string, pipeline: string, run: string, blocking?: string, timeOutInSecs?: number, extraHttpRequestParams?: any): Observable<PipelineRun> {
        return this.putPipelineRunWithHttpInfo(organization, pipeline, run, blocking, timeOutInSecs, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Search for any resource details
     * @param q Query string
     */
    public search(q: string, extraHttpRequestParams?: any): Observable<string> {
        return this.searchWithHttpInfo(q, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }

    /**
     * Get classes details
     * @param q Query string containing an array of class names
     */
    public searchClasses(q: string, extraHttpRequestParams?: any): Observable<string> {
        return this.searchClassesWithHttpInfo(q, extraHttpRequestParams)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json() || {};
                }
            });
    }


    /**
     * 
     * Delete queue item from an organization pipeline queue
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param queue Name of the queue item
     */
    public deletePipelineQueueItemWithHttpInfo(organization: string, pipeline: string, queue: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/queue/${queue}'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline))
                    .replace('${' + 'queue' + '}', String(queue));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling deletePipelineQueueItem.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling deletePipelineQueueItem.');
        }
        // verify required parameter 'queue' is not null or undefined
        if (queue === null || queue === undefined) {
            throw new Error('Required parameter queue was null or undefined when calling deletePipelineQueueItem.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Delete,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve authenticated user details for an organization
     * @param organization Name of the organization
     */
    public getAuthenticatedUserWithHttpInfo(organization: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/user/'
                    .replace('${' + 'organization' + '}', String(organization));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getAuthenticatedUser.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Get a list of class names supported by a given class
     * @param _class Name of the class
     */
    public getClassesWithHttpInfo(_class: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/classes/${class}'
                    .replace('${' + 'class' + '}', String(_class));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter '_class' is not null or undefined
        if (_class === null || _class === undefined) {
            throw new Error('Required parameter _class was null or undefined when calling getClasses.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve organization details
     * @param organization Name of the organization
     */
    public getOrganisationWithHttpInfo(organization: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}'
                    .replace('${' + 'organization' + '}', String(organization));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getOrganisation.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve all organizations details
     */
    public getOrganisationsWithHttpInfo(extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve pipeline details for an organization
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     */
    public getPipelineWithHttpInfo(organization: string, pipeline: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipeline.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipeline.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve all activities details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     */
    public getPipelineActivitiesWithHttpInfo(organization: string, pipeline: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/activities'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineActivities.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineActivities.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve branch details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param branch Name of the branch
     */
    public getPipelineBranchWithHttpInfo(organization: string, pipeline: string, branch: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/branches/${branch}/'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline))
                    .replace('${' + 'branch' + '}', String(branch));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineBranch.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineBranch.');
        }
        // verify required parameter 'branch' is not null or undefined
        if (branch === null || branch === undefined) {
            throw new Error('Required parameter branch was null or undefined when calling getPipelineBranch.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve branch run details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param branch Name of the branch
     * @param run Name of the run
     */
    public getPipelineBranchRunWithHttpInfo(organization: string, pipeline: string, branch: string, run: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/branches/${branch}/runs/${run}'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline))
                    .replace('${' + 'branch' + '}', String(branch))
                    .replace('${' + 'run' + '}', String(run));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineBranchRun.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineBranchRun.');
        }
        // verify required parameter 'branch' is not null or undefined
        if (branch === null || branch === undefined) {
            throw new Error('Required parameter branch was null or undefined when calling getPipelineBranchRun.');
        }
        // verify required parameter 'run' is not null or undefined
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineBranchRun.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve all branches details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     */
    public getPipelineBranchesWithHttpInfo(organization: string, pipeline: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/branches'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineBranches.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineBranches.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve pipeline folder for an organization
     * @param organization Name of the organization
     * @param folder Name of the folder
     */
    public getPipelineFolderWithHttpInfo(organization: string, folder: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${folder}/'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'folder' + '}', String(folder));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineFolder.');
        }
        // verify required parameter 'folder' is not null or undefined
        if (folder === null || folder === undefined) {
            throw new Error('Required parameter folder was null or undefined when calling getPipelineFolder.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve pipeline details for an organization folder
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param folder Name of the folder
     */
    public getPipelineFolderPipelineWithHttpInfo(organization: string, pipeline: string, folder: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${folder}/pipelines/${pipeline}'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline))
                    .replace('${' + 'folder' + '}', String(folder));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineFolderPipeline.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineFolderPipeline.');
        }
        // verify required parameter 'folder' is not null or undefined
        if (folder === null || folder === undefined) {
            throw new Error('Required parameter folder was null or undefined when calling getPipelineFolderPipeline.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve queue details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     */
    public getPipelineQueueWithHttpInfo(organization: string, pipeline: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/queue'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineQueue.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineQueue.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve run details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     */
    public getPipelineRunWithHttpInfo(organization: string, pipeline: string, run: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline))
                    .replace('${' + 'run' + '}', String(run));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRun.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRun.');
        }
        // verify required parameter 'run' is not null or undefined
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRun.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Get log for a pipeline run
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param start Start position of the log
     * @param download Set to true in order to download the file, otherwise it&#39;s passed as a response body
     */
    public getPipelineRunLogWithHttpInfo(organization: string, pipeline: string, run: string, start?: number, download?: boolean, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}/log'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline))
                    .replace('${' + 'run' + '}', String(run));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunLog.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunLog.');
        }
        // verify required parameter 'run' is not null or undefined
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunLog.');
        }
        if (start !== undefined) {
            queryParameters.set('start', <any>start);
        }

        if (download !== undefined) {
            queryParameters.set('download', <any>download);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     */
    public getPipelineRunNodeWithHttpInfo(organization: string, pipeline: string, run: string, node: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}/nodes/${node}'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline))
                    .replace('${' + 'run' + '}', String(run))
                    .replace('${' + 'node' + '}', String(node));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNode.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNode.');
        }
        // verify required parameter 'run' is not null or undefined
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNode.');
        }
        // verify required parameter 'node' is not null or undefined
        if (node === null || node === undefined) {
            throw new Error('Required parameter node was null or undefined when calling getPipelineRunNode.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve run node details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     * @param step Name of the step
     */
    public getPipelineRunNodeStepWithHttpInfo(organization: string, pipeline: string, run: string, node: string, step: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}/nodes/${node}/steps/${step}'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline))
                    .replace('${' + 'run' + '}', String(run))
                    .replace('${' + 'node' + '}', String(node))
                    .replace('${' + 'step' + '}', String(step));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNodeStep.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNodeStep.');
        }
        // verify required parameter 'run' is not null or undefined
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNodeStep.');
        }
        // verify required parameter 'node' is not null or undefined
        if (node === null || node === undefined) {
            throw new Error('Required parameter node was null or undefined when calling getPipelineRunNodeStep.');
        }
        // verify required parameter 'step' is not null or undefined
        if (step === null || step === undefined) {
            throw new Error('Required parameter step was null or undefined when calling getPipelineRunNodeStep.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Get log for a pipeline run node step
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     * @param step Name of the step
     */
    public getPipelineRunNodeStepLogWithHttpInfo(organization: string, pipeline: string, run: string, node: string, step: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}/nodes/${node}/steps/${step}/log'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline))
                    .replace('${' + 'run' + '}', String(run))
                    .replace('${' + 'node' + '}', String(node))
                    .replace('${' + 'step' + '}', String(step));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNodeStepLog.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNodeStepLog.');
        }
        // verify required parameter 'run' is not null or undefined
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNodeStepLog.');
        }
        // verify required parameter 'node' is not null or undefined
        if (node === null || node === undefined) {
            throw new Error('Required parameter node was null or undefined when calling getPipelineRunNodeStepLog.');
        }
        // verify required parameter 'step' is not null or undefined
        if (step === null || step === undefined) {
            throw new Error('Required parameter step was null or undefined when calling getPipelineRunNodeStepLog.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve run node steps details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param node Name of the node
     */
    public getPipelineRunNodeStepsWithHttpInfo(organization: string, pipeline: string, run: string, node: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}/nodes/${node}/steps'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline))
                    .replace('${' + 'run' + '}', String(run))
                    .replace('${' + 'node' + '}', String(node));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNodeSteps.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNodeSteps.');
        }
        // verify required parameter 'run' is not null or undefined
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNodeSteps.');
        }
        // verify required parameter 'node' is not null or undefined
        if (node === null || node === undefined) {
            throw new Error('Required parameter node was null or undefined when calling getPipelineRunNodeSteps.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve run nodes details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     */
    public getPipelineRunNodesWithHttpInfo(organization: string, pipeline: string, run: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}/nodes'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline))
                    .replace('${' + 'run' + '}', String(run));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRunNodes.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRunNodes.');
        }
        // verify required parameter 'run' is not null or undefined
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling getPipelineRunNodes.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve all runs details for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     */
    public getPipelineRunsWithHttpInfo(organization: string, pipeline: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelineRuns.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineRuns.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve all pipelines details for an organization
     * @param organization Name of the organization
     */
    public getPipelinesWithHttpInfo(organization: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/'
                    .replace('${' + 'organization' + '}', String(organization));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getPipelines.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve SCM details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     */
    public getSCMWithHttpInfo(organization: string, scm: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/scm/${scm}'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'scm' + '}', String(scm));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getSCM.');
        }
        // verify required parameter 'scm' is not null or undefined
        if (scm === null || scm === undefined) {
            throw new Error('Required parameter scm was null or undefined when calling getSCM.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve SCM organization repositories details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     * @param scmOrganisation Name of the SCM organization
     * @param credentialId Credential ID
     * @param pageSize Number of items in a page
     * @param pageNumber Page number
     */
    public getSCMOrganisationRepositoriesWithHttpInfo(organization: string, scm: string, scmOrganisation: string, credentialId?: string, pageSize?: number, pageNumber?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/scm/${scm}/organizations/${scmOrganisation}/repositories'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'scm' + '}', String(scm))
                    .replace('${' + 'scmOrganisation' + '}', String(scmOrganisation));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getSCMOrganisationRepositories.');
        }
        // verify required parameter 'scm' is not null or undefined
        if (scm === null || scm === undefined) {
            throw new Error('Required parameter scm was null or undefined when calling getSCMOrganisationRepositories.');
        }
        // verify required parameter 'scmOrganisation' is not null or undefined
        if (scmOrganisation === null || scmOrganisation === undefined) {
            throw new Error('Required parameter scmOrganisation was null or undefined when calling getSCMOrganisationRepositories.');
        }
        if (credentialId !== undefined) {
            queryParameters.set('credentialId', <any>credentialId);
        }

        if (pageSize !== undefined) {
            queryParameters.set('pageSize', <any>pageSize);
        }

        if (pageNumber !== undefined) {
            queryParameters.set('pageNumber', <any>pageNumber);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve SCM organization repository details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     * @param scmOrganisation Name of the SCM organization
     * @param repository Name of the SCM repository
     * @param credentialId Credential ID
     */
    public getSCMOrganisationRepositoryWithHttpInfo(organization: string, scm: string, scmOrganisation: string, repository: string, credentialId?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/scm/${scm}/organizations/${scmOrganisation}/repositories/${repository}'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'scm' + '}', String(scm))
                    .replace('${' + 'scmOrganisation' + '}', String(scmOrganisation))
                    .replace('${' + 'repository' + '}', String(repository));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getSCMOrganisationRepository.');
        }
        // verify required parameter 'scm' is not null or undefined
        if (scm === null || scm === undefined) {
            throw new Error('Required parameter scm was null or undefined when calling getSCMOrganisationRepository.');
        }
        // verify required parameter 'scmOrganisation' is not null or undefined
        if (scmOrganisation === null || scmOrganisation === undefined) {
            throw new Error('Required parameter scmOrganisation was null or undefined when calling getSCMOrganisationRepository.');
        }
        // verify required parameter 'repository' is not null or undefined
        if (repository === null || repository === undefined) {
            throw new Error('Required parameter repository was null or undefined when calling getSCMOrganisationRepository.');
        }
        if (credentialId !== undefined) {
            queryParameters.set('credentialId', <any>credentialId);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve SCM organizations details for an organization
     * @param organization Name of the organization
     * @param scm Name of SCM
     * @param credentialId Credential ID
     */
    public getSCMOrganisationsWithHttpInfo(organization: string, scm: string, credentialId?: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/scm/${scm}/organizations'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'scm' + '}', String(scm));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getSCMOrganisations.');
        }
        // verify required parameter 'scm' is not null or undefined
        if (scm === null || scm === undefined) {
            throw new Error('Required parameter scm was null or undefined when calling getSCMOrganisations.');
        }
        if (credentialId !== undefined) {
            queryParameters.set('credentialId', <any>credentialId);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve user details for an organization
     * @param organization Name of the organization
     * @param user Name of the user
     */
    public getUserWithHttpInfo(organization: string, user: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/users/${user}'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'user' + '}', String(user));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getUser.');
        }
        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getUser.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve user favorites details for an organization
     * @param user Name of the user
     */
    public getUserFavoritesWithHttpInfo(user: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/users/${user}/favorites'
                    .replace('${' + 'user' + '}', String(user));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getUserFavorites.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Retrieve users details for an organization
     * @param organization Name of the organization
     */
    public getUsersWithHttpInfo(organization: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/users/'
                    .replace('${' + 'organization' + '}', String(organization));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling getUsers.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Replay an organization pipeline run
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     */
    public postPipelineRunWithHttpInfo(organization: string, pipeline: string, run: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}/replay'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline))
                    .replace('${' + 'run' + '}', String(run));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling postPipelineRun.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling postPipelineRun.');
        }
        // verify required parameter 'run' is not null or undefined
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling postPipelineRun.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Start a build for an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     */
    public postPipelineRunsWithHttpInfo(organization: string, pipeline: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling postPipelineRuns.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling postPipelineRuns.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Post,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Favorite/unfavorite a pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param body Set JSON string body to {\&quot;favorite\&quot;: true} to favorite, set value to false to unfavorite
     */
    public putPipelineFavoriteWithHttpInfo(organization: string, pipeline: string, body: Body, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/favorite'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling putPipelineFavorite.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling putPipelineFavorite.');
        }
        // verify required parameter 'body' is not null or undefined
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling putPipelineFavorite.');
        }

        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        headers.set('Content-Type', 'application/json');

        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            body: body == null ? '' : JSON.stringify(body), // https://github.com/angular/angular/issues/10612
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Stop a build of an organization pipeline
     * @param organization Name of the organization
     * @param pipeline Name of the pipeline
     * @param run Name of the run
     * @param blocking Set to true to make blocking stop, default: false
     * @param timeOutInSecs Timeout in seconds, default: 10 seconds
     */
    public putPipelineRunWithHttpInfo(organization: string, pipeline: string, run: string, blocking?: string, timeOutInSecs?: number, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/organizations/${organization}/pipelines/${pipeline}/runs/${run}/stop'
                    .replace('${' + 'organization' + '}', String(organization))
                    .replace('${' + 'pipeline' + '}', String(pipeline))
                    .replace('${' + 'run' + '}', String(run));

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'organization' is not null or undefined
        if (organization === null || organization === undefined) {
            throw new Error('Required parameter organization was null or undefined when calling putPipelineRun.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling putPipelineRun.');
        }
        // verify required parameter 'run' is not null or undefined
        if (run === null || run === undefined) {
            throw new Error('Required parameter run was null or undefined when calling putPipelineRun.');
        }
        if (blocking !== undefined) {
            queryParameters.set('blocking', <any>blocking);
        }

        if (timeOutInSecs !== undefined) {
            queryParameters.set('timeOutInSecs', <any>timeOutInSecs);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Put,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Search for any resource details
     * @param q Query string
     */
    public searchWithHttpInfo(q: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/search/';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'q' is not null or undefined
        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling search.');
        }
        if (q !== undefined) {
            queryParameters.set('q', <any>q);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

    /**
     * 
     * Get classes details
     * @param q Query string containing an array of class names
     */
    public searchClassesWithHttpInfo(q: string, extraHttpRequestParams?: any): Observable<Response> {
        const path = this.basePath + '/blue/rest/classes/';

        let queryParameters = new URLSearchParams();
        let headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845

        // verify required parameter 'q' is not null or undefined
        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling searchClasses.');
        }
        if (q !== undefined) {
            queryParameters.set('q', <any>q);
        }


        // to determine the Accept header
        let produces: string[] = [
            'application/json'
        ];

        // authentication (jenkins_auth) required
        // http basic authentication required
        if (this.configuration.username || this.configuration.password) {
            headers.set('Authorization', 'Basic ' + btoa(this.configuration.username + ':' + this.configuration.password));
        }

            
        let requestOptions: RequestOptionsArgs = new RequestOptions({
            method: RequestMethod.Get,
            headers: headers,
            search: queryParameters,
            withCredentials:this.configuration.withCredentials
        });
        // https://github.com/swagger-api/swagger-codegen/issues/4037
        if (extraHttpRequestParams) {
            requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
        }

        return this.http.request(path, requestOptions);
    }

}
