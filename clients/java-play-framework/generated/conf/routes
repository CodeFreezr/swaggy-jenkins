# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

GET     /api                        controllers.ApiDocController.api


#Functions for BlueOcean API
DELETE     //blue/rest/organizations/:organization}Pipelines{pipeline}Queue{queue                     controllers.BlueOceanApiController.deletePipelineQueueItem(organization: String, pipeline: String, queue: String)
GET     //blue/rest/organizations/:organization/user/                     controllers.BlueOceanApiController.getAuthenticatedUser(organization: String)
GET     //blue/rest/classes/:class                     controllers.BlueOceanApiController.getClasses(propertyClass: String)
GET     //blue/rest/organizations/:organization                     controllers.BlueOceanApiController.getOrganisation(organization: String)
GET     //blue/rest/organizations/                     controllers.BlueOceanApiController.getOrganisations()
GET     //blue/rest/organizations/:organization}Pipelines{pipeline                     controllers.BlueOceanApiController.getPipeline(organization: String, pipeline: String)
GET     //blue/rest/organizations/:organization}Pipelines{pipeline/activities                     controllers.BlueOceanApiController.getPipelineActivities(organization: String, pipeline: String)
GET     //blue/rest/organizations/:organization}Pipelines{pipeline}Branches{branch/                     controllers.BlueOceanApiController.getPipelineBranch(organization: String, pipeline: String, branch: String)
GET     //blue/rest/organizations/:organization}Pipelines{pipeline}Branches{branch}Runs{run                     controllers.BlueOceanApiController.getPipelineBranchRun(organization: String, pipeline: String, branch: String, run: String)
GET     //blue/rest/organizations/:organization}Pipelines{pipeline/branches                     controllers.BlueOceanApiController.getPipelineBranches(organization: String, pipeline: String)
GET     //blue/rest/organizations/:organization}Pipelines{folder/                     controllers.BlueOceanApiController.getPipelineFolder(organization: String, folder: String)
GET     //blue/rest/organizations/:organization}Pipelines{folder}Pipelines{pipeline                     controllers.BlueOceanApiController.getPipelineFolderPipeline(organization: String, pipeline: String, folder: String)
GET     //blue/rest/organizations/:organization}Pipelines{pipeline/queue                     controllers.BlueOceanApiController.getPipelineQueue(organization: String, pipeline: String)
GET     //blue/rest/organizations/:organization}Pipelines{pipeline}Runs{run                     controllers.BlueOceanApiController.getPipelineRun(organization: String, pipeline: String, run: String)
GET     //blue/rest/organizations/:organization}Pipelines{pipeline}Runs{run/log                     controllers.BlueOceanApiController.getPipelineRunLog(organization: String, pipeline: String, run: String)
GET     //blue/rest/organizations/:organization}Pipelines{pipeline}Runs{run}Nodes{node                     controllers.BlueOceanApiController.getPipelineRunNode(organization: String, pipeline: String, run: String, node: String)
GET     //blue/rest/organizations/:organization}Pipelines{pipeline}Runs{run}Nodes{node}Steps{step                     controllers.BlueOceanApiController.getPipelineRunNodeStep(organization: String, pipeline: String, run: String, node: String, step: String)
GET     //blue/rest/organizations/:organization}Pipelines{pipeline}Runs{run}Nodes{node}Steps{step/log                     controllers.BlueOceanApiController.getPipelineRunNodeStepLog(organization: String, pipeline: String, run: String, node: String, step: String)
GET     //blue/rest/organizations/:organization}Pipelines{pipeline}Runs{run}Nodes{node/steps                     controllers.BlueOceanApiController.getPipelineRunNodeSteps(organization: String, pipeline: String, run: String, node: String)
GET     //blue/rest/organizations/:organization}Pipelines{pipeline}Runs{run/nodes                     controllers.BlueOceanApiController.getPipelineRunNodes(organization: String, pipeline: String, run: String)
GET     //blue/rest/organizations/:organization}Pipelines{pipeline/runs                     controllers.BlueOceanApiController.getPipelineRuns(organization: String, pipeline: String)
GET     //blue/rest/organizations/:organization/pipelines/                     controllers.BlueOceanApiController.getPipelines(organization: String)
GET     //blue/rest/organizations/:organization}Scm{scm                     controllers.BlueOceanApiController.getSCM(organization: String, scm: String)
GET     //blue/rest/organizations/:organization}Scm{scm}Organizations{scmOrganisation/repositories                     controllers.BlueOceanApiController.getSCMOrganisationRepositories(organization: String, scm: String, scmOrganisation: String)
GET     //blue/rest/organizations/:organization}Scm{scm}Organizations{scmOrganisation}Repositories{repository                     controllers.BlueOceanApiController.getSCMOrganisationRepository(organization: String, scm: String, scmOrganisation: String, repository: String)
GET     //blue/rest/organizations/:organization}Scm{scm/organizations                     controllers.BlueOceanApiController.getSCMOrganisations(organization: String, scm: String)
GET     //blue/rest/organizations/:organization}Users{user                     controllers.BlueOceanApiController.getUser(organization: String, user: String)
GET     //blue/rest/users/:user/favorites                     controllers.BlueOceanApiController.getUserFavorites(user: String)
GET     //blue/rest/organizations/:organization/users/                     controllers.BlueOceanApiController.getUsers(organization: String)
POST     //blue/rest/organizations/:organization}Pipelines{pipeline}Runs{run/replay                     controllers.BlueOceanApiController.postPipelineRun(organization: String, pipeline: String, run: String)
POST     //blue/rest/organizations/:organization}Pipelines{pipeline/runs                     controllers.BlueOceanApiController.postPipelineRuns(organization: String, pipeline: String)
PUT     //blue/rest/organizations/:organization}Pipelines{pipeline/favorite                     controllers.BlueOceanApiController.putPipelineFavorite(organization: String, pipeline: String)
PUT     //blue/rest/organizations/:organization}Pipelines{pipeline}Runs{run/stop                     controllers.BlueOceanApiController.putPipelineRun(organization: String, pipeline: String, run: String)
GET     //blue/rest/search/                     controllers.BlueOceanApiController.search()
GET     //blue/rest/classes/                     controllers.BlueOceanApiController.searchClasses()

#Functions for RemoteAccess API
GET     //computer/api/json                     controllers.RemoteAccessApiController.getComputer()
GET     //crumbIssuer/api/json                     controllers.RemoteAccessApiController.getCrumb()
GET     //api/json                     controllers.RemoteAccessApiController.getJenkins()
GET     //job/:name/api/json                     controllers.RemoteAccessApiController.getJob(name: String)
GET     //job/:name/config.xml                     controllers.RemoteAccessApiController.getJobConfig(name: String)
GET     //job/:name/lastBuild/api/json                     controllers.RemoteAccessApiController.getJobLastBuild(name: String)
GET     //job/:name}{number/logText/progressiveText                     controllers.RemoteAccessApiController.getJobProgressiveText(name: String, number: String)
GET     //queue/api/json                     controllers.RemoteAccessApiController.getQueue()
GET     //queue/item/:number/api/json                     controllers.RemoteAccessApiController.getQueueItem(number: String)
GET     //view/:name/api/json                     controllers.RemoteAccessApiController.getView(name: String)
GET     //view/:name/config.xml                     controllers.RemoteAccessApiController.getViewConfig(name: String)
HEAD     //api/json                     controllers.RemoteAccessApiController.headJenkins()
POST     //createItem                     controllers.RemoteAccessApiController.postCreateItem()
POST     //createView                     controllers.RemoteAccessApiController.postCreateView()
POST     //job/:name/build                     controllers.RemoteAccessApiController.postJobBuild(name: String)
POST     //job/:name/config.xml                     controllers.RemoteAccessApiController.postJobConfig(name: String)
POST     //job/:name/doDelete                     controllers.RemoteAccessApiController.postJobDelete(name: String)
POST     //job/:name/disable                     controllers.RemoteAccessApiController.postJobDisable(name: String)
POST     //job/:name/enable                     controllers.RemoteAccessApiController.postJobEnable(name: String)
POST     //job/:name/lastBuild/stop                     controllers.RemoteAccessApiController.postJobLastBuildStop(name: String)
POST     //view/:name/config.xml                     controllers.RemoteAccessApiController.postViewConfig(name: String)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)