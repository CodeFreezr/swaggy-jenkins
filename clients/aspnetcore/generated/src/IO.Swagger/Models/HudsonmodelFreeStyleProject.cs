/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class HudsonmodelFreeStyleProject :  IEquatable<HudsonmodelFreeStyleProject>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="HudsonmodelFreeStyleProject" /> class.
        /// </summary>
        /// <param name="Class">Class.</param>
        /// <param name="Name">Name.</param>
        /// <param name="Url">Url.</param>
        /// <param name="Color">Color.</param>
        /// <param name="Actions">Actions.</param>
        /// <param name="Description">Description.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="DisplayNameOrNull">DisplayNameOrNull.</param>
        /// <param name="FullDisplayName">FullDisplayName.</param>
        /// <param name="FullName">FullName.</param>
        /// <param name="Buildable">Buildable.</param>
        /// <param name="Builds">Builds.</param>
        /// <param name="FirstBuild">FirstBuild.</param>
        /// <param name="HealthReport">HealthReport.</param>
        /// <param name="InQueue">InQueue.</param>
        /// <param name="KeepDependencies">KeepDependencies.</param>
        /// <param name="LastBuild">LastBuild.</param>
        /// <param name="LastCompletedBuild">LastCompletedBuild.</param>
        /// <param name="LastFailedBuild">LastFailedBuild.</param>
        /// <param name="LastStableBuild">LastStableBuild.</param>
        /// <param name="LastSuccessfulBuild">LastSuccessfulBuild.</param>
        /// <param name="LastUnstableBuild">LastUnstableBuild.</param>
        /// <param name="LastUnsuccessfulBuild">LastUnsuccessfulBuild.</param>
        /// <param name="NextBuildNumber">NextBuildNumber.</param>
        /// <param name="QueueItem">QueueItem.</param>
        /// <param name="ConcurrentBuild">ConcurrentBuild.</param>
        /// <param name="Scm">Scm.</param>
        public HudsonmodelFreeStyleProject(string Class = default(string), string Name = default(string), string Url = default(string), string Color = default(string), List<HudsonmodelFreeStyleProjectactions> Actions = default(List<HudsonmodelFreeStyleProjectactions>), string Description = default(string), string DisplayName = default(string), string DisplayNameOrNull = default(string), string FullDisplayName = default(string), string FullName = default(string), bool? Buildable = default(bool?), List<HudsonmodelFreeStyleBuild> Builds = default(List<HudsonmodelFreeStyleBuild>), HudsonmodelFreeStyleBuild FirstBuild = default(HudsonmodelFreeStyleBuild), List<HudsonmodelFreeStyleProjecthealthReport> HealthReport = default(List<HudsonmodelFreeStyleProjecthealthReport>), bool? InQueue = default(bool?), bool? KeepDependencies = default(bool?), HudsonmodelFreeStyleBuild LastBuild = default(HudsonmodelFreeStyleBuild), HudsonmodelFreeStyleBuild LastCompletedBuild = default(HudsonmodelFreeStyleBuild), string LastFailedBuild = default(string), HudsonmodelFreeStyleBuild LastStableBuild = default(HudsonmodelFreeStyleBuild), HudsonmodelFreeStyleBuild LastSuccessfulBuild = default(HudsonmodelFreeStyleBuild), string LastUnstableBuild = default(string), string LastUnsuccessfulBuild = default(string), int? NextBuildNumber = default(int?), string QueueItem = default(string), bool? ConcurrentBuild = default(bool?), HudsonscmNullSCM Scm = default(HudsonscmNullSCM))
        {
            this.Class = Class;
            this.Name = Name;
            this.Url = Url;
            this.Color = Color;
            this.Actions = Actions;
            this.Description = Description;
            this.DisplayName = DisplayName;
            this.DisplayNameOrNull = DisplayNameOrNull;
            this.FullDisplayName = FullDisplayName;
            this.FullName = FullName;
            this.Buildable = Buildable;
            this.Builds = Builds;
            this.FirstBuild = FirstBuild;
            this.HealthReport = HealthReport;
            this.InQueue = InQueue;
            this.KeepDependencies = KeepDependencies;
            this.LastBuild = LastBuild;
            this.LastCompletedBuild = LastCompletedBuild;
            this.LastFailedBuild = LastFailedBuild;
            this.LastStableBuild = LastStableBuild;
            this.LastSuccessfulBuild = LastSuccessfulBuild;
            this.LastUnstableBuild = LastUnstableBuild;
            this.LastUnsuccessfulBuild = LastUnsuccessfulBuild;
            this.NextBuildNumber = NextBuildNumber;
            this.QueueItem = QueueItem;
            this.ConcurrentBuild = ConcurrentBuild;
            this.Scm = Scm;
            
        }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [DataMember(Name="_class")]
        public string Class { get; set; }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name")]
        public string Name { get; set; }
        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url")]
        public string Url { get; set; }
        /// <summary>
        /// Gets or Sets Color
        /// </summary>
        [DataMember(Name="color")]
        public string Color { get; set; }
        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name="actions")]
        public List<HudsonmodelFreeStyleProjectactions> Actions { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName")]
        public string DisplayName { get; set; }
        /// <summary>
        /// Gets or Sets DisplayNameOrNull
        /// </summary>
        [DataMember(Name="displayNameOrNull")]
        public string DisplayNameOrNull { get; set; }
        /// <summary>
        /// Gets or Sets FullDisplayName
        /// </summary>
        [DataMember(Name="fullDisplayName")]
        public string FullDisplayName { get; set; }
        /// <summary>
        /// Gets or Sets FullName
        /// </summary>
        [DataMember(Name="fullName")]
        public string FullName { get; set; }
        /// <summary>
        /// Gets or Sets Buildable
        /// </summary>
        [DataMember(Name="buildable")]
        public bool? Buildable { get; set; }
        /// <summary>
        /// Gets or Sets Builds
        /// </summary>
        [DataMember(Name="builds")]
        public List<HudsonmodelFreeStyleBuild> Builds { get; set; }
        /// <summary>
        /// Gets or Sets FirstBuild
        /// </summary>
        [DataMember(Name="firstBuild")]
        public HudsonmodelFreeStyleBuild FirstBuild { get; set; }
        /// <summary>
        /// Gets or Sets HealthReport
        /// </summary>
        [DataMember(Name="healthReport")]
        public List<HudsonmodelFreeStyleProjecthealthReport> HealthReport { get; set; }
        /// <summary>
        /// Gets or Sets InQueue
        /// </summary>
        [DataMember(Name="inQueue")]
        public bool? InQueue { get; set; }
        /// <summary>
        /// Gets or Sets KeepDependencies
        /// </summary>
        [DataMember(Name="keepDependencies")]
        public bool? KeepDependencies { get; set; }
        /// <summary>
        /// Gets or Sets LastBuild
        /// </summary>
        [DataMember(Name="lastBuild")]
        public HudsonmodelFreeStyleBuild LastBuild { get; set; }
        /// <summary>
        /// Gets or Sets LastCompletedBuild
        /// </summary>
        [DataMember(Name="lastCompletedBuild")]
        public HudsonmodelFreeStyleBuild LastCompletedBuild { get; set; }
        /// <summary>
        /// Gets or Sets LastFailedBuild
        /// </summary>
        [DataMember(Name="lastFailedBuild")]
        public string LastFailedBuild { get; set; }
        /// <summary>
        /// Gets or Sets LastStableBuild
        /// </summary>
        [DataMember(Name="lastStableBuild")]
        public HudsonmodelFreeStyleBuild LastStableBuild { get; set; }
        /// <summary>
        /// Gets or Sets LastSuccessfulBuild
        /// </summary>
        [DataMember(Name="lastSuccessfulBuild")]
        public HudsonmodelFreeStyleBuild LastSuccessfulBuild { get; set; }
        /// <summary>
        /// Gets or Sets LastUnstableBuild
        /// </summary>
        [DataMember(Name="lastUnstableBuild")]
        public string LastUnstableBuild { get; set; }
        /// <summary>
        /// Gets or Sets LastUnsuccessfulBuild
        /// </summary>
        [DataMember(Name="lastUnsuccessfulBuild")]
        public string LastUnsuccessfulBuild { get; set; }
        /// <summary>
        /// Gets or Sets NextBuildNumber
        /// </summary>
        [DataMember(Name="nextBuildNumber")]
        public int? NextBuildNumber { get; set; }
        /// <summary>
        /// Gets or Sets QueueItem
        /// </summary>
        [DataMember(Name="queueItem")]
        public string QueueItem { get; set; }
        /// <summary>
        /// Gets or Sets ConcurrentBuild
        /// </summary>
        [DataMember(Name="concurrentBuild")]
        public bool? ConcurrentBuild { get; set; }
        /// <summary>
        /// Gets or Sets Scm
        /// </summary>
        [DataMember(Name="scm")]
        public HudsonscmNullSCM Scm { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HudsonmodelFreeStyleProject {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  DisplayNameOrNull: ").Append(DisplayNameOrNull).Append("\n");
            sb.Append("  FullDisplayName: ").Append(FullDisplayName).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  Buildable: ").Append(Buildable).Append("\n");
            sb.Append("  Builds: ").Append(Builds).Append("\n");
            sb.Append("  FirstBuild: ").Append(FirstBuild).Append("\n");
            sb.Append("  HealthReport: ").Append(HealthReport).Append("\n");
            sb.Append("  InQueue: ").Append(InQueue).Append("\n");
            sb.Append("  KeepDependencies: ").Append(KeepDependencies).Append("\n");
            sb.Append("  LastBuild: ").Append(LastBuild).Append("\n");
            sb.Append("  LastCompletedBuild: ").Append(LastCompletedBuild).Append("\n");
            sb.Append("  LastFailedBuild: ").Append(LastFailedBuild).Append("\n");
            sb.Append("  LastStableBuild: ").Append(LastStableBuild).Append("\n");
            sb.Append("  LastSuccessfulBuild: ").Append(LastSuccessfulBuild).Append("\n");
            sb.Append("  LastUnstableBuild: ").Append(LastUnstableBuild).Append("\n");
            sb.Append("  LastUnsuccessfulBuild: ").Append(LastUnsuccessfulBuild).Append("\n");
            sb.Append("  NextBuildNumber: ").Append(NextBuildNumber).Append("\n");
            sb.Append("  QueueItem: ").Append(QueueItem).Append("\n");
            sb.Append("  ConcurrentBuild: ").Append(ConcurrentBuild).Append("\n");
            sb.Append("  Scm: ").Append(Scm).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((HudsonmodelFreeStyleProject)obj);
        }

        /// <summary>
        /// Returns true if HudsonmodelFreeStyleProject instances are equal
        /// </summary>
        /// <param name="other">Instance of HudsonmodelFreeStyleProject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HudsonmodelFreeStyleProject other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Class == other.Class ||
                    this.Class != null &&
                    this.Class.Equals(other.Class)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.Color == other.Color ||
                    this.Color != null &&
                    this.Color.Equals(other.Color)
                ) && 
                (
                    this.Actions == other.Actions ||
                    this.Actions != null &&
                    this.Actions.SequenceEqual(other.Actions)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.DisplayNameOrNull == other.DisplayNameOrNull ||
                    this.DisplayNameOrNull != null &&
                    this.DisplayNameOrNull.Equals(other.DisplayNameOrNull)
                ) && 
                (
                    this.FullDisplayName == other.FullDisplayName ||
                    this.FullDisplayName != null &&
                    this.FullDisplayName.Equals(other.FullDisplayName)
                ) && 
                (
                    this.FullName == other.FullName ||
                    this.FullName != null &&
                    this.FullName.Equals(other.FullName)
                ) && 
                (
                    this.Buildable == other.Buildable ||
                    this.Buildable != null &&
                    this.Buildable.Equals(other.Buildable)
                ) && 
                (
                    this.Builds == other.Builds ||
                    this.Builds != null &&
                    this.Builds.SequenceEqual(other.Builds)
                ) && 
                (
                    this.FirstBuild == other.FirstBuild ||
                    this.FirstBuild != null &&
                    this.FirstBuild.Equals(other.FirstBuild)
                ) && 
                (
                    this.HealthReport == other.HealthReport ||
                    this.HealthReport != null &&
                    this.HealthReport.SequenceEqual(other.HealthReport)
                ) && 
                (
                    this.InQueue == other.InQueue ||
                    this.InQueue != null &&
                    this.InQueue.Equals(other.InQueue)
                ) && 
                (
                    this.KeepDependencies == other.KeepDependencies ||
                    this.KeepDependencies != null &&
                    this.KeepDependencies.Equals(other.KeepDependencies)
                ) && 
                (
                    this.LastBuild == other.LastBuild ||
                    this.LastBuild != null &&
                    this.LastBuild.Equals(other.LastBuild)
                ) && 
                (
                    this.LastCompletedBuild == other.LastCompletedBuild ||
                    this.LastCompletedBuild != null &&
                    this.LastCompletedBuild.Equals(other.LastCompletedBuild)
                ) && 
                (
                    this.LastFailedBuild == other.LastFailedBuild ||
                    this.LastFailedBuild != null &&
                    this.LastFailedBuild.Equals(other.LastFailedBuild)
                ) && 
                (
                    this.LastStableBuild == other.LastStableBuild ||
                    this.LastStableBuild != null &&
                    this.LastStableBuild.Equals(other.LastStableBuild)
                ) && 
                (
                    this.LastSuccessfulBuild == other.LastSuccessfulBuild ||
                    this.LastSuccessfulBuild != null &&
                    this.LastSuccessfulBuild.Equals(other.LastSuccessfulBuild)
                ) && 
                (
                    this.LastUnstableBuild == other.LastUnstableBuild ||
                    this.LastUnstableBuild != null &&
                    this.LastUnstableBuild.Equals(other.LastUnstableBuild)
                ) && 
                (
                    this.LastUnsuccessfulBuild == other.LastUnsuccessfulBuild ||
                    this.LastUnsuccessfulBuild != null &&
                    this.LastUnsuccessfulBuild.Equals(other.LastUnsuccessfulBuild)
                ) && 
                (
                    this.NextBuildNumber == other.NextBuildNumber ||
                    this.NextBuildNumber != null &&
                    this.NextBuildNumber.Equals(other.NextBuildNumber)
                ) && 
                (
                    this.QueueItem == other.QueueItem ||
                    this.QueueItem != null &&
                    this.QueueItem.Equals(other.QueueItem)
                ) && 
                (
                    this.ConcurrentBuild == other.ConcurrentBuild ||
                    this.ConcurrentBuild != null &&
                    this.ConcurrentBuild.Equals(other.ConcurrentBuild)
                ) && 
                (
                    this.Scm == other.Scm ||
                    this.Scm != null &&
                    this.Scm.Equals(other.Scm)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Class != null)
                    hash = hash * 59 + this.Class.GetHashCode();
                    if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                    if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                    if (this.Color != null)
                    hash = hash * 59 + this.Color.GetHashCode();
                    if (this.Actions != null)
                    hash = hash * 59 + this.Actions.GetHashCode();
                    if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                    if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                    if (this.DisplayNameOrNull != null)
                    hash = hash * 59 + this.DisplayNameOrNull.GetHashCode();
                    if (this.FullDisplayName != null)
                    hash = hash * 59 + this.FullDisplayName.GetHashCode();
                    if (this.FullName != null)
                    hash = hash * 59 + this.FullName.GetHashCode();
                    if (this.Buildable != null)
                    hash = hash * 59 + this.Buildable.GetHashCode();
                    if (this.Builds != null)
                    hash = hash * 59 + this.Builds.GetHashCode();
                    if (this.FirstBuild != null)
                    hash = hash * 59 + this.FirstBuild.GetHashCode();
                    if (this.HealthReport != null)
                    hash = hash * 59 + this.HealthReport.GetHashCode();
                    if (this.InQueue != null)
                    hash = hash * 59 + this.InQueue.GetHashCode();
                    if (this.KeepDependencies != null)
                    hash = hash * 59 + this.KeepDependencies.GetHashCode();
                    if (this.LastBuild != null)
                    hash = hash * 59 + this.LastBuild.GetHashCode();
                    if (this.LastCompletedBuild != null)
                    hash = hash * 59 + this.LastCompletedBuild.GetHashCode();
                    if (this.LastFailedBuild != null)
                    hash = hash * 59 + this.LastFailedBuild.GetHashCode();
                    if (this.LastStableBuild != null)
                    hash = hash * 59 + this.LastStableBuild.GetHashCode();
                    if (this.LastSuccessfulBuild != null)
                    hash = hash * 59 + this.LastSuccessfulBuild.GetHashCode();
                    if (this.LastUnstableBuild != null)
                    hash = hash * 59 + this.LastUnstableBuild.GetHashCode();
                    if (this.LastUnsuccessfulBuild != null)
                    hash = hash * 59 + this.LastUnsuccessfulBuild.GetHashCode();
                    if (this.NextBuildNumber != null)
                    hash = hash * 59 + this.NextBuildNumber.GetHashCode();
                    if (this.QueueItem != null)
                    hash = hash * 59 + this.QueueItem.GetHashCode();
                    if (this.ConcurrentBuild != null)
                    hash = hash * 59 + this.ConcurrentBuild.GetHashCode();
                    if (this.Scm != null)
                    hash = hash * 59 + this.Scm.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(HudsonmodelFreeStyleProject left, HudsonmodelFreeStyleProject right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HudsonmodelFreeStyleProject left, HudsonmodelFreeStyleProject right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
