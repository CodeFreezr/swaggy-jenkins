/*
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{

    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class HudsonmodelHudson :  IEquatable<HudsonmodelHudson>
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="HudsonmodelHudson" /> class.
        /// </summary>
        /// <param name="Class">Class.</param>
        /// <param name="AssignedLabels">AssignedLabels.</param>
        /// <param name="Mode">Mode.</param>
        /// <param name="NodeDescription">NodeDescription.</param>
        /// <param name="NodeName">NodeName.</param>
        /// <param name="NumExecutors">NumExecutors.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Jobs">Jobs.</param>
        /// <param name="PrimaryView">PrimaryView.</param>
        /// <param name="QuietingDown">QuietingDown.</param>
        /// <param name="SlaveAgentPort">SlaveAgentPort.</param>
        /// <param name="UnlabeledLoad">UnlabeledLoad.</param>
        /// <param name="UseCrumbs">UseCrumbs.</param>
        /// <param name="UseSecurity">UseSecurity.</param>
        /// <param name="Views">Views.</param>
        public HudsonmodelHudson(string Class = default(string), List<HudsonmodelHudsonassignedLabels> AssignedLabels = default(List<HudsonmodelHudsonassignedLabels>), string Mode = default(string), string NodeDescription = default(string), string NodeName = default(string), int? NumExecutors = default(int?), string Description = default(string), List<HudsonmodelFreeStyleProject> Jobs = default(List<HudsonmodelFreeStyleProject>), HudsonmodelAllView PrimaryView = default(HudsonmodelAllView), bool? QuietingDown = default(bool?), int? SlaveAgentPort = default(int?), JenkinsmodelUnlabeledLoadStatistics UnlabeledLoad = default(JenkinsmodelUnlabeledLoadStatistics), bool? UseCrumbs = default(bool?), bool? UseSecurity = default(bool?), List<HudsonmodelAllView> Views = default(List<HudsonmodelAllView>))
        {
            this.Class = Class;
            this.AssignedLabels = AssignedLabels;
            this.Mode = Mode;
            this.NodeDescription = NodeDescription;
            this.NodeName = NodeName;
            this.NumExecutors = NumExecutors;
            this.Description = Description;
            this.Jobs = Jobs;
            this.PrimaryView = PrimaryView;
            this.QuietingDown = QuietingDown;
            this.SlaveAgentPort = SlaveAgentPort;
            this.UnlabeledLoad = UnlabeledLoad;
            this.UseCrumbs = UseCrumbs;
            this.UseSecurity = UseSecurity;
            this.Views = Views;
            
        }

        /// <summary>
        /// Gets or Sets Class
        /// </summary>
        [DataMember(Name="_class")]
        public string Class { get; set; }
        /// <summary>
        /// Gets or Sets AssignedLabels
        /// </summary>
        [DataMember(Name="assignedLabels")]
        public List<HudsonmodelHudsonassignedLabels> AssignedLabels { get; set; }
        /// <summary>
        /// Gets or Sets Mode
        /// </summary>
        [DataMember(Name="mode")]
        public string Mode { get; set; }
        /// <summary>
        /// Gets or Sets NodeDescription
        /// </summary>
        [DataMember(Name="nodeDescription")]
        public string NodeDescription { get; set; }
        /// <summary>
        /// Gets or Sets NodeName
        /// </summary>
        [DataMember(Name="nodeName")]
        public string NodeName { get; set; }
        /// <summary>
        /// Gets or Sets NumExecutors
        /// </summary>
        [DataMember(Name="numExecutors")]
        public int? NumExecutors { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets Jobs
        /// </summary>
        [DataMember(Name="jobs")]
        public List<HudsonmodelFreeStyleProject> Jobs { get; set; }
        /// <summary>
        /// Gets or Sets PrimaryView
        /// </summary>
        [DataMember(Name="primaryView")]
        public HudsonmodelAllView PrimaryView { get; set; }
        /// <summary>
        /// Gets or Sets QuietingDown
        /// </summary>
        [DataMember(Name="quietingDown")]
        public bool? QuietingDown { get; set; }
        /// <summary>
        /// Gets or Sets SlaveAgentPort
        /// </summary>
        [DataMember(Name="slaveAgentPort")]
        public int? SlaveAgentPort { get; set; }
        /// <summary>
        /// Gets or Sets UnlabeledLoad
        /// </summary>
        [DataMember(Name="unlabeledLoad")]
        public JenkinsmodelUnlabeledLoadStatistics UnlabeledLoad { get; set; }
        /// <summary>
        /// Gets or Sets UseCrumbs
        /// </summary>
        [DataMember(Name="useCrumbs")]
        public bool? UseCrumbs { get; set; }
        /// <summary>
        /// Gets or Sets UseSecurity
        /// </summary>
        [DataMember(Name="useSecurity")]
        public bool? UseSecurity { get; set; }
        /// <summary>
        /// Gets or Sets Views
        /// </summary>
        [DataMember(Name="views")]
        public List<HudsonmodelAllView> Views { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HudsonmodelHudson {\n");
            sb.Append("  Class: ").Append(Class).Append("\n");
            sb.Append("  AssignedLabels: ").Append(AssignedLabels).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  NodeDescription: ").Append(NodeDescription).Append("\n");
            sb.Append("  NodeName: ").Append(NodeName).Append("\n");
            sb.Append("  NumExecutors: ").Append(NumExecutors).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Jobs: ").Append(Jobs).Append("\n");
            sb.Append("  PrimaryView: ").Append(PrimaryView).Append("\n");
            sb.Append("  QuietingDown: ").Append(QuietingDown).Append("\n");
            sb.Append("  SlaveAgentPort: ").Append(SlaveAgentPort).Append("\n");
            sb.Append("  UnlabeledLoad: ").Append(UnlabeledLoad).Append("\n");
            sb.Append("  UseCrumbs: ").Append(UseCrumbs).Append("\n");
            sb.Append("  UseSecurity: ").Append(UseSecurity).Append("\n");
            sb.Append("  Views: ").Append(Views).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            if (obj.GetType() != GetType()) return false;
            return Equals((HudsonmodelHudson)obj);
        }

        /// <summary>
        /// Returns true if HudsonmodelHudson instances are equal
        /// </summary>
        /// <param name="other">Instance of HudsonmodelHudson to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HudsonmodelHudson other)
        {

            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    this.Class == other.Class ||
                    this.Class != null &&
                    this.Class.Equals(other.Class)
                ) && 
                (
                    this.AssignedLabels == other.AssignedLabels ||
                    this.AssignedLabels != null &&
                    this.AssignedLabels.SequenceEqual(other.AssignedLabels)
                ) && 
                (
                    this.Mode == other.Mode ||
                    this.Mode != null &&
                    this.Mode.Equals(other.Mode)
                ) && 
                (
                    this.NodeDescription == other.NodeDescription ||
                    this.NodeDescription != null &&
                    this.NodeDescription.Equals(other.NodeDescription)
                ) && 
                (
                    this.NodeName == other.NodeName ||
                    this.NodeName != null &&
                    this.NodeName.Equals(other.NodeName)
                ) && 
                (
                    this.NumExecutors == other.NumExecutors ||
                    this.NumExecutors != null &&
                    this.NumExecutors.Equals(other.NumExecutors)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.Jobs == other.Jobs ||
                    this.Jobs != null &&
                    this.Jobs.SequenceEqual(other.Jobs)
                ) && 
                (
                    this.PrimaryView == other.PrimaryView ||
                    this.PrimaryView != null &&
                    this.PrimaryView.Equals(other.PrimaryView)
                ) && 
                (
                    this.QuietingDown == other.QuietingDown ||
                    this.QuietingDown != null &&
                    this.QuietingDown.Equals(other.QuietingDown)
                ) && 
                (
                    this.SlaveAgentPort == other.SlaveAgentPort ||
                    this.SlaveAgentPort != null &&
                    this.SlaveAgentPort.Equals(other.SlaveAgentPort)
                ) && 
                (
                    this.UnlabeledLoad == other.UnlabeledLoad ||
                    this.UnlabeledLoad != null &&
                    this.UnlabeledLoad.Equals(other.UnlabeledLoad)
                ) && 
                (
                    this.UseCrumbs == other.UseCrumbs ||
                    this.UseCrumbs != null &&
                    this.UseCrumbs.Equals(other.UseCrumbs)
                ) && 
                (
                    this.UseSecurity == other.UseSecurity ||
                    this.UseSecurity != null &&
                    this.UseSecurity.Equals(other.UseSecurity)
                ) && 
                (
                    this.Views == other.Views ||
                    this.Views != null &&
                    this.Views.SequenceEqual(other.Views)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                    if (this.Class != null)
                    hash = hash * 59 + this.Class.GetHashCode();
                    if (this.AssignedLabels != null)
                    hash = hash * 59 + this.AssignedLabels.GetHashCode();
                    if (this.Mode != null)
                    hash = hash * 59 + this.Mode.GetHashCode();
                    if (this.NodeDescription != null)
                    hash = hash * 59 + this.NodeDescription.GetHashCode();
                    if (this.NodeName != null)
                    hash = hash * 59 + this.NodeName.GetHashCode();
                    if (this.NumExecutors != null)
                    hash = hash * 59 + this.NumExecutors.GetHashCode();
                    if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                    if (this.Jobs != null)
                    hash = hash * 59 + this.Jobs.GetHashCode();
                    if (this.PrimaryView != null)
                    hash = hash * 59 + this.PrimaryView.GetHashCode();
                    if (this.QuietingDown != null)
                    hash = hash * 59 + this.QuietingDown.GetHashCode();
                    if (this.SlaveAgentPort != null)
                    hash = hash * 59 + this.SlaveAgentPort.GetHashCode();
                    if (this.UnlabeledLoad != null)
                    hash = hash * 59 + this.UnlabeledLoad.GetHashCode();
                    if (this.UseCrumbs != null)
                    hash = hash * 59 + this.UseCrumbs.GetHashCode();
                    if (this.UseSecurity != null)
                    hash = hash * 59 + this.UseSecurity.GetHashCode();
                    if (this.Views != null)
                    hash = hash * 59 + this.Views.GetHashCode();
                return hash;
            }
        }

        #region Operators

        public static bool operator ==(HudsonmodelHudson left, HudsonmodelHudson right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HudsonmodelHudson left, HudsonmodelHudson right)
        {
            return !Equals(left, right);
        }

        #endregion Operators

    }
}
