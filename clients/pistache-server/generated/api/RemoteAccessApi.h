/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 0.1.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * RemoteAccessApi.h
 *
 * 
 */

#ifndef RemoteAccessApi_H_
#define RemoteAccessApi_H_


#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include "ComputerSet.h"
#include "DefaultCrumbIssuer.h"
#include "FreeStyleBuild.h"
#include "FreeStyleProject.h"
#include "Hudson.h"
#include "ListView.h"
#include "Queue.h"
#include <string>

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

class  RemoteAccessApi {
public:
    RemoteAccessApi(Pistache::Address addr);
    virtual ~RemoteAccessApi() {};
    void init(size_t thr);
    void start();
    void shutdown();

    const std::string base = "/";

private:
    void setupRoutes();

    void get_computer_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_crumb_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_jenkins_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_job_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_job_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_job_last_build_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_job_progressive_text_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_queue_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_queue_item_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_view_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void get_view_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void head_jenkins_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_create_item_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_create_view_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_job_build_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_job_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_job_delete_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_job_disable_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_job_enable_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_job_last_build_stop_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void post_view_config_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);
    void remote_access_api_default_handler(const Pistache::Rest::Request &request, Pistache::Http::ResponseWriter response);

    std::shared_ptr<Pistache::Http::Endpoint> httpEndpoint;
    Pistache::Rest::Router router;


    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve computer details
    /// </remarks>
    /// <param name="depth">Recursion depth in response model</param>
    virtual void get_computer(const Optional<int32_t> &depth, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve CSRF protection token
    /// </remarks>
    virtual void get_crumb(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve Jenkins details
    /// </remarks>
    virtual void get_jenkins(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve job details
    /// </remarks>
    /// <param name="name">Name of the job</param>
    virtual void get_job(const std::string &name, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve job configuration
    /// </remarks>
    /// <param name="name">Name of the job</param>
    virtual void get_job_config(const std::string &name, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve job&#39;s last build details
    /// </remarks>
    /// <param name="name">Name of the job</param>
    virtual void get_job_last_build(const std::string &name, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve job&#39;s build progressive text output
    /// </remarks>
    /// <param name="name">Name of the job</param>
    /// <param name="number">Build number</param>
    /// <param name="start">Starting point of progressive text output</param>
    virtual void get_job_progressive_text(const std::string &name, const std::string &number, const Optional<std::string> &start, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve queue details
    /// </remarks>
    virtual void get_queue(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve queued item details
    /// </remarks>
    /// <param name="number">Queue number</param>
    virtual void get_queue_item(const std::string &number, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve view details
    /// </remarks>
    /// <param name="name">Name of the view</param>
    virtual void get_view(const std::string &name, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve view configuration
    /// </remarks>
    /// <param name="name">Name of the view</param>
    virtual void get_view_config(const std::string &name, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Retrieve Jenkins headers
    /// </remarks>
    virtual void head_jenkins(Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new job using job configuration, or copied from an existing job
    /// </remarks>
    /// <param name="name">Name of the new job</param>
    /// <param name="from">Existing job to copy from (optional)</param>
    /// <param name="mode">Set to &#39;copy&#39; for copying an existing job (optional)</param>
    /// <param name="body">Job configuration in config.xml format (optional)</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional)</param>
    /// <param name="contentType">Content type header application/xml (optional)</param>
    virtual void post_create_item(const Optional<std::string> &name, const Optional<std::string> &from, const Optional<std::string> &mode, const std::string &body, const Optional<Net::Http::Header::Raw> &jenkinsCrumb, const Optional<Net::Http::Header::Raw> &contentType, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Create a new view using view configuration
    /// </remarks>
    /// <param name="name">Name of the new view</param>
    /// <param name="body">View configuration in config.xml format (optional)</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional)</param>
    /// <param name="contentType">Content type header application/xml (optional)</param>
    virtual void post_create_view(const Optional<std::string> &name, const std::string &body, const Optional<Net::Http::Header::Raw> &jenkinsCrumb, const Optional<Net::Http::Header::Raw> &contentType, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Build a job
    /// </remarks>
    /// <param name="name">Name of the job</param>
    /// <param name="json"></param>
    /// <param name="token"> (optional)</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional)</param>
    virtual void post_job_build(const std::string &name, const Optional<std::string> &json, const Optional<std::string> &token, const Optional<Net::Http::Header::Raw> &jenkinsCrumb, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update job configuration
    /// </remarks>
    /// <param name="name">Name of the job</param>
    /// <param name="body">Job configuration in config.xml format</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional)</param>
    virtual void post_job_config(const std::string &name, const std::string &body, const Optional<Net::Http::Header::Raw> &jenkinsCrumb, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Delete a job
    /// </remarks>
    /// <param name="name">Name of the job</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional)</param>
    virtual void post_job_delete(const std::string &name, const Optional<Net::Http::Header::Raw> &jenkinsCrumb, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Disable a job
    /// </remarks>
    /// <param name="name">Name of the job</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional)</param>
    virtual void post_job_disable(const std::string &name, const Optional<Net::Http::Header::Raw> &jenkinsCrumb, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Enable a job
    /// </remarks>
    /// <param name="name">Name of the job</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional)</param>
    virtual void post_job_enable(const std::string &name, const Optional<Net::Http::Header::Raw> &jenkinsCrumb, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Stop a job
    /// </remarks>
    /// <param name="name">Name of the job</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional)</param>
    virtual void post_job_last_build_stop(const std::string &name, const Optional<Net::Http::Header::Raw> &jenkinsCrumb, Pistache::Http::ResponseWriter &response) = 0;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update view configuration
    /// </remarks>
    /// <param name="name">Name of the view</param>
    /// <param name="body">View configuration in config.xml format</param>
    /// <param name="jenkinsCrumb">CSRF protection token (optional)</param>
    virtual void post_view_config(const std::string &name, const std::string &body, const Optional<Net::Http::Header::Raw> &jenkinsCrumb, Pistache::Http::ResponseWriter &response) = 0;

};

}
}
}
}

#endif /* RemoteAccessApi_H_ */

