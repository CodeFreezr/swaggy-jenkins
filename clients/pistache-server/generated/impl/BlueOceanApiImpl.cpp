/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 0.1.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/

#include "BlueOceanApiImpl.h"

namespace io {
namespace swagger {
namespace server {
namespace api {

using namespace io::swagger::server::model;

BlueOceanApiImpl::BlueOceanApiImpl(Pistache::Address addr)
    : BlueOceanApi(addr)
    { }

void BlueOceanApiImpl::delete_pipeline_queue_item(const std::string &organization, const std::string &pipeline, const std::string &queue, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_authenticated_user(const std::string &organization, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_classes(const std::string &class, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_organisation(const std::string &organization, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_organisations(Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_pipeline(const std::string &organization, const std::string &pipeline, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_pipeline_activities(const std::string &organization, const std::string &pipeline, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_pipeline_branch(const std::string &organization, const std::string &pipeline, const std::string &branch, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_pipeline_branch_run(const std::string &organization, const std::string &pipeline, const std::string &branch, const std::string &run, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_pipeline_branches(const std::string &organization, const std::string &pipeline, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_pipeline_folder(const std::string &organization, const std::string &folder, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_pipeline_folder_pipeline(const std::string &organization, const std::string &pipeline, const std::string &folder, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_pipeline_queue(const std::string &organization, const std::string &pipeline, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_pipeline_run(const std::string &organization, const std::string &pipeline, const std::string &run, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_pipeline_run_log(const std::string &organization, const std::string &pipeline, const std::string &run, const Optional<int32_t> &start, const Optional<bool> &download, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_pipeline_run_node(const std::string &organization, const std::string &pipeline, const std::string &run, const std::string &node, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_pipeline_run_node_step(const std::string &organization, const std::string &pipeline, const std::string &run, const std::string &node, const std::string &step, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_pipeline_run_node_step_log(const std::string &organization, const std::string &pipeline, const std::string &run, const std::string &node, const std::string &step, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_pipeline_run_node_steps(const std::string &organization, const std::string &pipeline, const std::string &run, const std::string &node, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_pipeline_run_nodes(const std::string &organization, const std::string &pipeline, const std::string &run, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_pipeline_runs(const std::string &organization, const std::string &pipeline, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_pipelines(const std::string &organization, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_scm(const std::string &organization, const std::string &scm, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_scm_organisation_repositories(const std::string &organization, const std::string &scm, const std::string &scmOrganisation, const Optional<std::string> &credentialId, const Optional<int32_t> &pageSize, const Optional<int32_t> &pageNumber, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_scm_organisation_repository(const std::string &organization, const std::string &scm, const std::string &scmOrganisation, const std::string &repository, const Optional<std::string> &credentialId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_scm_organisations(const std::string &organization, const std::string &scm, const Optional<std::string> &credentialId, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_user(const std::string &organization, const std::string &user, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_user_favorites(const std::string &user, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::get_users(const std::string &organization, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::post_pipeline_run(const std::string &organization, const std::string &pipeline, const std::string &run, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::post_pipeline_runs(const std::string &organization, const std::string &pipeline, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::put_pipeline_favorite(const std::string &organization, const std::string &pipeline, const Body &body, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::put_pipeline_run(const std::string &organization, const std::string &pipeline, const std::string &run, const Optional<std::string> &blocking, const Optional<int32_t> &timeOutInSecs, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::search(const Optional<std::string> &q, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}
void BlueOceanApiImpl::search_classes(const Optional<std::string> &q, Pistache::Http::ResponseWriter &response) {
    response.send(Pistache::Http::Code::Ok, "Do some magic\n");
}

}
}
}
}

