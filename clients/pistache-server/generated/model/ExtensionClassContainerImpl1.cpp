/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 0.1.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/


#include "ExtensionClassContainerImpl1.h"

namespace io {
namespace swagger {
namespace server {
namespace model {

ExtensionClassContainerImpl1::ExtensionClassContainerImpl1()
{
    m__class = "";
    m__classIsSet = false;
    m__linksIsSet = false;
    m_mapIsSet = false;
    
}

ExtensionClassContainerImpl1::~ExtensionClassContainerImpl1()
{
}

void ExtensionClassContainerImpl1::validate()
{
    // TODO: implement validation
}

nlohmann::json ExtensionClassContainerImpl1::toJson() const
{
    nlohmann::json val = nlohmann::json::object();

    if(m__classIsSet)
    {
        val["_class"] = ModelBase::toJson(m__class);
    }
    if(m__linksIsSet)
    {
        val["_links"] = ModelBase::toJson(m__links);
    }
    if(m_mapIsSet)
    {
        val["map"] = ModelBase::toJson(m_map);
    }
    

    return val;
}

void ExtensionClassContainerImpl1::fromJson(nlohmann::json& val)
{
    if(val.find("_class") != val.end())
    {
        setClass(val.at("_class"));
        
    }
    if(val.find("_links") != val.end())
    {
        if(!val["_links"].is_null())
        {
            std::shared_ptr<ExtensionClassContainerImpl1links> newItem(new ExtensionClassContainerImpl1links());
            newItem->fromJson(val["_links"]);
            setLinks( newItem );
        }
        
    }
    if(val.find("map") != val.end())
    {
        if(!val["map"].is_null())
        {
            std::shared_ptr<ExtensionClassContainerImpl1map> newItem(new ExtensionClassContainerImpl1map());
            newItem->fromJson(val["map"]);
            setMap( newItem );
        }
        
    }
    
}


std::string ExtensionClassContainerImpl1::getClass() const
{
    return m__class;
}
void ExtensionClassContainerImpl1::setClass(std::string value)
{
    m__class = value;
    m__classIsSet = true;
}
bool ExtensionClassContainerImpl1::classIsSet() const
{
    return m__classIsSet;
}
void ExtensionClassContainerImpl1::unset_class()
{
    m__classIsSet = false;
}
std::shared_ptr<ExtensionClassContainerImpl1links> ExtensionClassContainerImpl1::getLinks() const
{
    return m__links;
}
void ExtensionClassContainerImpl1::setLinks(std::shared_ptr<ExtensionClassContainerImpl1links> value)
{
    m__links = value;
    m__linksIsSet = true;
}
bool ExtensionClassContainerImpl1::linksIsSet() const
{
    return m__linksIsSet;
}
void ExtensionClassContainerImpl1::unset_links()
{
    m__linksIsSet = false;
}
std::shared_ptr<ExtensionClassContainerImpl1map> ExtensionClassContainerImpl1::getMap() const
{
    return m_map;
}
void ExtensionClassContainerImpl1::setMap(std::shared_ptr<ExtensionClassContainerImpl1map> value)
{
    m_map = value;
    m_mapIsSet = true;
}
bool ExtensionClassContainerImpl1::mapIsSet() const
{
    return m_mapIsSet;
}
void ExtensionClassContainerImpl1::unsetmap()
{
    m_mapIsSet = false;
}

}
}
}
}

