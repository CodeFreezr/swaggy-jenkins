/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 0.1.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * GithubRepository.h
 *
 * 
 */

#ifndef GithubRepository_H_
#define GithubRepository_H_


#include "ModelBase.h"

#include <string>
#include "GithubRepositorypermissions.h"
#include "GithubRepositorylinks.h"

namespace io {
namespace swagger {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  GithubRepository
    : public ModelBase
{
public:
    GithubRepository();
    virtual ~GithubRepository();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// GithubRepository members

    /// <summary>
    /// 
    /// </summary>
    std::string getClass() const;
    void setClass(std::string value);
    bool classIsSet() const;
    void unset_class();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GithubRepositorylinks> getLinks() const;
    void setLinks(std::shared_ptr<GithubRepositorylinks> value);
    bool linksIsSet() const;
    void unset_links();
    /// <summary>
    /// 
    /// </summary>
    std::string getDefaultBranch() const;
    void setDefaultBranch(std::string value);
    bool defaultBranchIsSet() const;
    void unsetDefaultBranch();
    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GithubRepositorypermissions> getPermissions() const;
    void setPermissions(std::shared_ptr<GithubRepositorypermissions> value);
    bool permissionsIsSet() const;
    void unsetPermissions();
    /// <summary>
    /// 
    /// </summary>
    bool getPrivate() const;
    void setPrivate(bool value);
    bool privateIsSet() const;
    void unsetPrivate();
    /// <summary>
    /// 
    /// </summary>
    std::string getFullName() const;
    void setFullName(std::string value);
    bool fullNameIsSet() const;
    void unsetFullName();

protected:
    std::string m__class;
    bool m__classIsSet;
    std::shared_ptr<GithubRepositorylinks> m__links;
    bool m__linksIsSet;
    std::string m_DefaultBranch;
    bool m_DefaultBranchIsSet;
    std::string m_Description;
    bool m_DescriptionIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    std::shared_ptr<GithubRepositorypermissions> m_Permissions;
    bool m_PermissionsIsSet;
    bool m_Private;
    bool m_PrivateIsSet;
    std::string m_FullName;
    bool m_FullNameIsSet;
};

}
}
}
}

#endif /* GithubRepository_H_ */
