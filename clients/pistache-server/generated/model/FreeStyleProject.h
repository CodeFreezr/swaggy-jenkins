/**
* Swaggy Jenkins
* Jenkins API clients generated from Swagger / Open API specification
*
* OpenAPI spec version: 0.1.0
* Contact: blah@cliffano.com
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*/
/*
 * FreeStyleProject.h
 *
 * 
 */

#ifndef FreeStyleProject_H_
#define FreeStyleProject_H_


#include "ModelBase.h"

#include "NullSCM.h"
#include "FreeStyleBuild.h"
#include <string>
#include <vector>
#include "FreeStyleProjectactions.h"
#include "FreeStyleProjecthealthReport.h"

namespace io {
namespace swagger {
namespace server {
namespace model {

/// <summary>
/// 
/// </summary>
class  FreeStyleProject
    : public ModelBase
{
public:
    FreeStyleProject();
    virtual ~FreeStyleProject();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    nlohmann::json toJson() const override;
    void fromJson(nlohmann::json& json) override;

    /////////////////////////////////////////////
    /// FreeStyleProject members

    /// <summary>
    /// 
    /// </summary>
    std::string getClass() const;
    void setClass(std::string value);
    bool classIsSet() const;
    void unset_class();
    /// <summary>
    /// 
    /// </summary>
    std::string getName() const;
    void setName(std::string value);
    bool nameIsSet() const;
    void unsetName();
    /// <summary>
    /// 
    /// </summary>
    std::string getUrl() const;
    void setUrl(std::string value);
    bool urlIsSet() const;
    void unsetUrl();
    /// <summary>
    /// 
    /// </summary>
    std::string getColor() const;
    void setColor(std::string value);
    bool colorIsSet() const;
    void unsetColor();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<FreeStyleProjectactions>>& getActions();
    bool actionsIsSet() const;
    void unsetActions();
    /// <summary>
    /// 
    /// </summary>
    std::string getDescription() const;
    void setDescription(std::string value);
    bool descriptionIsSet() const;
    void unsetDescription();
    /// <summary>
    /// 
    /// </summary>
    std::string getDisplayName() const;
    void setDisplayName(std::string value);
    bool displayNameIsSet() const;
    void unsetDisplayName();
    /// <summary>
    /// 
    /// </summary>
    std::string getDisplayNameOrNull() const;
    void setDisplayNameOrNull(std::string value);
    bool displayNameOrNullIsSet() const;
    void unsetDisplayNameOrNull();
    /// <summary>
    /// 
    /// </summary>
    std::string getFullDisplayName() const;
    void setFullDisplayName(std::string value);
    bool fullDisplayNameIsSet() const;
    void unsetFullDisplayName();
    /// <summary>
    /// 
    /// </summary>
    std::string getFullName() const;
    void setFullName(std::string value);
    bool fullNameIsSet() const;
    void unsetFullName();
    /// <summary>
    /// 
    /// </summary>
    bool getBuildable() const;
    void setBuildable(bool value);
    bool buildableIsSet() const;
    void unsetBuildable();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<FreeStyleBuild>>& getBuilds();
    bool buildsIsSet() const;
    void unsetBuilds();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FreeStyleBuild> getFirstBuild() const;
    void setFirstBuild(std::shared_ptr<FreeStyleBuild> value);
    bool firstBuildIsSet() const;
    void unsetFirstBuild();
    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<FreeStyleProjecthealthReport>>& getHealthReport();
    bool healthReportIsSet() const;
    void unsetHealthReport();
    /// <summary>
    /// 
    /// </summary>
    bool getInQueue() const;
    void setInQueue(bool value);
    bool inQueueIsSet() const;
    void unsetInQueue();
    /// <summary>
    /// 
    /// </summary>
    bool getKeepDependencies() const;
    void setKeepDependencies(bool value);
    bool keepDependenciesIsSet() const;
    void unsetKeepDependencies();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FreeStyleBuild> getLastBuild() const;
    void setLastBuild(std::shared_ptr<FreeStyleBuild> value);
    bool lastBuildIsSet() const;
    void unsetLastBuild();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FreeStyleBuild> getLastCompletedBuild() const;
    void setLastCompletedBuild(std::shared_ptr<FreeStyleBuild> value);
    bool lastCompletedBuildIsSet() const;
    void unsetLastCompletedBuild();
    /// <summary>
    /// 
    /// </summary>
    std::string getLastFailedBuild() const;
    void setLastFailedBuild(std::string value);
    bool lastFailedBuildIsSet() const;
    void unsetLastFailedBuild();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FreeStyleBuild> getLastStableBuild() const;
    void setLastStableBuild(std::shared_ptr<FreeStyleBuild> value);
    bool lastStableBuildIsSet() const;
    void unsetLastStableBuild();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<FreeStyleBuild> getLastSuccessfulBuild() const;
    void setLastSuccessfulBuild(std::shared_ptr<FreeStyleBuild> value);
    bool lastSuccessfulBuildIsSet() const;
    void unsetLastSuccessfulBuild();
    /// <summary>
    /// 
    /// </summary>
    std::string getLastUnstableBuild() const;
    void setLastUnstableBuild(std::string value);
    bool lastUnstableBuildIsSet() const;
    void unsetLastUnstableBuild();
    /// <summary>
    /// 
    /// </summary>
    std::string getLastUnsuccessfulBuild() const;
    void setLastUnsuccessfulBuild(std::string value);
    bool lastUnsuccessfulBuildIsSet() const;
    void unsetLastUnsuccessfulBuild();
    /// <summary>
    /// 
    /// </summary>
    int32_t getNextBuildNumber() const;
    void setNextBuildNumber(int32_t value);
    bool nextBuildNumberIsSet() const;
    void unsetNextBuildNumber();
    /// <summary>
    /// 
    /// </summary>
    std::string getQueueItem() const;
    void setQueueItem(std::string value);
    bool queueItemIsSet() const;
    void unsetQueueItem();
    /// <summary>
    /// 
    /// </summary>
    bool getConcurrentBuild() const;
    void setConcurrentBuild(bool value);
    bool concurrentBuildIsSet() const;
    void unsetConcurrentBuild();
    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<NullSCM> getScm() const;
    void setScm(std::shared_ptr<NullSCM> value);
    bool scmIsSet() const;
    void unsetScm();

protected:
    std::string m__class;
    bool m__classIsSet;
    std::string m_Name;
    bool m_NameIsSet;
    std::string m_Url;
    bool m_UrlIsSet;
    std::string m_Color;
    bool m_ColorIsSet;
    std::vector<std::shared_ptr<FreeStyleProjectactions>> m_Actions;
    bool m_ActionsIsSet;
    std::string m_Description;
    bool m_DescriptionIsSet;
    std::string m_DisplayName;
    bool m_DisplayNameIsSet;
    std::string m_DisplayNameOrNull;
    bool m_DisplayNameOrNullIsSet;
    std::string m_FullDisplayName;
    bool m_FullDisplayNameIsSet;
    std::string m_FullName;
    bool m_FullNameIsSet;
    bool m_Buildable;
    bool m_BuildableIsSet;
    std::vector<std::shared_ptr<FreeStyleBuild>> m_Builds;
    bool m_BuildsIsSet;
    std::shared_ptr<FreeStyleBuild> m_FirstBuild;
    bool m_FirstBuildIsSet;
    std::vector<std::shared_ptr<FreeStyleProjecthealthReport>> m_HealthReport;
    bool m_HealthReportIsSet;
    bool m_InQueue;
    bool m_InQueueIsSet;
    bool m_KeepDependencies;
    bool m_KeepDependenciesIsSet;
    std::shared_ptr<FreeStyleBuild> m_LastBuild;
    bool m_LastBuildIsSet;
    std::shared_ptr<FreeStyleBuild> m_LastCompletedBuild;
    bool m_LastCompletedBuildIsSet;
    std::string m_LastFailedBuild;
    bool m_LastFailedBuildIsSet;
    std::shared_ptr<FreeStyleBuild> m_LastStableBuild;
    bool m_LastStableBuildIsSet;
    std::shared_ptr<FreeStyleBuild> m_LastSuccessfulBuild;
    bool m_LastSuccessfulBuildIsSet;
    std::string m_LastUnstableBuild;
    bool m_LastUnstableBuildIsSet;
    std::string m_LastUnsuccessfulBuild;
    bool m_LastUnsuccessfulBuildIsSet;
    int32_t m_NextBuildNumber;
    bool m_NextBuildNumberIsSet;
    std::string m_QueueItem;
    bool m_QueueItemIsSet;
    bool m_ConcurrentBuild;
    bool m_ConcurrentBuildIsSet;
    std::shared_ptr<NullSCM> m_Scm;
    bool m_ScmIsSet;
};

}
}
}
}

#endif /* FreeStyleProject_H_ */
