<?php

/**
 * RemoteAccessController
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Controller
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Controller;

use \Exception;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Swagger\Server\Api\RemoteAccessApiInterface;
use Swagger\Server\Model\ComputerSet;
use string;
use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Swagger\Server\Model\Queue;
use Swagger\Server\Model\Hudson;
use Swagger\Server\Model\ListView;
use Swagger\Server\Model\DefaultCrumbIssuer;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Swagger\Server\Model\FreeStyleProject;
use Swagger\Server\Model\FreeStyleBuild;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;

/**
 * RemoteAccessController Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Server\Controller
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RemoteAccessController extends Controller
{

    /**
     * Operation getComputer
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getComputerAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle query params
        $depth = $this->fromQuery($request->query->get('depth'), 'int');

        // Parse incoming parameters
        // Verify the required parameter 'depth' is set
        if ($depth === null) {
            return $this->createBadRequestResponse('Missing the required parameter $depth when calling getComputer');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getComputer($depth);

            // Handle 200 response: Successfully retrieved computer details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved computer details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getCrumb
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getCrumbAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');

        // Parse incoming parameters

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getCrumb();

            // Handle 200 response: Successfully retrieved CSRF protection token
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved CSRF protection token',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getJenkins
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getJenkinsAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');

        // Parse incoming parameters

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getJenkins();

            // Handle 200 response: Successfully retrieved Jenkins details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved Jenkins details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getJob
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getJobAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $name = $this->fromPath($request->attributes->get('name'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'name' is set
        if ($name === null) {
            return $this->createBadRequestResponse('Missing the required parameter $name when calling getJob');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getJob($name);

            // Handle 200 response: Successfully retrieved job details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved job details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // Job cannot be found on Jenkins instance
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getJobConfig
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getJobConfigAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $name = $this->fromPath($request->attributes->get('name'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'name' is set
        if ($name === null) {
            return $this->createBadRequestResponse('Missing the required parameter $name when calling getJobConfig');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getJobConfig($name);

            // Handle 200 response: Successfully retrieved job configuration in config.xml format
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved job configuration in config.xml format',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // Job cannot be found on Jenkins instance
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getJobLastBuild
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getJobLastBuildAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $name = $this->fromPath($request->attributes->get('name'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'name' is set
        if ($name === null) {
            return $this->createBadRequestResponse('Missing the required parameter $name when calling getJobLastBuild');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getJobLastBuild($name);

            // Handle 200 response: Successfully retrieved job&#39;s last build details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved job&#39;s last build details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // Job cannot be found on Jenkins instance
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getJobProgressiveText
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getJobProgressiveTextAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle query params
        $start = $this->fromQuery($request->query->get('start'), 'string');
        // Handle path params
        $name = $this->fromPath($request->attributes->get('name'), 'string');
        // Handle path params
        $number = $this->fromPath($request->attributes->get('number'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'name' is set
        if ($name === null) {
            return $this->createBadRequestResponse('Missing the required parameter $name when calling getJobProgressiveText');
        }
        // Verify the required parameter 'number' is set
        if ($number === null) {
            return $this->createBadRequestResponse('Missing the required parameter $number when calling getJobProgressiveText');
        }
        // Verify the required parameter 'start' is set
        if ($start === null) {
            return $this->createBadRequestResponse('Missing the required parameter $start when calling getJobProgressiveText');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // No return type expected; return empty response
            $handler->getJobProgressiveText($name, $number, $start);
            return new Response('', 204);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // Job cannot be found on Jenkins instance
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getQueue
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getQueueAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');

        // Parse incoming parameters

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getQueue();

            // Handle 200 response: Successfully retrieved queue details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved queue details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getQueueItem
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getQueueItemAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $number = $this->fromPath($request->attributes->get('number'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'number' is set
        if ($number === null) {
            return $this->createBadRequestResponse('Missing the required parameter $number when calling getQueueItem');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getQueueItem($number);

            // Handle 200 response: Successfully retrieved queued item details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved queued item details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getView
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getViewAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $name = $this->fromPath($request->attributes->get('name'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'name' is set
        if ($name === null) {
            return $this->createBadRequestResponse('Missing the required parameter $name when calling getView');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getView($name);

            // Handle 200 response: Successfully retrieved view details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved view details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // View cannot be found on Jenkins instance
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getViewConfig
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getViewConfigAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $name = $this->fromPath($request->attributes->get('name'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'name' is set
        if ($name === null) {
            return $this->createBadRequestResponse('Missing the required parameter $name when calling getViewConfig');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getViewConfig($name);

            // Handle 200 response: Successfully retrieved view configuration in config.xml format
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved view configuration in config.xml format',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // View cannot be found on Jenkins instance
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation headJenkins
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function headJenkinsAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');

        // Parse incoming parameters

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // No return type expected; return empty response
            $handler->headJenkins();
            return new Response('', 204);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation postCreateItem
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function postCreateItemAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle query params
        $name = $this->fromQuery($request->query->get('name'), 'string');
        // Handle query params
        $from = $this->fromQuery($request->query->get('from'), 'string');
        // Handle query params
        $mode = $this->fromQuery($request->query->get('mode'), 'string');
        // Handle header params
        $jenkins_crumb = $this->fromHeader($request->headers->get('jenkins_crumb'), 'string');
        // Handle header params
        $content_type = $this->fromHeader($request->headers->get('content_type'), 'string');
        // Handle body params
        $body = $this->deserialize($request->getContent(), 'string', 'json');

        // Parse incoming parameters
        // Verify the required parameter 'name' is set
        if ($name === null) {
            return $this->createBadRequestResponse('Missing the required parameter $name when calling postCreateItem');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // No return type expected; return empty response
            $handler->postCreateItem($name, $from, $mode, $body, $jenkins_crumb, $content_type);
            return new Response('', 204);
        } catch (BadRequestHttpException $exception) {
            // An error has occurred - error message is embedded inside the HTML response
            return $this->createErrorResponse($exception);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation postCreateView
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function postCreateViewAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle query params
        $name = $this->fromQuery($request->query->get('name'), 'string');
        // Handle header params
        $jenkins_crumb = $this->fromHeader($request->headers->get('jenkins_crumb'), 'string');
        // Handle header params
        $content_type = $this->fromHeader($request->headers->get('content_type'), 'string');
        // Handle body params
        $body = $this->deserialize($request->getContent(), 'string', 'json');

        // Parse incoming parameters
        // Verify the required parameter 'name' is set
        if ($name === null) {
            return $this->createBadRequestResponse('Missing the required parameter $name when calling postCreateView');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // No return type expected; return empty response
            $handler->postCreateView($name, $body, $jenkins_crumb, $content_type);
            return new Response('', 204);
        } catch (BadRequestHttpException $exception) {
            // An error has occurred - error message is embedded inside the HTML response
            return $this->createErrorResponse($exception);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation postJobBuild
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function postJobBuildAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle query params
        $json = $this->fromQuery($request->query->get('json'), 'string');
        // Handle query params
        $token = $this->fromQuery($request->query->get('token'), 'string');
        // Handle header params
        $jenkins_crumb = $this->fromHeader($request->headers->get('jenkins_crumb'), 'string');
        // Handle path params
        $name = $this->fromPath($request->attributes->get('name'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'name' is set
        if ($name === null) {
            return $this->createBadRequestResponse('Missing the required parameter $name when calling postJobBuild');
        }
        // Verify the required parameter 'json' is set
        if ($json === null) {
            return $this->createBadRequestResponse('Missing the required parameter $json when calling postJobBuild');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // No return type expected; return empty response
            $handler->postJobBuild($name, $json, $token, $jenkins_crumb);
            return new Response('', 204);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // Job cannot be found on Jenkins instance
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation postJobConfig
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function postJobConfigAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle header params
        $jenkins_crumb = $this->fromHeader($request->headers->get('jenkins_crumb'), 'string');
        // Handle path params
        $name = $this->fromPath($request->attributes->get('name'), 'string');
        // Handle body params
        $body = $this->deserialize($request->getContent(), 'string', 'json');

        // Parse incoming parameters
        // Verify the required parameter 'name' is set
        if ($name === null) {
            return $this->createBadRequestResponse('Missing the required parameter $name when calling postJobConfig');
        }
        // Verify the required parameter 'body' is set
        if ($body === null) {
            return $this->createBadRequestResponse('Missing the required parameter $body when calling postJobConfig');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // No return type expected; return empty response
            $handler->postJobConfig($name, $body, $jenkins_crumb);
            return new Response('', 204);
        } catch (BadRequestHttpException $exception) {
            // An error has occurred - error message is embedded inside the HTML response
            return $this->createErrorResponse($exception);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // Job cannot be found on Jenkins instance
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation postJobDelete
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function postJobDeleteAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle header params
        $jenkins_crumb = $this->fromHeader($request->headers->get('jenkins_crumb'), 'string');
        // Handle path params
        $name = $this->fromPath($request->attributes->get('name'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'name' is set
        if ($name === null) {
            return $this->createBadRequestResponse('Missing the required parameter $name when calling postJobDelete');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // No return type expected; return empty response
            $handler->postJobDelete($name, $jenkins_crumb);
            return new Response('', 204);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // Job cannot be found on Jenkins instance
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation postJobDisable
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function postJobDisableAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle header params
        $jenkins_crumb = $this->fromHeader($request->headers->get('jenkins_crumb'), 'string');
        // Handle path params
        $name = $this->fromPath($request->attributes->get('name'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'name' is set
        if ($name === null) {
            return $this->createBadRequestResponse('Missing the required parameter $name when calling postJobDisable');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // No return type expected; return empty response
            $handler->postJobDisable($name, $jenkins_crumb);
            return new Response('', 204);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // Job cannot be found on Jenkins instance
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation postJobEnable
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function postJobEnableAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle header params
        $jenkins_crumb = $this->fromHeader($request->headers->get('jenkins_crumb'), 'string');
        // Handle path params
        $name = $this->fromPath($request->attributes->get('name'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'name' is set
        if ($name === null) {
            return $this->createBadRequestResponse('Missing the required parameter $name when calling postJobEnable');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // No return type expected; return empty response
            $handler->postJobEnable($name, $jenkins_crumb);
            return new Response('', 204);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // Job cannot be found on Jenkins instance
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation postJobLastBuildStop
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function postJobLastBuildStopAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle header params
        $jenkins_crumb = $this->fromHeader($request->headers->get('jenkins_crumb'), 'string');
        // Handle path params
        $name = $this->fromPath($request->attributes->get('name'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'name' is set
        if ($name === null) {
            return $this->createBadRequestResponse('Missing the required parameter $name when calling postJobLastBuildStop');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // No return type expected; return empty response
            $handler->postJobLastBuildStop($name, $jenkins_crumb);
            return new Response('', 204);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // Job cannot be found on Jenkins instance
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation postViewConfig
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function postViewConfigAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle header params
        $jenkins_crumb = $this->fromHeader($request->headers->get('jenkins_crumb'), 'string');
        // Handle path params
        $name = $this->fromPath($request->attributes->get('name'), 'string');
        // Handle body params
        $body = $this->deserialize($request->getContent(), 'string', 'json');

        // Parse incoming parameters
        // Verify the required parameter 'name' is set
        if ($name === null) {
            return $this->createBadRequestResponse('Missing the required parameter $name when calling postViewConfig');
        }
        // Verify the required parameter 'body' is set
        if ($body === null) {
            return $this->createBadRequestResponse('Missing the required parameter $body when calling postViewConfig');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // No return type expected; return empty response
            $handler->postViewConfig($name, $body, $jenkins_crumb);
            return new Response('', 204);
        } catch (BadRequestHttpException $exception) {
            // An error has occurred - error message is embedded inside the HTML response
            return $this->createErrorResponse($exception);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // View cannot be found on Jenkins instance
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return RemoteAccessApiInterface
     */
    public function getApiHandler()
    {
        return $this->get('swagger_server.api.api_server')->getApiHandler('remoteAccess');
    }
}
