<?php

/**
 * BlueOceanController
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Controller
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Controller;

use \Exception;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpKernel\Exception\HttpException;
use Swagger\Server\Api\BlueOceanApiInterface;
use Swagger\Server\Model\MultibranchPipeline;
use Swagger\Server\Model\FavoriteImpl;
use string;
use Symfony\Component\HttpKernel\Exception\UnauthorizedHttpException;
use Swagger\Server\Model\Organisation;
use Swagger\Server\Model\User;
use Swagger\Server\Model\PipelineRuns;
use Swagger\Server\Model\PipelineRun;
use Swagger\Server\Model\PipelineQueue;
use Swagger\Server\Model\PipelineRunNodes;
use Swagger\Server\Model\PipelineImpl;
use Swagger\Server\Model\UserFavorites;
use Swagger\Server\Model\Body;
use Swagger\Server\Model\PipelineActivities;
use Swagger\Server\Model\BranchImpl;
use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;
use Swagger\Server\Model\PipelineFolderImpl;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Swagger\Server\Model\PipelineStepImpl;
use Swagger\Server\Model\Pipeline;
use Swagger\Server\Model\Organisations;
use Swagger\Server\Model\GithubScm;
use Swagger\Server\Model\PipelineRunNode;
use Swagger\Server\Model\Pipelines;
use Swagger\Server\Model\QueueItemImpl;
use Swagger\Server\Model\PipelineRunNodeSteps;
use Swagger\Server\Model\ScmOrganisations;

/**
 * BlueOceanController Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Server\Controller
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BlueOceanController extends Controller
{

    /**
     * Operation deletePipelineQueueItem
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function deletePipelineQueueItemAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');
        // Handle path params
        $queue = $this->fromPath($request->attributes->get('queue'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling deletePipelineQueueItem');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling deletePipelineQueueItem');
        }
        // Verify the required parameter 'queue' is set
        if ($queue === null) {
            return $this->createBadRequestResponse('Missing the required parameter $queue when calling deletePipelineQueueItem');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // No return type expected; return empty response
            $handler->deletePipelineQueueItem($organization, $pipeline, $queue);
            return new Response('', 204);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getAuthenticatedUser
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getAuthenticatedUserAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getAuthenticatedUser');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getAuthenticatedUser($organization);

            // Handle 200 response: Successfully retrieved authenticated user details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved authenticated user details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getClasses
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getClassesAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $class = $this->fromPath($request->attributes->get('class'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'class' is set
        if ($class === null) {
            return $this->createBadRequestResponse('Missing the required parameter $class when calling getClasses');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getClasses($class);

            // Handle 200 response: Successfully retrieved class names
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved class names',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getOrganisation
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getOrganisationAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getOrganisation');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getOrganisation($organization);

            // Handle 200 response: Successfully retrieved pipeline details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved pipeline details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // Pipeline cannot be found on Jenkins instance
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getOrganisations
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getOrganisationsAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');

        // Parse incoming parameters

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getOrganisations();

            // Handle 200 response: Successfully retrieved pipelines details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved pipelines details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPipeline
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPipelineAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getPipeline');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling getPipeline');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getPipeline($organization, $pipeline);

            // Handle 200 response: Successfully retrieved pipeline details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved pipeline details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (NotFoundHttpException $exception) {
            // Pipeline cannot be found on Jenkins instance
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPipelineActivities
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPipelineActivitiesAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getPipelineActivities');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling getPipelineActivities');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getPipelineActivities($organization, $pipeline);

            // Handle 200 response: Successfully retrieved all activities details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved all activities details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPipelineBranch
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPipelineBranchAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');
        // Handle path params
        $branch = $this->fromPath($request->attributes->get('branch'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getPipelineBranch');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling getPipelineBranch');
        }
        // Verify the required parameter 'branch' is set
        if ($branch === null) {
            return $this->createBadRequestResponse('Missing the required parameter $branch when calling getPipelineBranch');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getPipelineBranch($organization, $pipeline, $branch);

            // Handle 200 response: Successfully retrieved branch details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved branch details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPipelineBranchRun
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPipelineBranchRunAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');
        // Handle path params
        $branch = $this->fromPath($request->attributes->get('branch'), 'string');
        // Handle path params
        $run = $this->fromPath($request->attributes->get('run'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getPipelineBranchRun');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling getPipelineBranchRun');
        }
        // Verify the required parameter 'branch' is set
        if ($branch === null) {
            return $this->createBadRequestResponse('Missing the required parameter $branch when calling getPipelineBranchRun');
        }
        // Verify the required parameter 'run' is set
        if ($run === null) {
            return $this->createBadRequestResponse('Missing the required parameter $run when calling getPipelineBranchRun');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getPipelineBranchRun($organization, $pipeline, $branch, $run);

            // Handle 200 response: Successfully retrieved run details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved run details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPipelineBranches
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPipelineBranchesAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getPipelineBranches');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling getPipelineBranches');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getPipelineBranches($organization, $pipeline);

            // Handle 200 response: Successfully retrieved all branches details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved all branches details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPipelineFolder
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPipelineFolderAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $folder = $this->fromPath($request->attributes->get('folder'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getPipelineFolder');
        }
        // Verify the required parameter 'folder' is set
        if ($folder === null) {
            return $this->createBadRequestResponse('Missing the required parameter $folder when calling getPipelineFolder');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getPipelineFolder($organization, $folder);

            // Handle 200 response: Successfully retrieved folder details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved folder details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPipelineFolderPipeline
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPipelineFolderPipelineAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');
        // Handle path params
        $folder = $this->fromPath($request->attributes->get('folder'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getPipelineFolderPipeline');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling getPipelineFolderPipeline');
        }
        // Verify the required parameter 'folder' is set
        if ($folder === null) {
            return $this->createBadRequestResponse('Missing the required parameter $folder when calling getPipelineFolderPipeline');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getPipelineFolderPipeline($organization, $pipeline, $folder);

            // Handle 200 response: Successfully retrieved pipeline details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved pipeline details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPipelineQueue
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPipelineQueueAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getPipelineQueue');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling getPipelineQueue');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getPipelineQueue($organization, $pipeline);

            // Handle 200 response: Successfully retrieved queue details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved queue details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPipelineRun
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPipelineRunAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');
        // Handle path params
        $run = $this->fromPath($request->attributes->get('run'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getPipelineRun');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling getPipelineRun');
        }
        // Verify the required parameter 'run' is set
        if ($run === null) {
            return $this->createBadRequestResponse('Missing the required parameter $run when calling getPipelineRun');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getPipelineRun($organization, $pipeline, $run);

            // Handle 200 response: Successfully retrieved run details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved run details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPipelineRunLog
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPipelineRunLogAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle query params
        $start = $this->fromQuery($request->query->get('start'), 'int');
        // Handle query params
        $download = $this->fromQuery($request->query->get('download'), 'bool');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');
        // Handle path params
        $run = $this->fromPath($request->attributes->get('run'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getPipelineRunLog');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling getPipelineRunLog');
        }
        // Verify the required parameter 'run' is set
        if ($run === null) {
            return $this->createBadRequestResponse('Missing the required parameter $run when calling getPipelineRunLog');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getPipelineRunLog($organization, $pipeline, $run, $start, $download);

            // Handle 200 response: Successfully retrieved pipeline run log
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved pipeline run log',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPipelineRunNode
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPipelineRunNodeAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');
        // Handle path params
        $run = $this->fromPath($request->attributes->get('run'), 'string');
        // Handle path params
        $node = $this->fromPath($request->attributes->get('node'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getPipelineRunNode');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling getPipelineRunNode');
        }
        // Verify the required parameter 'run' is set
        if ($run === null) {
            return $this->createBadRequestResponse('Missing the required parameter $run when calling getPipelineRunNode');
        }
        // Verify the required parameter 'node' is set
        if ($node === null) {
            return $this->createBadRequestResponse('Missing the required parameter $node when calling getPipelineRunNode');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getPipelineRunNode($organization, $pipeline, $run, $node);

            // Handle 200 response: Successfully retrieved run node details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved run node details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPipelineRunNodeStep
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPipelineRunNodeStepAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');
        // Handle path params
        $run = $this->fromPath($request->attributes->get('run'), 'string');
        // Handle path params
        $node = $this->fromPath($request->attributes->get('node'), 'string');
        // Handle path params
        $step = $this->fromPath($request->attributes->get('step'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getPipelineRunNodeStep');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling getPipelineRunNodeStep');
        }
        // Verify the required parameter 'run' is set
        if ($run === null) {
            return $this->createBadRequestResponse('Missing the required parameter $run when calling getPipelineRunNodeStep');
        }
        // Verify the required parameter 'node' is set
        if ($node === null) {
            return $this->createBadRequestResponse('Missing the required parameter $node when calling getPipelineRunNodeStep');
        }
        // Verify the required parameter 'step' is set
        if ($step === null) {
            return $this->createBadRequestResponse('Missing the required parameter $step when calling getPipelineRunNodeStep');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getPipelineRunNodeStep($organization, $pipeline, $run, $node, $step);

            // Handle 200 response: Successfully retrieved run node step details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved run node step details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPipelineRunNodeStepLog
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPipelineRunNodeStepLogAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');
        // Handle path params
        $run = $this->fromPath($request->attributes->get('run'), 'string');
        // Handle path params
        $node = $this->fromPath($request->attributes->get('node'), 'string');
        // Handle path params
        $step = $this->fromPath($request->attributes->get('step'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getPipelineRunNodeStepLog');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling getPipelineRunNodeStepLog');
        }
        // Verify the required parameter 'run' is set
        if ($run === null) {
            return $this->createBadRequestResponse('Missing the required parameter $run when calling getPipelineRunNodeStepLog');
        }
        // Verify the required parameter 'node' is set
        if ($node === null) {
            return $this->createBadRequestResponse('Missing the required parameter $node when calling getPipelineRunNodeStepLog');
        }
        // Verify the required parameter 'step' is set
        if ($step === null) {
            return $this->createBadRequestResponse('Missing the required parameter $step when calling getPipelineRunNodeStepLog');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getPipelineRunNodeStepLog($organization, $pipeline, $run, $node, $step);

            // Handle 200 response: Successfully retrieved pipeline run node step log
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved pipeline run node step log',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPipelineRunNodeSteps
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPipelineRunNodeStepsAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');
        // Handle path params
        $run = $this->fromPath($request->attributes->get('run'), 'string');
        // Handle path params
        $node = $this->fromPath($request->attributes->get('node'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getPipelineRunNodeSteps');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling getPipelineRunNodeSteps');
        }
        // Verify the required parameter 'run' is set
        if ($run === null) {
            return $this->createBadRequestResponse('Missing the required parameter $run when calling getPipelineRunNodeSteps');
        }
        // Verify the required parameter 'node' is set
        if ($node === null) {
            return $this->createBadRequestResponse('Missing the required parameter $node when calling getPipelineRunNodeSteps');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getPipelineRunNodeSteps($organization, $pipeline, $run, $node);

            // Handle 200 response: Successfully retrieved run node steps details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved run node steps details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPipelineRunNodes
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPipelineRunNodesAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');
        // Handle path params
        $run = $this->fromPath($request->attributes->get('run'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getPipelineRunNodes');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling getPipelineRunNodes');
        }
        // Verify the required parameter 'run' is set
        if ($run === null) {
            return $this->createBadRequestResponse('Missing the required parameter $run when calling getPipelineRunNodes');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getPipelineRunNodes($organization, $pipeline, $run);

            // Handle 200 response: Successfully retrieved run nodes details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved run nodes details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPipelineRuns
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPipelineRunsAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getPipelineRuns');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling getPipelineRuns');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getPipelineRuns($organization, $pipeline);

            // Handle 200 response: Successfully retrieved runs details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved runs details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getPipelines
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getPipelinesAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getPipelines');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getPipelines($organization);

            // Handle 200 response: Successfully retrieved pipelines details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved pipelines details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getSCM
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getSCMAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $scm = $this->fromPath($request->attributes->get('scm'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getSCM');
        }
        // Verify the required parameter 'scm' is set
        if ($scm === null) {
            return $this->createBadRequestResponse('Missing the required parameter $scm when calling getSCM');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getSCM($organization, $scm);

            // Handle 200 response: Successfully retrieved SCM details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved SCM details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getSCMOrganisationRepositories
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getSCMOrganisationRepositoriesAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle query params
        $credential_id = $this->fromQuery($request->query->get('credential_id'), 'string');
        // Handle query params
        $page_size = $this->fromQuery($request->query->get('page_size'), 'int');
        // Handle query params
        $page_number = $this->fromQuery($request->query->get('page_number'), 'int');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $scm = $this->fromPath($request->attributes->get('scm'), 'string');
        // Handle path params
        $scm_organisation = $this->fromPath($request->attributes->get('scm_organisation'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getSCMOrganisationRepositories');
        }
        // Verify the required parameter 'scm' is set
        if ($scm === null) {
            return $this->createBadRequestResponse('Missing the required parameter $scm when calling getSCMOrganisationRepositories');
        }
        // Verify the required parameter 'scm_organisation' is set
        if ($scm_organisation === null) {
            return $this->createBadRequestResponse('Missing the required parameter $scm_organisation when calling getSCMOrganisationRepositories');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getSCMOrganisationRepositories($organization, $scm, $scm_organisation, $credential_id, $page_size, $page_number);

            // Handle 200 response: Successfully retrieved SCM organization repositories details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved SCM organization repositories details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getSCMOrganisationRepository
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getSCMOrganisationRepositoryAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle query params
        $credential_id = $this->fromQuery($request->query->get('credential_id'), 'string');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $scm = $this->fromPath($request->attributes->get('scm'), 'string');
        // Handle path params
        $scm_organisation = $this->fromPath($request->attributes->get('scm_organisation'), 'string');
        // Handle path params
        $repository = $this->fromPath($request->attributes->get('repository'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getSCMOrganisationRepository');
        }
        // Verify the required parameter 'scm' is set
        if ($scm === null) {
            return $this->createBadRequestResponse('Missing the required parameter $scm when calling getSCMOrganisationRepository');
        }
        // Verify the required parameter 'scm_organisation' is set
        if ($scm_organisation === null) {
            return $this->createBadRequestResponse('Missing the required parameter $scm_organisation when calling getSCMOrganisationRepository');
        }
        // Verify the required parameter 'repository' is set
        if ($repository === null) {
            return $this->createBadRequestResponse('Missing the required parameter $repository when calling getSCMOrganisationRepository');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getSCMOrganisationRepository($organization, $scm, $scm_organisation, $repository, $credential_id);

            // Handle 200 response: Successfully retrieved SCM organizations details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved SCM organizations details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getSCMOrganisations
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getSCMOrganisationsAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle query params
        $credential_id = $this->fromQuery($request->query->get('credential_id'), 'string');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $scm = $this->fromPath($request->attributes->get('scm'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getSCMOrganisations');
        }
        // Verify the required parameter 'scm' is set
        if ($scm === null) {
            return $this->createBadRequestResponse('Missing the required parameter $scm when calling getSCMOrganisations');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getSCMOrganisations($organization, $scm, $credential_id);

            // Handle 200 response: Successfully retrieved SCM organizations details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved SCM organizations details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getUser
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getUserAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $user = $this->fromPath($request->attributes->get('user'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getUser');
        }
        // Verify the required parameter 'user' is set
        if ($user === null) {
            return $this->createBadRequestResponse('Missing the required parameter $user when calling getUser');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getUser($organization, $user);

            // Handle 200 response: Successfully retrieved users details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved users details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getUserFavorites
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getUserFavoritesAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $user = $this->fromPath($request->attributes->get('user'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'user' is set
        if ($user === null) {
            return $this->createBadRequestResponse('Missing the required parameter $user when calling getUserFavorites');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getUserFavorites($user);

            // Handle 200 response: Successfully retrieved users favorites details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved users favorites details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation getUsers
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function getUsersAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling getUsers');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->getUsers($organization);

            // Handle 200 response: Successfully retrieved users details
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved users details',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation postPipelineRun
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function postPipelineRunAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');
        // Handle path params
        $run = $this->fromPath($request->attributes->get('run'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling postPipelineRun');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling postPipelineRun');
        }
        // Verify the required parameter 'run' is set
        if ($run === null) {
            return $this->createBadRequestResponse('Missing the required parameter $run when calling postPipelineRun');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->postPipelineRun($organization, $pipeline, $run);

            // Handle 200 response: Successfully replayed a pipeline run
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully replayed a pipeline run',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation postPipelineRuns
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function postPipelineRunsAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling postPipelineRuns');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling postPipelineRuns');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->postPipelineRuns($organization, $pipeline);

            // Handle 200 response: Successfully started a build
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully started a build',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation putPipelineFavorite
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function putPipelineFavoriteAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');
        // Handle body params
        $body = $this->deserialize($request->getContent(), 'Swagger\Server\Model\Body', 'json');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling putPipelineFavorite');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling putPipelineFavorite');
        }
        // Verify the required parameter 'body' is set
        if ($body === null) {
            return $this->createBadRequestResponse('Missing the required parameter $body when calling putPipelineFavorite');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->putPipelineFavorite($organization, $pipeline, $body);

            // Handle 200 response: Successfully favorited/unfavorited a pipeline
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully favorited/unfavorited a pipeline',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation putPipelineRun
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function putPipelineRunAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle query params
        $blocking = $this->fromQuery($request->query->get('blocking'), 'string');
        // Handle query params
        $time_out_in_secs = $this->fromQuery($request->query->get('time_out_in_secs'), 'int');
        // Handle path params
        $organization = $this->fromPath($request->attributes->get('organization'), 'string');
        // Handle path params
        $pipeline = $this->fromPath($request->attributes->get('pipeline'), 'string');
        // Handle path params
        $run = $this->fromPath($request->attributes->get('run'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'organization' is set
        if ($organization === null) {
            return $this->createBadRequestResponse('Missing the required parameter $organization when calling putPipelineRun');
        }
        // Verify the required parameter 'pipeline' is set
        if ($pipeline === null) {
            return $this->createBadRequestResponse('Missing the required parameter $pipeline when calling putPipelineRun');
        }
        // Verify the required parameter 'run' is set
        if ($run === null) {
            return $this->createBadRequestResponse('Missing the required parameter $run when calling putPipelineRun');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->putPipelineRun($organization, $pipeline, $run, $blocking, $time_out_in_secs);

            // Handle 200 response: Successfully stopped a build
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully stopped a build',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation search
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function searchAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle query params
        $q = $this->fromQuery($request->query->get('q'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'q' is set
        if ($q === null) {
            return $this->createBadRequestResponse('Missing the required parameter $q when calling search');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->search($q);

            // Handle 200 response: Successfully retrieved search result
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved search result',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Operation searchClasses
     *
     * @param Request $request The Symfony request to handle.
     * @return Response The Symfony response.
     */
    public function searchClassesAction(Request $request)
    {
        // Authentication 'jenkins_auth' required
        // HTTP basic authentication required
        $securityjenkins_auth = $request->headers->get('authorization');
        // Handle query params
        $q = $this->fromQuery($request->query->get('q'), 'string');

        // Parse incoming parameters
        // Verify the required parameter 'q' is set
        if ($q === null) {
            return $this->createBadRequestResponse('Missing the required parameter $q when calling searchClasses');
        }

        // Call the API interface
        try {
            $handler = $this->getApiHandler();

            // Set authentication method 'jenkins_auth'
            $handler->setjenkins_auth($securityjenkins_auth);
            // Expecting a return value (exception otherwise)
            $result = $handler->searchClasses($q);

            // Handle 200 response: Successfully retrieved search result
            $content = $this->serialize($result, 'json');
            return new Response($content, 200, [
                'Content-Type' => 'application/json',
                'X-Swagger-Message' => 'Successfully retrieved search result',
            ]);
        } catch (UnauthorizedHttpException $exception) {
            // Authentication failed - incorrect username and/or password
            return $this->createErrorResponse($exception);
        } catch (AccessDeniedHttpException $exception) {
            // Jenkins requires authentication - please set username and password
            return $this->createErrorResponse($exception);
        } catch (Exception $fallthrough) {
            return $this->createErrorResponse(new HttpException(500, 'An unsuspected error occurred.', $fallthrough));
        }
    }

    /**
     * Returns the handler for this API controller.
     * @return BlueOceanApiInterface
     */
    public function getApiHandler()
    {
        return $this->get('swagger_server.api.api_server')->getApiHandler('blueOcean');
    }
}
