<?php
/**
 * HudsonMasterComputerexecutors
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;
use Swagger\Server\Model\FreeStyleBuild;

/**
 * Class representing the HudsonMasterComputerexecutors model.
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class HudsonMasterComputerexecutors implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'HudsonMasterComputerexecutors';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        'current_executable' => ['currentExecutable', 'Swagger\Server\Model\FreeStyleBuild', null, 'setCurrentExecutable', 'getCurrentExecutable'],
        'idle' => ['idle', 'bool', null, 'setIdle', 'isIdle'],
        'likely_stuck' => ['likelyStuck', 'bool', null, 'setLikelyStuck', 'isLikelyStuck'],
        'number' => ['number', 'int', null, 'setNumber', 'getNumber'],
        'progress' => ['progress', 'int', null, 'setProgress', 'getProgress'],
        '_class' => ['_class', 'string', null, 'setClass', 'getClass'],
    ];
    

    
    /**     * @var FreeStyleBuild|null
     */
    protected $current_executable;

    /**     * @var bool|null
     */
    protected $idle;

    /**     * @var bool|null
     */
    protected $likely_stuck;

    /**     * @var int|null
     */
    protected $number;

    /**     * @var int|null
     */
    protected $progress;

    /**     * @var string|null
     */
    protected $_class;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->current_executable = isset($data['current_executable']) ? $data['current_executable'] : null;
        $this->idle = isset($data['idle']) ? $data['idle'] : null;
        $this->likely_stuck = isset($data['likely_stuck']) ? $data['likely_stuck'] : null;
        $this->number = isset($data['number']) ? $data['number'] : null;
        $this->progress = isset($data['progress']) ? $data['progress'] : null;
        $this->_class = isset($data['_class']) ? $data['_class'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        return true;
    }


    /**
     * Gets current_executable.
     *
     * @return FreeStyleBuild|null
     */
    public function getCurrentExecutable()
    {
        return $this->current_executable;
    }

    /**
     * Sets current_executable.
     *
     * @param FreeStyleBuild|null $current_executable
     *
     * @return $this
     */
    public function setCurrentExecutable(FreeStyleBuild $current_executable = null)
    {
        $this->current_executable = $current_executable;

        return $this;
    }

    /**
     * Gets idle.
     *
     * @return bool|null
     */
    public function isIdle()
    {
        return $this->idle;
    }

    /**
     * Sets idle.
     *
     * @param bool|null $idle
     *
     * @return $this
     */
    public function setIdle($idle = null)
    {
        $this->idle = $idle;

        return $this;
    }

    /**
     * Gets likely_stuck.
     *
     * @return bool|null
     */
    public function isLikelyStuck()
    {
        return $this->likely_stuck;
    }

    /**
     * Sets likely_stuck.
     *
     * @param bool|null $likely_stuck
     *
     * @return $this
     */
    public function setLikelyStuck($likely_stuck = null)
    {
        $this->likely_stuck = $likely_stuck;

        return $this;
    }

    /**
     * Gets number.
     *
     * @return int|null
     */
    public function getNumber()
    {
        return $this->number;
    }

    /**
     * Sets number.
     *
     * @param int|null $number
     *
     * @return $this
     */
    public function setNumber($number = null)
    {
        $this->number = $number;

        return $this;
    }

    /**
     * Gets progress.
     *
     * @return int|null
     */
    public function getProgress()
    {
        return $this->progress;
    }

    /**
     * Sets progress.
     *
     * @param int|null $progress
     *
     * @return $this
     */
    public function setProgress($progress = null)
    {
        $this->progress = $progress;

        return $this;
    }

    /**
     * Gets _class.
     *
     * @return string|null
     */
    public function getClass()
    {
        return $this->_class;
    }

    /**
     * Sets _class.
     *
     * @param string|null $_class
     *
     * @return $this
     */
    public function setClass($_class = null)
    {
        $this->_class = $_class;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


