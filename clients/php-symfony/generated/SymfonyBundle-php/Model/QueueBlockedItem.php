<?php
/**
 * QueueBlockedItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;
use Swagger\Server\Model\CauseAction;
use Swagger\Server\Model\FreeStyleProject;

/**
 * Class representing the QueueBlockedItem model.
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class QueueBlockedItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'QueueBlockedItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        '_class' => ['_class', 'string', null, 'setClass', 'getClass'],
        'actions' => ['actions', 'Swagger\Server\Model\CauseAction[]', null, 'setActions', 'getActions'],
        'blocked' => ['blocked', 'bool', null, 'setBlocked', 'isBlocked'],
        'buildable' => ['buildable', 'bool', null, 'setBuildable', 'isBuildable'],
        'id' => ['id', 'int', null, 'setId', 'getId'],
        'in_queue_since' => ['inQueueSince', 'int', null, 'setInQueueSince', 'getInQueueSince'],
        'params' => ['params', 'string', null, 'setParams', 'getParams'],
        'stuck' => ['stuck', 'bool', null, 'setStuck', 'isStuck'],
        'task' => ['task', 'Swagger\Server\Model\FreeStyleProject', null, 'setTask', 'getTask'],
        'url' => ['url', 'string', null, 'setUrl', 'getUrl'],
        'why' => ['why', 'string', null, 'setWhy', 'getWhy'],
        'buildable_start_milliseconds' => ['buildableStartMilliseconds', 'int', null, 'setBuildableStartMilliseconds', 'getBuildableStartMilliseconds'],
    ];
    

    
    /**     * @var string|null
     */
    protected $_class;

    /**     * @var CauseAction[]|null
     */
    protected $actions;

    /**     * @var bool|null
     */
    protected $blocked;

    /**     * @var bool|null
     */
    protected $buildable;

    /**     * @var int|null
     */
    protected $id;

    /**     * @var int|null
     */
    protected $in_queue_since;

    /**     * @var string|null
     */
    protected $params;

    /**     * @var bool|null
     */
    protected $stuck;

    /**     * @var FreeStyleProject|null
     */
    protected $task;

    /**     * @var string|null
     */
    protected $url;

    /**     * @var string|null
     */
    protected $why;

    /**     * @var int|null
     */
    protected $buildable_start_milliseconds;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->_class = isset($data['_class']) ? $data['_class'] : null;
        $this->actions = isset($data['actions']) ? $data['actions'] : null;
        $this->blocked = isset($data['blocked']) ? $data['blocked'] : null;
        $this->buildable = isset($data['buildable']) ? $data['buildable'] : null;
        $this->id = isset($data['id']) ? $data['id'] : null;
        $this->in_queue_since = isset($data['in_queue_since']) ? $data['in_queue_since'] : null;
        $this->params = isset($data['params']) ? $data['params'] : null;
        $this->stuck = isset($data['stuck']) ? $data['stuck'] : null;
        $this->task = isset($data['task']) ? $data['task'] : null;
        $this->url = isset($data['url']) ? $data['url'] : null;
        $this->why = isset($data['why']) ? $data['why'] : null;
        $this->buildable_start_milliseconds = isset($data['buildable_start_milliseconds']) ? $data['buildable_start_milliseconds'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        return true;
    }


    /**
     * Gets _class.
     *
     * @return string|null
     */
    public function getClass()
    {
        return $this->_class;
    }

    /**
     * Sets _class.
     *
     * @param string|null $_class
     *
     * @return $this
     */
    public function setClass($_class = null)
    {
        $this->_class = $_class;

        return $this;
    }

    /**
     * Gets actions.
     *
     * @return CauseAction[]|null
     */
    public function getActions()
    {
        return $this->actions;
    }

    /**
     * Sets actions.
     *
     * @param CauseAction[]|null $actions
     *
     * @return $this
     */
    public function setActions(array $actions = null)
    {
        $this->actions = $actions;

        return $this;
    }

    /**
     * Gets blocked.
     *
     * @return bool|null
     */
    public function isBlocked()
    {
        return $this->blocked;
    }

    /**
     * Sets blocked.
     *
     * @param bool|null $blocked
     *
     * @return $this
     */
    public function setBlocked($blocked = null)
    {
        $this->blocked = $blocked;

        return $this;
    }

    /**
     * Gets buildable.
     *
     * @return bool|null
     */
    public function isBuildable()
    {
        return $this->buildable;
    }

    /**
     * Sets buildable.
     *
     * @param bool|null $buildable
     *
     * @return $this
     */
    public function setBuildable($buildable = null)
    {
        $this->buildable = $buildable;

        return $this;
    }

    /**
     * Gets id.
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * Sets id.
     *
     * @param int|null $id
     *
     * @return $this
     */
    public function setId($id = null)
    {
        $this->id = $id;

        return $this;
    }

    /**
     * Gets in_queue_since.
     *
     * @return int|null
     */
    public function getInQueueSince()
    {
        return $this->in_queue_since;
    }

    /**
     * Sets in_queue_since.
     *
     * @param int|null $in_queue_since
     *
     * @return $this
     */
    public function setInQueueSince($in_queue_since = null)
    {
        $this->in_queue_since = $in_queue_since;

        return $this;
    }

    /**
     * Gets params.
     *
     * @return string|null
     */
    public function getParams()
    {
        return $this->params;
    }

    /**
     * Sets params.
     *
     * @param string|null $params
     *
     * @return $this
     */
    public function setParams($params = null)
    {
        $this->params = $params;

        return $this;
    }

    /**
     * Gets stuck.
     *
     * @return bool|null
     */
    public function isStuck()
    {
        return $this->stuck;
    }

    /**
     * Sets stuck.
     *
     * @param bool|null $stuck
     *
     * @return $this
     */
    public function setStuck($stuck = null)
    {
        $this->stuck = $stuck;

        return $this;
    }

    /**
     * Gets task.
     *
     * @return FreeStyleProject|null
     */
    public function getTask()
    {
        return $this->task;
    }

    /**
     * Sets task.
     *
     * @param FreeStyleProject|null $task
     *
     * @return $this
     */
    public function setTask(FreeStyleProject $task = null)
    {
        $this->task = $task;

        return $this;
    }

    /**
     * Gets url.
     *
     * @return string|null
     */
    public function getUrl()
    {
        return $this->url;
    }

    /**
     * Sets url.
     *
     * @param string|null $url
     *
     * @return $this
     */
    public function setUrl($url = null)
    {
        $this->url = $url;

        return $this;
    }

    /**
     * Gets why.
     *
     * @return string|null
     */
    public function getWhy()
    {
        return $this->why;
    }

    /**
     * Sets why.
     *
     * @param string|null $why
     *
     * @return $this
     */
    public function setWhy($why = null)
    {
        $this->why = $why;

        return $this;
    }

    /**
     * Gets buildable_start_milliseconds.
     *
     * @return int|null
     */
    public function getBuildableStartMilliseconds()
    {
        return $this->buildable_start_milliseconds;
    }

    /**
     * Sets buildable_start_milliseconds.
     *
     * @param int|null $buildable_start_milliseconds
     *
     * @return $this
     */
    public function setBuildableStartMilliseconds($buildable_start_milliseconds = null)
    {
        $this->buildable_start_milliseconds = $buildable_start_milliseconds;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


