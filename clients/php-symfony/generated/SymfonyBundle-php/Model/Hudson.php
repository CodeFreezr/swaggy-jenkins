<?php
/**
 * Hudson
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;
use Swagger\Server\Model\HudsonassignedLabels;
use Swagger\Server\Model\FreeStyleProject;
use Swagger\Server\Model\UnlabeledLoadStatistics;
use Swagger\Server\Model\AllView;

/**
 * Class representing the Hudson model.
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class Hudson implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'Hudson';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        '_class' => ['_class', 'string', null, 'setClass', 'getClass'],
        'assigned_labels' => ['assignedLabels', 'Swagger\Server\Model\HudsonassignedLabels[]', null, 'setAssignedLabels', 'getAssignedLabels'],
        'mode' => ['mode', 'string', null, 'setMode', 'getMode'],
        'node_description' => ['nodeDescription', 'string', null, 'setNodeDescription', 'getNodeDescription'],
        'node_name' => ['nodeName', 'string', null, 'setNodeName', 'getNodeName'],
        'num_executors' => ['numExecutors', 'int', null, 'setNumExecutors', 'getNumExecutors'],
        'description' => ['description', 'string', null, 'setDescription', 'getDescription'],
        'jobs' => ['jobs', 'Swagger\Server\Model\FreeStyleProject[]', null, 'setJobs', 'getJobs'],
        'primary_view' => ['primaryView', 'Swagger\Server\Model\AllView', null, 'setPrimaryView', 'getPrimaryView'],
        'quieting_down' => ['quietingDown', 'bool', null, 'setQuietingDown', 'isQuietingDown'],
        'slave_agent_port' => ['slaveAgentPort', 'int', null, 'setSlaveAgentPort', 'getSlaveAgentPort'],
        'unlabeled_load' => ['unlabeledLoad', 'Swagger\Server\Model\UnlabeledLoadStatistics', null, 'setUnlabeledLoad', 'getUnlabeledLoad'],
        'use_crumbs' => ['useCrumbs', 'bool', null, 'setUseCrumbs', 'isUseCrumbs'],
        'use_security' => ['useSecurity', 'bool', null, 'setUseSecurity', 'isUseSecurity'],
        'views' => ['views', 'Swagger\Server\Model\AllView[]', null, 'setViews', 'getViews'],
    ];
    

    
    /**     * @var string|null
     */
    protected $_class;

    /**     * @var HudsonassignedLabels[]|null
     */
    protected $assigned_labels;

    /**     * @var string|null
     */
    protected $mode;

    /**     * @var string|null
     */
    protected $node_description;

    /**     * @var string|null
     */
    protected $node_name;

    /**     * @var int|null
     */
    protected $num_executors;

    /**     * @var string|null
     */
    protected $description;

    /**     * @var FreeStyleProject[]|null
     */
    protected $jobs;

    /**     * @var AllView|null
     */
    protected $primary_view;

    /**     * @var bool|null
     */
    protected $quieting_down;

    /**     * @var int|null
     */
    protected $slave_agent_port;

    /**     * @var UnlabeledLoadStatistics|null
     */
    protected $unlabeled_load;

    /**     * @var bool|null
     */
    protected $use_crumbs;

    /**     * @var bool|null
     */
    protected $use_security;

    /**     * @var AllView[]|null
     */
    protected $views;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->_class = isset($data['_class']) ? $data['_class'] : null;
        $this->assigned_labels = isset($data['assigned_labels']) ? $data['assigned_labels'] : null;
        $this->mode = isset($data['mode']) ? $data['mode'] : null;
        $this->node_description = isset($data['node_description']) ? $data['node_description'] : null;
        $this->node_name = isset($data['node_name']) ? $data['node_name'] : null;
        $this->num_executors = isset($data['num_executors']) ? $data['num_executors'] : null;
        $this->description = isset($data['description']) ? $data['description'] : null;
        $this->jobs = isset($data['jobs']) ? $data['jobs'] : null;
        $this->primary_view = isset($data['primary_view']) ? $data['primary_view'] : null;
        $this->quieting_down = isset($data['quieting_down']) ? $data['quieting_down'] : null;
        $this->slave_agent_port = isset($data['slave_agent_port']) ? $data['slave_agent_port'] : null;
        $this->unlabeled_load = isset($data['unlabeled_load']) ? $data['unlabeled_load'] : null;
        $this->use_crumbs = isset($data['use_crumbs']) ? $data['use_crumbs'] : null;
        $this->use_security = isset($data['use_security']) ? $data['use_security'] : null;
        $this->views = isset($data['views']) ? $data['views'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        return true;
    }


    /**
     * Gets _class.
     *
     * @return string|null
     */
    public function getClass()
    {
        return $this->_class;
    }

    /**
     * Sets _class.
     *
     * @param string|null $_class
     *
     * @return $this
     */
    public function setClass($_class = null)
    {
        $this->_class = $_class;

        return $this;
    }

    /**
     * Gets assigned_labels.
     *
     * @return HudsonassignedLabels[]|null
     */
    public function getAssignedLabels()
    {
        return $this->assigned_labels;
    }

    /**
     * Sets assigned_labels.
     *
     * @param HudsonassignedLabels[]|null $assigned_labels
     *
     * @return $this
     */
    public function setAssignedLabels(array $assigned_labels = null)
    {
        $this->assigned_labels = $assigned_labels;

        return $this;
    }

    /**
     * Gets mode.
     *
     * @return string|null
     */
    public function getMode()
    {
        return $this->mode;
    }

    /**
     * Sets mode.
     *
     * @param string|null $mode
     *
     * @return $this
     */
    public function setMode($mode = null)
    {
        $this->mode = $mode;

        return $this;
    }

    /**
     * Gets node_description.
     *
     * @return string|null
     */
    public function getNodeDescription()
    {
        return $this->node_description;
    }

    /**
     * Sets node_description.
     *
     * @param string|null $node_description
     *
     * @return $this
     */
    public function setNodeDescription($node_description = null)
    {
        $this->node_description = $node_description;

        return $this;
    }

    /**
     * Gets node_name.
     *
     * @return string|null
     */
    public function getNodeName()
    {
        return $this->node_name;
    }

    /**
     * Sets node_name.
     *
     * @param string|null $node_name
     *
     * @return $this
     */
    public function setNodeName($node_name = null)
    {
        $this->node_name = $node_name;

        return $this;
    }

    /**
     * Gets num_executors.
     *
     * @return int|null
     */
    public function getNumExecutors()
    {
        return $this->num_executors;
    }

    /**
     * Sets num_executors.
     *
     * @param int|null $num_executors
     *
     * @return $this
     */
    public function setNumExecutors($num_executors = null)
    {
        $this->num_executors = $num_executors;

        return $this;
    }

    /**
     * Gets description.
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Sets description.
     *
     * @param string|null $description
     *
     * @return $this
     */
    public function setDescription($description = null)
    {
        $this->description = $description;

        return $this;
    }

    /**
     * Gets jobs.
     *
     * @return FreeStyleProject[]|null
     */
    public function getJobs()
    {
        return $this->jobs;
    }

    /**
     * Sets jobs.
     *
     * @param FreeStyleProject[]|null $jobs
     *
     * @return $this
     */
    public function setJobs(array $jobs = null)
    {
        $this->jobs = $jobs;

        return $this;
    }

    /**
     * Gets primary_view.
     *
     * @return AllView|null
     */
    public function getPrimaryView()
    {
        return $this->primary_view;
    }

    /**
     * Sets primary_view.
     *
     * @param AllView|null $primary_view
     *
     * @return $this
     */
    public function setPrimaryView(AllView $primary_view = null)
    {
        $this->primary_view = $primary_view;

        return $this;
    }

    /**
     * Gets quieting_down.
     *
     * @return bool|null
     */
    public function isQuietingDown()
    {
        return $this->quieting_down;
    }

    /**
     * Sets quieting_down.
     *
     * @param bool|null $quieting_down
     *
     * @return $this
     */
    public function setQuietingDown($quieting_down = null)
    {
        $this->quieting_down = $quieting_down;

        return $this;
    }

    /**
     * Gets slave_agent_port.
     *
     * @return int|null
     */
    public function getSlaveAgentPort()
    {
        return $this->slave_agent_port;
    }

    /**
     * Sets slave_agent_port.
     *
     * @param int|null $slave_agent_port
     *
     * @return $this
     */
    public function setSlaveAgentPort($slave_agent_port = null)
    {
        $this->slave_agent_port = $slave_agent_port;

        return $this;
    }

    /**
     * Gets unlabeled_load.
     *
     * @return UnlabeledLoadStatistics|null
     */
    public function getUnlabeledLoad()
    {
        return $this->unlabeled_load;
    }

    /**
     * Sets unlabeled_load.
     *
     * @param UnlabeledLoadStatistics|null $unlabeled_load
     *
     * @return $this
     */
    public function setUnlabeledLoad(UnlabeledLoadStatistics $unlabeled_load = null)
    {
        $this->unlabeled_load = $unlabeled_load;

        return $this;
    }

    /**
     * Gets use_crumbs.
     *
     * @return bool|null
     */
    public function isUseCrumbs()
    {
        return $this->use_crumbs;
    }

    /**
     * Sets use_crumbs.
     *
     * @param bool|null $use_crumbs
     *
     * @return $this
     */
    public function setUseCrumbs($use_crumbs = null)
    {
        $this->use_crumbs = $use_crumbs;

        return $this;
    }

    /**
     * Gets use_security.
     *
     * @return bool|null
     */
    public function isUseSecurity()
    {
        return $this->use_security;
    }

    /**
     * Sets use_security.
     *
     * @param bool|null $use_security
     *
     * @return $this
     */
    public function setUseSecurity($use_security = null)
    {
        $this->use_security = $use_security;

        return $this;
    }

    /**
     * Gets views.
     *
     * @return AllView[]|null
     */
    public function getViews()
    {
        return $this->views;
    }

    /**
     * Sets views.
     *
     * @param AllView[]|null $views
     *
     * @return $this
     */
    public function setViews(array $views = null)
    {
        $this->views = $views;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


