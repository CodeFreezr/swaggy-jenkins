<?php
/**
 * HudsonMasterComputer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;
use Swagger\Server\Model\HudsonMasterComputerexecutors;
use Swagger\Server\Model\HudsonMasterComputermonitorData;
use Swagger\Server\Model\Label1;

/**
 * Class representing the HudsonMasterComputer model.
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class HudsonMasterComputer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'HudsonMasterComputer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        '_class' => ['_class', 'string', null, 'setClass', 'getClass'],
        'display_name' => ['displayName', 'string', null, 'setDisplayName', 'getDisplayName'],
        'executors' => ['executors', 'Swagger\Server\Model\HudsonMasterComputerexecutors[]', null, 'setExecutors', 'getExecutors'],
        'icon' => ['icon', 'string', null, 'setIcon', 'getIcon'],
        'icon_class_name' => ['iconClassName', 'string', null, 'setIconClassName', 'getIconClassName'],
        'idle' => ['idle', 'bool', null, 'setIdle', 'isIdle'],
        'jnlp_agent' => ['jnlpAgent', 'bool', null, 'setJnlpAgent', 'isJnlpAgent'],
        'launch_supported' => ['launchSupported', 'bool', null, 'setLaunchSupported', 'isLaunchSupported'],
        'load_statistics' => ['loadStatistics', 'Swagger\Server\Model\Label1', null, 'setLoadStatistics', 'getLoadStatistics'],
        'manual_launch_allowed' => ['manualLaunchAllowed', 'bool', null, 'setManualLaunchAllowed', 'isManualLaunchAllowed'],
        'monitor_data' => ['monitorData', 'Swagger\Server\Model\HudsonMasterComputermonitorData', null, 'setMonitorData', 'getMonitorData'],
        'num_executors' => ['numExecutors', 'int', null, 'setNumExecutors', 'getNumExecutors'],
        'offline' => ['offline', 'bool', null, 'setOffline', 'isOffline'],
        'offline_cause' => ['offlineCause', 'string', null, 'setOfflineCause', 'getOfflineCause'],
        'offline_cause_reason' => ['offlineCauseReason', 'string', null, 'setOfflineCauseReason', 'getOfflineCauseReason'],
        'temporarily_offline' => ['temporarilyOffline', 'bool', null, 'setTemporarilyOffline', 'isTemporarilyOffline'],
    ];
    

    
    /**     * @var string|null
     */
    protected $_class;

    /**     * @var string|null
     */
    protected $display_name;

    /**     * @var HudsonMasterComputerexecutors[]|null
     */
    protected $executors;

    /**     * @var string|null
     */
    protected $icon;

    /**     * @var string|null
     */
    protected $icon_class_name;

    /**     * @var bool|null
     */
    protected $idle;

    /**     * @var bool|null
     */
    protected $jnlp_agent;

    /**     * @var bool|null
     */
    protected $launch_supported;

    /**     * @var Label1|null
     */
    protected $load_statistics;

    /**     * @var bool|null
     */
    protected $manual_launch_allowed;

    /**     * @var HudsonMasterComputermonitorData|null
     */
    protected $monitor_data;

    /**     * @var int|null
     */
    protected $num_executors;

    /**     * @var bool|null
     */
    protected $offline;

    /**     * @var string|null
     */
    protected $offline_cause;

    /**     * @var string|null
     */
    protected $offline_cause_reason;

    /**     * @var bool|null
     */
    protected $temporarily_offline;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->_class = isset($data['_class']) ? $data['_class'] : null;
        $this->display_name = isset($data['display_name']) ? $data['display_name'] : null;
        $this->executors = isset($data['executors']) ? $data['executors'] : null;
        $this->icon = isset($data['icon']) ? $data['icon'] : null;
        $this->icon_class_name = isset($data['icon_class_name']) ? $data['icon_class_name'] : null;
        $this->idle = isset($data['idle']) ? $data['idle'] : null;
        $this->jnlp_agent = isset($data['jnlp_agent']) ? $data['jnlp_agent'] : null;
        $this->launch_supported = isset($data['launch_supported']) ? $data['launch_supported'] : null;
        $this->load_statistics = isset($data['load_statistics']) ? $data['load_statistics'] : null;
        $this->manual_launch_allowed = isset($data['manual_launch_allowed']) ? $data['manual_launch_allowed'] : null;
        $this->monitor_data = isset($data['monitor_data']) ? $data['monitor_data'] : null;
        $this->num_executors = isset($data['num_executors']) ? $data['num_executors'] : null;
        $this->offline = isset($data['offline']) ? $data['offline'] : null;
        $this->offline_cause = isset($data['offline_cause']) ? $data['offline_cause'] : null;
        $this->offline_cause_reason = isset($data['offline_cause_reason']) ? $data['offline_cause_reason'] : null;
        $this->temporarily_offline = isset($data['temporarily_offline']) ? $data['temporarily_offline'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        return true;
    }


    /**
     * Gets _class.
     *
     * @return string|null
     */
    public function getClass()
    {
        return $this->_class;
    }

    /**
     * Sets _class.
     *
     * @param string|null $_class
     *
     * @return $this
     */
    public function setClass($_class = null)
    {
        $this->_class = $_class;

        return $this;
    }

    /**
     * Gets display_name.
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->display_name;
    }

    /**
     * Sets display_name.
     *
     * @param string|null $display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name = null)
    {
        $this->display_name = $display_name;

        return $this;
    }

    /**
     * Gets executors.
     *
     * @return HudsonMasterComputerexecutors[]|null
     */
    public function getExecutors()
    {
        return $this->executors;
    }

    /**
     * Sets executors.
     *
     * @param HudsonMasterComputerexecutors[]|null $executors
     *
     * @return $this
     */
    public function setExecutors(array $executors = null)
    {
        $this->executors = $executors;

        return $this;
    }

    /**
     * Gets icon.
     *
     * @return string|null
     */
    public function getIcon()
    {
        return $this->icon;
    }

    /**
     * Sets icon.
     *
     * @param string|null $icon
     *
     * @return $this
     */
    public function setIcon($icon = null)
    {
        $this->icon = $icon;

        return $this;
    }

    /**
     * Gets icon_class_name.
     *
     * @return string|null
     */
    public function getIconClassName()
    {
        return $this->icon_class_name;
    }

    /**
     * Sets icon_class_name.
     *
     * @param string|null $icon_class_name
     *
     * @return $this
     */
    public function setIconClassName($icon_class_name = null)
    {
        $this->icon_class_name = $icon_class_name;

        return $this;
    }

    /**
     * Gets idle.
     *
     * @return bool|null
     */
    public function isIdle()
    {
        return $this->idle;
    }

    /**
     * Sets idle.
     *
     * @param bool|null $idle
     *
     * @return $this
     */
    public function setIdle($idle = null)
    {
        $this->idle = $idle;

        return $this;
    }

    /**
     * Gets jnlp_agent.
     *
     * @return bool|null
     */
    public function isJnlpAgent()
    {
        return $this->jnlp_agent;
    }

    /**
     * Sets jnlp_agent.
     *
     * @param bool|null $jnlp_agent
     *
     * @return $this
     */
    public function setJnlpAgent($jnlp_agent = null)
    {
        $this->jnlp_agent = $jnlp_agent;

        return $this;
    }

    /**
     * Gets launch_supported.
     *
     * @return bool|null
     */
    public function isLaunchSupported()
    {
        return $this->launch_supported;
    }

    /**
     * Sets launch_supported.
     *
     * @param bool|null $launch_supported
     *
     * @return $this
     */
    public function setLaunchSupported($launch_supported = null)
    {
        $this->launch_supported = $launch_supported;

        return $this;
    }

    /**
     * Gets load_statistics.
     *
     * @return Label1|null
     */
    public function getLoadStatistics()
    {
        return $this->load_statistics;
    }

    /**
     * Sets load_statistics.
     *
     * @param Label1|null $load_statistics
     *
     * @return $this
     */
    public function setLoadStatistics(Label1 $load_statistics = null)
    {
        $this->load_statistics = $load_statistics;

        return $this;
    }

    /**
     * Gets manual_launch_allowed.
     *
     * @return bool|null
     */
    public function isManualLaunchAllowed()
    {
        return $this->manual_launch_allowed;
    }

    /**
     * Sets manual_launch_allowed.
     *
     * @param bool|null $manual_launch_allowed
     *
     * @return $this
     */
    public function setManualLaunchAllowed($manual_launch_allowed = null)
    {
        $this->manual_launch_allowed = $manual_launch_allowed;

        return $this;
    }

    /**
     * Gets monitor_data.
     *
     * @return HudsonMasterComputermonitorData|null
     */
    public function getMonitorData()
    {
        return $this->monitor_data;
    }

    /**
     * Sets monitor_data.
     *
     * @param HudsonMasterComputermonitorData|null $monitor_data
     *
     * @return $this
     */
    public function setMonitorData(HudsonMasterComputermonitorData $monitor_data = null)
    {
        $this->monitor_data = $monitor_data;

        return $this;
    }

    /**
     * Gets num_executors.
     *
     * @return int|null
     */
    public function getNumExecutors()
    {
        return $this->num_executors;
    }

    /**
     * Sets num_executors.
     *
     * @param int|null $num_executors
     *
     * @return $this
     */
    public function setNumExecutors($num_executors = null)
    {
        $this->num_executors = $num_executors;

        return $this;
    }

    /**
     * Gets offline.
     *
     * @return bool|null
     */
    public function isOffline()
    {
        return $this->offline;
    }

    /**
     * Sets offline.
     *
     * @param bool|null $offline
     *
     * @return $this
     */
    public function setOffline($offline = null)
    {
        $this->offline = $offline;

        return $this;
    }

    /**
     * Gets offline_cause.
     *
     * @return string|null
     */
    public function getOfflineCause()
    {
        return $this->offline_cause;
    }

    /**
     * Sets offline_cause.
     *
     * @param string|null $offline_cause
     *
     * @return $this
     */
    public function setOfflineCause($offline_cause = null)
    {
        $this->offline_cause = $offline_cause;

        return $this;
    }

    /**
     * Gets offline_cause_reason.
     *
     * @return string|null
     */
    public function getOfflineCauseReason()
    {
        return $this->offline_cause_reason;
    }

    /**
     * Sets offline_cause_reason.
     *
     * @param string|null $offline_cause_reason
     *
     * @return $this
     */
    public function setOfflineCauseReason($offline_cause_reason = null)
    {
        $this->offline_cause_reason = $offline_cause_reason;

        return $this;
    }

    /**
     * Gets temporarily_offline.
     *
     * @return bool|null
     */
    public function isTemporarilyOffline()
    {
        return $this->temporarily_offline;
    }

    /**
     * Sets temporarily_offline.
     *
     * @param bool|null $temporarily_offline
     *
     * @return $this
     */
    public function setTemporarilyOffline($temporarily_offline = null)
    {
        $this->temporarily_offline = $temporarily_offline;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


