<?php
/**
 * SwapSpaceMonitorMemoryUsage2
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Server\Model
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Server\Model;

use \ArrayAccess;

/**
 * Class representing the SwapSpaceMonitorMemoryUsage2 model.
 *
 * @package Swagger\Server\Model
 * @author  Swagger Codegen team
 */
class SwapSpaceMonitorMemoryUsage2 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $_name = 'SwapSpaceMonitorMemoryUsage2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var array[]
      */
    protected static $_attributes = [
        '_class' => ['_class', 'string', null, 'setClass', 'getClass'],
        'available_physical_memory' => ['availablePhysicalMemory', 'int', null, 'setAvailablePhysicalMemory', 'getAvailablePhysicalMemory'],
        'available_swap_space' => ['availableSwapSpace', 'int', null, 'setAvailableSwapSpace', 'getAvailableSwapSpace'],
        'total_physical_memory' => ['totalPhysicalMemory', 'int', null, 'setTotalPhysicalMemory', 'getTotalPhysicalMemory'],
        'total_swap_space' => ['totalSwapSpace', 'int', null, 'setTotalSwapSpace', 'getTotalSwapSpace'],
    ];
    

    
    /**     * @var string|null
     */
    protected $_class;

    /**     * @var int|null
     */
    protected $available_physical_memory;

    /**     * @var int|null
     */
    protected $available_swap_space;

    /**     * @var int|null
     */
    protected $total_physical_memory;

    /**     * @var int|null
     */
    protected $total_swap_space;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->_class = isset($data['_class']) ? $data['_class'] : null;
        $this->available_physical_memory = isset($data['available_physical_memory']) ? $data['available_physical_memory'] : null;
        $this->available_swap_space = isset($data['available_swap_space']) ? $data['available_swap_space'] : null;
        $this->total_physical_memory = isset($data['total_physical_memory']) ? $data['total_physical_memory'] : null;
        $this->total_swap_space = isset($data['total_swap_space']) ? $data['total_swap_space'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function modelName() {
        return self::$_name;
    }

    /**
     * Array of property to mappings.
     *
     * @return array[]
     */
    public function modelAttributes() {
        
        return self::$_attributes;
    }

    /**
     * Validate all the properties in the model
     *
     * Return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function isValid()
    {
        return true;
    }


    /**
     * Gets _class.
     *
     * @return string|null
     */
    public function getClass()
    {
        return $this->_class;
    }

    /**
     * Sets _class.
     *
     * @param string|null $_class
     *
     * @return $this
     */
    public function setClass($_class = null)
    {
        $this->_class = $_class;

        return $this;
    }

    /**
     * Gets available_physical_memory.
     *
     * @return int|null
     */
    public function getAvailablePhysicalMemory()
    {
        return $this->available_physical_memory;
    }

    /**
     * Sets available_physical_memory.
     *
     * @param int|null $available_physical_memory
     *
     * @return $this
     */
    public function setAvailablePhysicalMemory($available_physical_memory = null)
    {
        $this->available_physical_memory = $available_physical_memory;

        return $this;
    }

    /**
     * Gets available_swap_space.
     *
     * @return int|null
     */
    public function getAvailableSwapSpace()
    {
        return $this->available_swap_space;
    }

    /**
     * Sets available_swap_space.
     *
     * @param int|null $available_swap_space
     *
     * @return $this
     */
    public function setAvailableSwapSpace($available_swap_space = null)
    {
        $this->available_swap_space = $available_swap_space;

        return $this;
    }

    /**
     * Gets total_physical_memory.
     *
     * @return int|null
     */
    public function getTotalPhysicalMemory()
    {
        return $this->total_physical_memory;
    }

    /**
     * Sets total_physical_memory.
     *
     * @param int|null $total_physical_memory
     *
     * @return $this
     */
    public function setTotalPhysicalMemory($total_physical_memory = null)
    {
        $this->total_physical_memory = $total_physical_memory;

        return $this;
    }

    /**
     * Gets total_swap_space.
     *
     * @return int|null
     */
    public function getTotalSwapSpace()
    {
        return $this->total_swap_space;
    }

    /**
     * Sets total_swap_space.
     *
     * @param int|null $total_swap_space
     *
     * @return $this
     */
    public function setTotalSwapSpace($total_swap_space = null)
    {
        $this->total_swap_space = $total_swap_space;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->$offset) ? $this->$offset : null;
    }

    /**
     * Sets value based on offset.
     * @param  string  $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        $this->$offset = null;
    }
}


