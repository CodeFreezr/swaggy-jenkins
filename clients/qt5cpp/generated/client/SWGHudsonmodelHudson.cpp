/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGHudsonmodelHudson.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGHudsonmodelHudson::SWGHudsonmodelHudson(QString* json) {
    init();
    this->fromJson(*json);
}

SWGHudsonmodelHudson::SWGHudsonmodelHudson() {
    init();
}

SWGHudsonmodelHudson::~SWGHudsonmodelHudson() {
    this->cleanup();
}

void
SWGHudsonmodelHudson::init() {
    _class = new QString("");
    assigned_labels = new QList<SWGHudsonmodelHudsonassignedLabels*>();
    mode = new QString("");
    node_description = new QString("");
    node_name = new QString("");
    num_executors = 0;
    description = new QString("");
    jobs = new QList<SWGHudsonmodelFreeStyleProject*>();
    primary_view = new SWGHudsonmodelAllView();
    quieting_down = false;
    slave_agent_port = 0;
    unlabeled_load = new SWGJenkinsmodelUnlabeledLoadStatistics();
    use_crumbs = false;
    use_security = false;
    views = new QList<SWGHudsonmodelAllView*>();
}

void
SWGHudsonmodelHudson::cleanup() {
    
    if(_class != nullptr) {
        delete _class;
    }

    if(assigned_labels != nullptr) {
        QList<SWGHudsonmodelHudsonassignedLabels*>* arr = assigned_labels;
        foreach(SWGHudsonmodelHudsonassignedLabels* o, *arr) {
            delete o;
        }
        delete assigned_labels;
    }

    if(mode != nullptr) {
        delete mode;
    }

    if(node_description != nullptr) {
        delete node_description;
    }

    if(node_name != nullptr) {
        delete node_name;
    }


    if(description != nullptr) {
        delete description;
    }

    if(jobs != nullptr) {
        QList<SWGHudsonmodelFreeStyleProject*>* arr = jobs;
        foreach(SWGHudsonmodelFreeStyleProject* o, *arr) {
            delete o;
        }
        delete jobs;
    }

    if(primary_view != nullptr) {
        delete primary_view;
    }



    if(unlabeled_load != nullptr) {
        delete unlabeled_load;
    }



    if(views != nullptr) {
        QList<SWGHudsonmodelAllView*>* arr = views;
        foreach(SWGHudsonmodelAllView* o, *arr) {
            delete o;
        }
        delete views;
    }
}

SWGHudsonmodelHudson*
SWGHudsonmodelHudson::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGHudsonmodelHudson::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&_class, pJson["_class"], "QString", "QString");
    
    ::Swagger::setValue(&assigned_labels, pJson["assignedLabels"], "QList", "SWGHudsonmodelHudsonassignedLabels");
    
    ::Swagger::setValue(&mode, pJson["mode"], "QString", "QString");
    ::Swagger::setValue(&node_description, pJson["nodeDescription"], "QString", "QString");
    ::Swagger::setValue(&node_name, pJson["nodeName"], "QString", "QString");
    ::Swagger::setValue(&num_executors, pJson["numExecutors"], "qint32", "");
    ::Swagger::setValue(&description, pJson["description"], "QString", "QString");
    
    ::Swagger::setValue(&jobs, pJson["jobs"], "QList", "SWGHudsonmodelFreeStyleProject");
    
    ::Swagger::setValue(&primary_view, pJson["primaryView"], "SWGHudsonmodelAllView", "SWGHudsonmodelAllView");
    ::Swagger::setValue(&quieting_down, pJson["quietingDown"], "bool", "");
    ::Swagger::setValue(&slave_agent_port, pJson["slaveAgentPort"], "qint32", "");
    ::Swagger::setValue(&unlabeled_load, pJson["unlabeledLoad"], "SWGJenkinsmodelUnlabeledLoadStatistics", "SWGJenkinsmodelUnlabeledLoadStatistics");
    ::Swagger::setValue(&use_crumbs, pJson["useCrumbs"], "bool", "");
    ::Swagger::setValue(&use_security, pJson["useSecurity"], "bool", "");
    
    ::Swagger::setValue(&views, pJson["views"], "QList", "SWGHudsonmodelAllView");
    
}

QString
SWGHudsonmodelHudson::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGHudsonmodelHudson::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("_class"), _class, obj, QString("QString"));

    QJsonArray assigned_labelsJsonArray;
    toJsonArray((QList<void*>*)assigned_labels, &assigned_labelsJsonArray, "assigned_labels", "SWGHudsonmodelHudsonassignedLabels");
    obj->insert("assignedLabels", assigned_labelsJsonArray);

    toJsonValue(QString("mode"), mode, obj, QString("QString"));

    toJsonValue(QString("nodeDescription"), node_description, obj, QString("QString"));

    toJsonValue(QString("nodeName"), node_name, obj, QString("QString"));

    obj->insert("numExecutors", QJsonValue(num_executors));

    toJsonValue(QString("description"), description, obj, QString("QString"));

    QJsonArray jobsJsonArray;
    toJsonArray((QList<void*>*)jobs, &jobsJsonArray, "jobs", "SWGHudsonmodelFreeStyleProject");
    obj->insert("jobs", jobsJsonArray);

    toJsonValue(QString("primaryView"), primary_view, obj, QString("SWGHudsonmodelAllView"));

    obj->insert("quietingDown", QJsonValue(quieting_down));

    obj->insert("slaveAgentPort", QJsonValue(slave_agent_port));

    toJsonValue(QString("unlabeledLoad"), unlabeled_load, obj, QString("SWGJenkinsmodelUnlabeledLoadStatistics"));

    obj->insert("useCrumbs", QJsonValue(use_crumbs));

    obj->insert("useSecurity", QJsonValue(use_security));

    QJsonArray viewsJsonArray;
    toJsonArray((QList<void*>*)views, &viewsJsonArray, "views", "SWGHudsonmodelAllView");
    obj->insert("views", viewsJsonArray);

    return obj;
}

QString*
SWGHudsonmodelHudson::getClass() {
    return _class;
}
void
SWGHudsonmodelHudson::setClass(QString* _class) {
    this->_class = _class;
}

QList<SWGHudsonmodelHudsonassignedLabels*>*
SWGHudsonmodelHudson::getAssignedLabels() {
    return assigned_labels;
}
void
SWGHudsonmodelHudson::setAssignedLabels(QList<SWGHudsonmodelHudsonassignedLabels*>* assigned_labels) {
    this->assigned_labels = assigned_labels;
}

QString*
SWGHudsonmodelHudson::getMode() {
    return mode;
}
void
SWGHudsonmodelHudson::setMode(QString* mode) {
    this->mode = mode;
}

QString*
SWGHudsonmodelHudson::getNodeDescription() {
    return node_description;
}
void
SWGHudsonmodelHudson::setNodeDescription(QString* node_description) {
    this->node_description = node_description;
}

QString*
SWGHudsonmodelHudson::getNodeName() {
    return node_name;
}
void
SWGHudsonmodelHudson::setNodeName(QString* node_name) {
    this->node_name = node_name;
}

qint32
SWGHudsonmodelHudson::getNumExecutors() {
    return num_executors;
}
void
SWGHudsonmodelHudson::setNumExecutors(qint32 num_executors) {
    this->num_executors = num_executors;
}

QString*
SWGHudsonmodelHudson::getDescription() {
    return description;
}
void
SWGHudsonmodelHudson::setDescription(QString* description) {
    this->description = description;
}

QList<SWGHudsonmodelFreeStyleProject*>*
SWGHudsonmodelHudson::getJobs() {
    return jobs;
}
void
SWGHudsonmodelHudson::setJobs(QList<SWGHudsonmodelFreeStyleProject*>* jobs) {
    this->jobs = jobs;
}

SWGHudsonmodelAllView*
SWGHudsonmodelHudson::getPrimaryView() {
    return primary_view;
}
void
SWGHudsonmodelHudson::setPrimaryView(SWGHudsonmodelAllView* primary_view) {
    this->primary_view = primary_view;
}

bool
SWGHudsonmodelHudson::getQuietingDown() {
    return quieting_down;
}
void
SWGHudsonmodelHudson::setQuietingDown(bool quieting_down) {
    this->quieting_down = quieting_down;
}

qint32
SWGHudsonmodelHudson::getSlaveAgentPort() {
    return slave_agent_port;
}
void
SWGHudsonmodelHudson::setSlaveAgentPort(qint32 slave_agent_port) {
    this->slave_agent_port = slave_agent_port;
}

SWGJenkinsmodelUnlabeledLoadStatistics*
SWGHudsonmodelHudson::getUnlabeledLoad() {
    return unlabeled_load;
}
void
SWGHudsonmodelHudson::setUnlabeledLoad(SWGJenkinsmodelUnlabeledLoadStatistics* unlabeled_load) {
    this->unlabeled_load = unlabeled_load;
}

bool
SWGHudsonmodelHudson::getUseCrumbs() {
    return use_crumbs;
}
void
SWGHudsonmodelHudson::setUseCrumbs(bool use_crumbs) {
    this->use_crumbs = use_crumbs;
}

bool
SWGHudsonmodelHudson::getUseSecurity() {
    return use_security;
}
void
SWGHudsonmodelHudson::setUseSecurity(bool use_security) {
    this->use_security = use_security;
}

QList<SWGHudsonmodelAllView*>*
SWGHudsonmodelHudson::getViews() {
    return views;
}
void
SWGHudsonmodelHudson::setViews(QList<SWGHudsonmodelAllView*>* views) {
    this->views = views;
}


}

