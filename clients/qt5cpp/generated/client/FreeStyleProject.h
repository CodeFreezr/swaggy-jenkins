/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * FreeStyleProject.h
 * 
 * 
 */

#ifndef FreeStyleProject_H_
#define FreeStyleProject_H_

#include <QJsonObject>


#include "FreeStyleBuild.h"
#include "FreeStyleProjectactions.h"
#include "FreeStyleProjecthealthReport.h"
#include "NullSCM.h"
#include <QList>
#include <QString>

#include "SWGObject.h"


namespace Swagger {

class FreeStyleProject: public SWGObject {
public:
    FreeStyleProject();
    FreeStyleProject(QString* json);
    virtual ~FreeStyleProject();
    void init();
    void cleanup();

    QString asJson ();
    QJsonObject* asJsonObject();
    void fromJsonObject(QJsonObject &json);
    FreeStyleProject* fromJson(QString &jsonString);

    QString* getClass();
    void setClass(QString* _class);

    QString* getName();
    void setName(QString* name);

    QString* getUrl();
    void setUrl(QString* url);

    QString* getColor();
    void setColor(QString* color);

    QList<FreeStyleProjectactions*>* getActions();
    void setActions(QList<FreeStyleProjectactions*>* actions);

    QString* getDescription();
    void setDescription(QString* description);

    QString* getDisplayName();
    void setDisplayName(QString* display_name);

    QString* getDisplayNameOrNull();
    void setDisplayNameOrNull(QString* display_name_or_null);

    QString* getFullDisplayName();
    void setFullDisplayName(QString* full_display_name);

    QString* getFullName();
    void setFullName(QString* full_name);

    bool getBuildable();
    void setBuildable(bool buildable);

    QList<FreeStyleBuild*>* getBuilds();
    void setBuilds(QList<FreeStyleBuild*>* builds);

    FreeStyleBuild* getFirstBuild();
    void setFirstBuild(FreeStyleBuild* first_build);

    QList<FreeStyleProjecthealthReport*>* getHealthReport();
    void setHealthReport(QList<FreeStyleProjecthealthReport*>* health_report);

    bool getInQueue();
    void setInQueue(bool in_queue);

    bool getKeepDependencies();
    void setKeepDependencies(bool keep_dependencies);

    FreeStyleBuild* getLastBuild();
    void setLastBuild(FreeStyleBuild* last_build);

    FreeStyleBuild* getLastCompletedBuild();
    void setLastCompletedBuild(FreeStyleBuild* last_completed_build);

    QString* getLastFailedBuild();
    void setLastFailedBuild(QString* last_failed_build);

    FreeStyleBuild* getLastStableBuild();
    void setLastStableBuild(FreeStyleBuild* last_stable_build);

    FreeStyleBuild* getLastSuccessfulBuild();
    void setLastSuccessfulBuild(FreeStyleBuild* last_successful_build);

    QString* getLastUnstableBuild();
    void setLastUnstableBuild(QString* last_unstable_build);

    QString* getLastUnsuccessfulBuild();
    void setLastUnsuccessfulBuild(QString* last_unsuccessful_build);

    qint32 getNextBuildNumber();
    void setNextBuildNumber(qint32 next_build_number);

    QString* getQueueItem();
    void setQueueItem(QString* queue_item);

    bool getConcurrentBuild();
    void setConcurrentBuild(bool concurrent_build);

    NullSCM* getScm();
    void setScm(NullSCM* scm);


private:
    QString* _class;
    QString* name;
    QString* url;
    QString* color;
    QList<FreeStyleProjectactions*>* actions;
    QString* description;
    QString* display_name;
    QString* display_name_or_null;
    QString* full_display_name;
    QString* full_name;
    bool buildable;
    QList<FreeStyleBuild*>* builds;
    FreeStyleBuild* first_build;
    QList<FreeStyleProjecthealthReport*>* health_report;
    bool in_queue;
    bool keep_dependencies;
    FreeStyleBuild* last_build;
    FreeStyleBuild* last_completed_build;
    QString* last_failed_build;
    FreeStyleBuild* last_stable_build;
    FreeStyleBuild* last_successful_build;
    QString* last_unstable_build;
    QString* last_unsuccessful_build;
    qint32 next_build_number;
    QString* queue_item;
    bool concurrent_build;
    NullSCM* scm;
};

}

#endif /* FreeStyleProject_H_ */
