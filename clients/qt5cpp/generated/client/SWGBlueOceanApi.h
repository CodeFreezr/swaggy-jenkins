/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef _SWG_SWGBlueOceanApi_H_
#define _SWG_SWGBlueOceanApi_H_

#include "SWGHttpRequest.h"

#include <QString>
#include "SWGGetMultibranchPipeline.h"
#include "SWGGetOrganisations.h"
#include "SWGGetPipelines.h"
#include "SWGIojenkinsblueoceanrestimplpipelineBranchImpl.h"
#include "SWGIojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.h"
#include "SWGIojenkinsblueoceanserviceembeddedrestPipelineImpl.h"
#include "SWGSwaggyjenkinsOrganisation.h"
#include "SWGSwaggyjenkinsPipeline.h"
#include "SWGSwaggyjenkinsUser.h"

#include <QObject>

namespace Swagger {

class SWGBlueOceanApi: public QObject {
    Q_OBJECT

public:
    SWGBlueOceanApi();
    SWGBlueOceanApi(QString host, QString basePath);
    ~SWGBlueOceanApi();

    QString host;
    QString basePath;

    void getAuthenticatedUser(QString* organisation);
    void getClasses(QString* class);
    void getOrganisation(QString* organisation);
    void getOrganisations();
    void getPipelineBranchByOrg(QString* organisation, QString* pipeline, QString* branch);
    void getPipelineBranchesByOrg(QString* organisation, QString* pipeline);
    void getPipelineByOrg(QString* organisation, QString* pipeline);
    void getPipelineFolderByOrg(QString* organisation, QString* folder);
    void getPipelineFolderByOrg_1(QString* organisation, QString* pipeline, QString* folder);
    void getPipelinesByOrg(QString* organisation);
    void getUser(QString* organisation, QString* user);
    void getUsers(QString* organisation);
    void search(QString* q);
    void search_2(QString* q);
    
private:
    void getAuthenticatedUserCallback (HttpRequestWorker * worker);
    void getClassesCallback (HttpRequestWorker * worker);
    void getOrganisationCallback (HttpRequestWorker * worker);
    void getOrganisationsCallback (HttpRequestWorker * worker);
    void getPipelineBranchByOrgCallback (HttpRequestWorker * worker);
    void getPipelineBranchesByOrgCallback (HttpRequestWorker * worker);
    void getPipelineByOrgCallback (HttpRequestWorker * worker);
    void getPipelineFolderByOrgCallback (HttpRequestWorker * worker);
    void getPipelineFolderByOrg_1Callback (HttpRequestWorker * worker);
    void getPipelinesByOrgCallback (HttpRequestWorker * worker);
    void getUserCallback (HttpRequestWorker * worker);
    void getUsersCallback (HttpRequestWorker * worker);
    void searchCallback (HttpRequestWorker * worker);
    void search_2Callback (HttpRequestWorker * worker);
    
signals:
    void getAuthenticatedUserSignal(SWGSwaggyjenkinsUser* summary);
    void getClassesSignal(QString* summary);
    void getOrganisationSignal(SWGSwaggyjenkinsOrganisation* summary);
    void getOrganisationsSignal(SWGGetOrganisations* summary);
    void getPipelineBranchByOrgSignal(SWGIojenkinsblueoceanrestimplpipelineBranchImpl* summary);
    void getPipelineBranchesByOrgSignal(SWGGetMultibranchPipeline* summary);
    void getPipelineByOrgSignal(SWGSwaggyjenkinsPipeline* summary);
    void getPipelineFolderByOrgSignal(SWGIojenkinsblueoceanserviceembeddedrestPipelineFolderImpl* summary);
    void getPipelineFolderByOrg_1Signal(SWGIojenkinsblueoceanserviceembeddedrestPipelineImpl* summary);
    void getPipelinesByOrgSignal(SWGGetPipelines* summary);
    void getUserSignal(SWGSwaggyjenkinsUser* summary);
    void getUsersSignal(SWGSwaggyjenkinsUser* summary);
    void searchSignal(QString* summary);
    void search_2Signal(QString* summary);
    
    void getAuthenticatedUserSignalE(SWGSwaggyjenkinsUser* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getClassesSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOrganisationSignalE(SWGSwaggyjenkinsOrganisation* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getOrganisationsSignalE(SWGGetOrganisations* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineBranchByOrgSignalE(SWGIojenkinsblueoceanrestimplpipelineBranchImpl* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineBranchesByOrgSignalE(SWGGetMultibranchPipeline* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineByOrgSignalE(SWGSwaggyjenkinsPipeline* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineFolderByOrgSignalE(SWGIojenkinsblueoceanserviceembeddedrestPipelineFolderImpl* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelineFolderByOrg_1SignalE(SWGIojenkinsblueoceanserviceembeddedrestPipelineImpl* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getPipelinesByOrgSignalE(SWGGetPipelines* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUserSignalE(SWGSwaggyjenkinsUser* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void getUsersSignalE(SWGSwaggyjenkinsUser* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void searchSignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    void search_2SignalE(QString* summary, QNetworkReply::NetworkError error_type, QString& error_str);
    
};

}
#endif
