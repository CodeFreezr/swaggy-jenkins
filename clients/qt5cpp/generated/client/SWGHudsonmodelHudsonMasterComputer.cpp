/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGHudsonmodelHudsonMasterComputer.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGHudsonmodelHudsonMasterComputer::SWGHudsonmodelHudsonMasterComputer(QString* json) {
    init();
    this->fromJson(*json);
}

SWGHudsonmodelHudsonMasterComputer::SWGHudsonmodelHudsonMasterComputer() {
    init();
}

SWGHudsonmodelHudsonMasterComputer::~SWGHudsonmodelHudsonMasterComputer() {
    this->cleanup();
}

void
SWGHudsonmodelHudsonMasterComputer::init() {
    _class = new QString("");
    display_name = new QString("");
    executors = new QList<SWGHudsonmodelHudsonMasterComputerexecutors*>();
    icon = new QString("");
    icon_class_name = new QString("");
    idle = false;
    jnlp_agent = false;
    launch_supported = false;
    load_statistics = new SWGHudsonmodelLabel1();
    manual_launch_allowed = false;
    monitor_data = new SWGHudsonmodelHudsonMasterComputer_monitorData();
    num_executors = 0;
    offline = false;
    offline_cause = new QString("");
    offline_cause_reason = new QString("");
    temporarily_offline = false;
}

void
SWGHudsonmodelHudsonMasterComputer::cleanup() {
    
    if(_class != nullptr) {
        delete _class;
    }

    if(display_name != nullptr) {
        delete display_name;
    }

    if(executors != nullptr) {
        QList<SWGHudsonmodelHudsonMasterComputerexecutors*>* arr = executors;
        foreach(SWGHudsonmodelHudsonMasterComputerexecutors* o, *arr) {
            delete o;
        }
        delete executors;
    }

    if(icon != nullptr) {
        delete icon;
    }

    if(icon_class_name != nullptr) {
        delete icon_class_name;
    }




    if(load_statistics != nullptr) {
        delete load_statistics;
    }


    if(monitor_data != nullptr) {
        delete monitor_data;
    }



    if(offline_cause != nullptr) {
        delete offline_cause;
    }

    if(offline_cause_reason != nullptr) {
        delete offline_cause_reason;
    }

}

SWGHudsonmodelHudsonMasterComputer*
SWGHudsonmodelHudsonMasterComputer::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGHudsonmodelHudsonMasterComputer::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&_class, pJson["_class"], "QString", "QString");
    ::Swagger::setValue(&display_name, pJson["displayName"], "QString", "QString");
    
    ::Swagger::setValue(&executors, pJson["executors"], "QList", "SWGHudsonmodelHudsonMasterComputerexecutors");
    
    ::Swagger::setValue(&icon, pJson["icon"], "QString", "QString");
    ::Swagger::setValue(&icon_class_name, pJson["iconClassName"], "QString", "QString");
    ::Swagger::setValue(&idle, pJson["idle"], "bool", "");
    ::Swagger::setValue(&jnlp_agent, pJson["jnlpAgent"], "bool", "");
    ::Swagger::setValue(&launch_supported, pJson["launchSupported"], "bool", "");
    ::Swagger::setValue(&load_statistics, pJson["loadStatistics"], "SWGHudsonmodelLabel1", "SWGHudsonmodelLabel1");
    ::Swagger::setValue(&manual_launch_allowed, pJson["manualLaunchAllowed"], "bool", "");
    ::Swagger::setValue(&monitor_data, pJson["monitorData"], "SWGHudsonmodelHudsonMasterComputer_monitorData", "SWGHudsonmodelHudsonMasterComputer_monitorData");
    ::Swagger::setValue(&num_executors, pJson["numExecutors"], "qint32", "");
    ::Swagger::setValue(&offline, pJson["offline"], "bool", "");
    ::Swagger::setValue(&offline_cause, pJson["offlineCause"], "QString", "QString");
    ::Swagger::setValue(&offline_cause_reason, pJson["offlineCauseReason"], "QString", "QString");
    ::Swagger::setValue(&temporarily_offline, pJson["temporarilyOffline"], "bool", "");
}

QString
SWGHudsonmodelHudsonMasterComputer::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGHudsonmodelHudsonMasterComputer::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("_class"), _class, obj, QString("QString"));

    toJsonValue(QString("displayName"), display_name, obj, QString("QString"));

    QJsonArray executorsJsonArray;
    toJsonArray((QList<void*>*)executors, &executorsJsonArray, "executors", "SWGHudsonmodelHudsonMasterComputerexecutors");
    obj->insert("executors", executorsJsonArray);

    toJsonValue(QString("icon"), icon, obj, QString("QString"));

    toJsonValue(QString("iconClassName"), icon_class_name, obj, QString("QString"));

    obj->insert("idle", QJsonValue(idle));

    obj->insert("jnlpAgent", QJsonValue(jnlp_agent));

    obj->insert("launchSupported", QJsonValue(launch_supported));

    toJsonValue(QString("loadStatistics"), load_statistics, obj, QString("SWGHudsonmodelLabel1"));

    obj->insert("manualLaunchAllowed", QJsonValue(manual_launch_allowed));

    toJsonValue(QString("monitorData"), monitor_data, obj, QString("SWGHudsonmodelHudsonMasterComputer_monitorData"));

    obj->insert("numExecutors", QJsonValue(num_executors));

    obj->insert("offline", QJsonValue(offline));

    toJsonValue(QString("offlineCause"), offline_cause, obj, QString("QString"));

    toJsonValue(QString("offlineCauseReason"), offline_cause_reason, obj, QString("QString"));

    obj->insert("temporarilyOffline", QJsonValue(temporarily_offline));

    return obj;
}

QString*
SWGHudsonmodelHudsonMasterComputer::getClass() {
    return _class;
}
void
SWGHudsonmodelHudsonMasterComputer::setClass(QString* _class) {
    this->_class = _class;
}

QString*
SWGHudsonmodelHudsonMasterComputer::getDisplayName() {
    return display_name;
}
void
SWGHudsonmodelHudsonMasterComputer::setDisplayName(QString* display_name) {
    this->display_name = display_name;
}

QList<SWGHudsonmodelHudsonMasterComputerexecutors*>*
SWGHudsonmodelHudsonMasterComputer::getExecutors() {
    return executors;
}
void
SWGHudsonmodelHudsonMasterComputer::setExecutors(QList<SWGHudsonmodelHudsonMasterComputerexecutors*>* executors) {
    this->executors = executors;
}

QString*
SWGHudsonmodelHudsonMasterComputer::getIcon() {
    return icon;
}
void
SWGHudsonmodelHudsonMasterComputer::setIcon(QString* icon) {
    this->icon = icon;
}

QString*
SWGHudsonmodelHudsonMasterComputer::getIconClassName() {
    return icon_class_name;
}
void
SWGHudsonmodelHudsonMasterComputer::setIconClassName(QString* icon_class_name) {
    this->icon_class_name = icon_class_name;
}

bool
SWGHudsonmodelHudsonMasterComputer::getIdle() {
    return idle;
}
void
SWGHudsonmodelHudsonMasterComputer::setIdle(bool idle) {
    this->idle = idle;
}

bool
SWGHudsonmodelHudsonMasterComputer::getJnlpAgent() {
    return jnlp_agent;
}
void
SWGHudsonmodelHudsonMasterComputer::setJnlpAgent(bool jnlp_agent) {
    this->jnlp_agent = jnlp_agent;
}

bool
SWGHudsonmodelHudsonMasterComputer::getLaunchSupported() {
    return launch_supported;
}
void
SWGHudsonmodelHudsonMasterComputer::setLaunchSupported(bool launch_supported) {
    this->launch_supported = launch_supported;
}

SWGHudsonmodelLabel1*
SWGHudsonmodelHudsonMasterComputer::getLoadStatistics() {
    return load_statistics;
}
void
SWGHudsonmodelHudsonMasterComputer::setLoadStatistics(SWGHudsonmodelLabel1* load_statistics) {
    this->load_statistics = load_statistics;
}

bool
SWGHudsonmodelHudsonMasterComputer::getManualLaunchAllowed() {
    return manual_launch_allowed;
}
void
SWGHudsonmodelHudsonMasterComputer::setManualLaunchAllowed(bool manual_launch_allowed) {
    this->manual_launch_allowed = manual_launch_allowed;
}

SWGHudsonmodelHudsonMasterComputer_monitorData*
SWGHudsonmodelHudsonMasterComputer::getMonitorData() {
    return monitor_data;
}
void
SWGHudsonmodelHudsonMasterComputer::setMonitorData(SWGHudsonmodelHudsonMasterComputer_monitorData* monitor_data) {
    this->monitor_data = monitor_data;
}

qint32
SWGHudsonmodelHudsonMasterComputer::getNumExecutors() {
    return num_executors;
}
void
SWGHudsonmodelHudsonMasterComputer::setNumExecutors(qint32 num_executors) {
    this->num_executors = num_executors;
}

bool
SWGHudsonmodelHudsonMasterComputer::getOffline() {
    return offline;
}
void
SWGHudsonmodelHudsonMasterComputer::setOffline(bool offline) {
    this->offline = offline;
}

QString*
SWGHudsonmodelHudsonMasterComputer::getOfflineCause() {
    return offline_cause;
}
void
SWGHudsonmodelHudsonMasterComputer::setOfflineCause(QString* offline_cause) {
    this->offline_cause = offline_cause;
}

QString*
SWGHudsonmodelHudsonMasterComputer::getOfflineCauseReason() {
    return offline_cause_reason;
}
void
SWGHudsonmodelHudsonMasterComputer::setOfflineCauseReason(QString* offline_cause_reason) {
    this->offline_cause_reason = offline_cause_reason;
}

bool
SWGHudsonmodelHudsonMasterComputer::getTemporarilyOffline() {
    return temporarily_offline;
}
void
SWGHudsonmodelHudsonMasterComputer::setTemporarilyOffline(bool temporarily_offline) {
    this->temporarily_offline = temporarily_offline;
}


}

