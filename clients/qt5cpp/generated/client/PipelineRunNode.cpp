/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "PipelineRunNode.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

PipelineRunNode::PipelineRunNode(QString* json) {
    init();
    this->fromJson(*json);
}

PipelineRunNode::PipelineRunNode() {
    init();
}

PipelineRunNode::~PipelineRunNode() {
    this->cleanup();
}

void
PipelineRunNode::init() {
    _class = new QString("");
    display_name = new QString("");
    duration_in_millis = 0;
    edges = new QList<PipelineRunNodeedges*>();
    id = new QString("");
    result = new QString("");
    start_time = new QString("");
    state = new QString("");
}

void
PipelineRunNode::cleanup() {
    
    if(_class != nullptr) {
        delete _class;
    }

    if(display_name != nullptr) {
        delete display_name;
    }


    if(edges != nullptr) {
        QList<PipelineRunNodeedges*>* arr = edges;
        foreach(PipelineRunNodeedges* o, *arr) {
            delete o;
        }
        delete edges;
    }

    if(id != nullptr) {
        delete id;
    }

    if(result != nullptr) {
        delete result;
    }

    if(start_time != nullptr) {
        delete start_time;
    }

    if(state != nullptr) {
        delete state;
    }
}

PipelineRunNode*
PipelineRunNode::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
PipelineRunNode::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&_class, pJson["_class"], "QString", "QString");
    ::Swagger::setValue(&display_name, pJson["displayName"], "QString", "QString");
    ::Swagger::setValue(&duration_in_millis, pJson["durationInMillis"], "qint32", "");
    
    ::Swagger::setValue(&edges, pJson["edges"], "QList", "PipelineRunNodeedges");
    
    ::Swagger::setValue(&id, pJson["id"], "QString", "QString");
    ::Swagger::setValue(&result, pJson["result"], "QString", "QString");
    ::Swagger::setValue(&start_time, pJson["startTime"], "QString", "QString");
    ::Swagger::setValue(&state, pJson["state"], "QString", "QString");
}

QString
PipelineRunNode::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
PipelineRunNode::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("_class"), _class, obj, QString("QString"));

    toJsonValue(QString("displayName"), display_name, obj, QString("QString"));

    obj->insert("durationInMillis", QJsonValue(duration_in_millis));

    QJsonArray edgesJsonArray;
    toJsonArray((QList<void*>*)edges, &edgesJsonArray, "edges", "PipelineRunNodeedges");
    obj->insert("edges", edgesJsonArray);

    toJsonValue(QString("id"), id, obj, QString("QString"));

    toJsonValue(QString("result"), result, obj, QString("QString"));

    toJsonValue(QString("startTime"), start_time, obj, QString("QString"));

    toJsonValue(QString("state"), state, obj, QString("QString"));

    return obj;
}

QString*
PipelineRunNode::getClass() {
    return _class;
}
void
PipelineRunNode::setClass(QString* _class) {
    this->_class = _class;
}

QString*
PipelineRunNode::getDisplayName() {
    return display_name;
}
void
PipelineRunNode::setDisplayName(QString* display_name) {
    this->display_name = display_name;
}

qint32
PipelineRunNode::getDurationInMillis() {
    return duration_in_millis;
}
void
PipelineRunNode::setDurationInMillis(qint32 duration_in_millis) {
    this->duration_in_millis = duration_in_millis;
}

QList<PipelineRunNodeedges*>*
PipelineRunNode::getEdges() {
    return edges;
}
void
PipelineRunNode::setEdges(QList<PipelineRunNodeedges*>* edges) {
    this->edges = edges;
}

QString*
PipelineRunNode::getId() {
    return id;
}
void
PipelineRunNode::setId(QString* id) {
    this->id = id;
}

QString*
PipelineRunNode::getResult() {
    return result;
}
void
PipelineRunNode::setResult(QString* result) {
    this->result = result;
}

QString*
PipelineRunNode::getStartTime() {
    return start_time;
}
void
PipelineRunNode::setStartTime(QString* start_time) {
    this->start_time = start_time;
}

QString*
PipelineRunNode::getState() {
    return state;
}
void
PipelineRunNode::setState(QString* state) {
    this->state = state;
}


}

