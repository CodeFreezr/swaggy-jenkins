/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "InputStepImpl.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

InputStepImpl::InputStepImpl(QString* json) {
    init();
    this->fromJson(*json);
}

InputStepImpl::InputStepImpl() {
    init();
}

InputStepImpl::~InputStepImpl() {
    this->cleanup();
}

void
InputStepImpl::init() {
    _class = new QString("");
    _links = new InputStepImpllinks();
    id = new QString("");
    message = new QString("");
    ok = new QString("");
    parameters = new QList<StringParameterDefinition*>();
    submitter = new QString("");
}

void
InputStepImpl::cleanup() {
    
    if(_class != nullptr) {
        delete _class;
    }

    if(_links != nullptr) {
        delete _links;
    }

    if(id != nullptr) {
        delete id;
    }

    if(message != nullptr) {
        delete message;
    }

    if(ok != nullptr) {
        delete ok;
    }

    if(parameters != nullptr) {
        QList<StringParameterDefinition*>* arr = parameters;
        foreach(StringParameterDefinition* o, *arr) {
            delete o;
        }
        delete parameters;
    }

    if(submitter != nullptr) {
        delete submitter;
    }
}

InputStepImpl*
InputStepImpl::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
InputStepImpl::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&_class, pJson["_class"], "QString", "QString");
    ::Swagger::setValue(&_links, pJson["_links"], "InputStepImpllinks", "InputStepImpllinks");
    ::Swagger::setValue(&id, pJson["id"], "QString", "QString");
    ::Swagger::setValue(&message, pJson["message"], "QString", "QString");
    ::Swagger::setValue(&ok, pJson["ok"], "QString", "QString");
    
    ::Swagger::setValue(&parameters, pJson["parameters"], "QList", "StringParameterDefinition");
    
    ::Swagger::setValue(&submitter, pJson["submitter"], "QString", "QString");
}

QString
InputStepImpl::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
InputStepImpl::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("_class"), _class, obj, QString("QString"));

    toJsonValue(QString("_links"), _links, obj, QString("InputStepImpllinks"));

    toJsonValue(QString("id"), id, obj, QString("QString"));

    toJsonValue(QString("message"), message, obj, QString("QString"));

    toJsonValue(QString("ok"), ok, obj, QString("QString"));

    QJsonArray parametersJsonArray;
    toJsonArray((QList<void*>*)parameters, &parametersJsonArray, "parameters", "StringParameterDefinition");
    obj->insert("parameters", parametersJsonArray);

    toJsonValue(QString("submitter"), submitter, obj, QString("QString"));

    return obj;
}

QString*
InputStepImpl::getClass() {
    return _class;
}
void
InputStepImpl::setClass(QString* _class) {
    this->_class = _class;
}

InputStepImpllinks*
InputStepImpl::getLinks() {
    return _links;
}
void
InputStepImpl::setLinks(InputStepImpllinks* _links) {
    this->_links = _links;
}

QString*
InputStepImpl::getId() {
    return id;
}
void
InputStepImpl::setId(QString* id) {
    this->id = id;
}

QString*
InputStepImpl::getMessage() {
    return message;
}
void
InputStepImpl::setMessage(QString* message) {
    this->message = message;
}

QString*
InputStepImpl::getOk() {
    return ok;
}
void
InputStepImpl::setOk(QString* ok) {
    this->ok = ok;
}

QList<StringParameterDefinition*>*
InputStepImpl::getParameters() {
    return parameters;
}
void
InputStepImpl::setParameters(QList<StringParameterDefinition*>* parameters) {
    this->parameters = parameters;
}

QString*
InputStepImpl::getSubmitter() {
    return submitter;
}
void
InputStepImpl::setSubmitter(QString* submitter) {
    this->submitter = submitter;
}


}

