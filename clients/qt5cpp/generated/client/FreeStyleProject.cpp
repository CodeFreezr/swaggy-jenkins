/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "FreeStyleProject.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

FreeStyleProject::FreeStyleProject(QString* json) {
    init();
    this->fromJson(*json);
}

FreeStyleProject::FreeStyleProject() {
    init();
}

FreeStyleProject::~FreeStyleProject() {
    this->cleanup();
}

void
FreeStyleProject::init() {
    _class = new QString("");
    name = new QString("");
    url = new QString("");
    color = new QString("");
    actions = new QList<FreeStyleProjectactions*>();
    description = new QString("");
    display_name = new QString("");
    display_name_or_null = new QString("");
    full_display_name = new QString("");
    full_name = new QString("");
    buildable = false;
    builds = new QList<FreeStyleBuild*>();
    first_build = new FreeStyleBuild();
    health_report = new QList<FreeStyleProjecthealthReport*>();
    in_queue = false;
    keep_dependencies = false;
    last_build = new FreeStyleBuild();
    last_completed_build = new FreeStyleBuild();
    last_failed_build = new QString("");
    last_stable_build = new FreeStyleBuild();
    last_successful_build = new FreeStyleBuild();
    last_unstable_build = new QString("");
    last_unsuccessful_build = new QString("");
    next_build_number = 0;
    queue_item = new QString("");
    concurrent_build = false;
    scm = new NullSCM();
}

void
FreeStyleProject::cleanup() {
    
    if(_class != nullptr) {
        delete _class;
    }

    if(name != nullptr) {
        delete name;
    }

    if(url != nullptr) {
        delete url;
    }

    if(color != nullptr) {
        delete color;
    }

    if(actions != nullptr) {
        QList<FreeStyleProjectactions*>* arr = actions;
        foreach(FreeStyleProjectactions* o, *arr) {
            delete o;
        }
        delete actions;
    }

    if(description != nullptr) {
        delete description;
    }

    if(display_name != nullptr) {
        delete display_name;
    }

    if(display_name_or_null != nullptr) {
        delete display_name_or_null;
    }

    if(full_display_name != nullptr) {
        delete full_display_name;
    }

    if(full_name != nullptr) {
        delete full_name;
    }


    if(builds != nullptr) {
        QList<FreeStyleBuild*>* arr = builds;
        foreach(FreeStyleBuild* o, *arr) {
            delete o;
        }
        delete builds;
    }

    if(first_build != nullptr) {
        delete first_build;
    }

    if(health_report != nullptr) {
        QList<FreeStyleProjecthealthReport*>* arr = health_report;
        foreach(FreeStyleProjecthealthReport* o, *arr) {
            delete o;
        }
        delete health_report;
    }



    if(last_build != nullptr) {
        delete last_build;
    }

    if(last_completed_build != nullptr) {
        delete last_completed_build;
    }

    if(last_failed_build != nullptr) {
        delete last_failed_build;
    }

    if(last_stable_build != nullptr) {
        delete last_stable_build;
    }

    if(last_successful_build != nullptr) {
        delete last_successful_build;
    }

    if(last_unstable_build != nullptr) {
        delete last_unstable_build;
    }

    if(last_unsuccessful_build != nullptr) {
        delete last_unsuccessful_build;
    }


    if(queue_item != nullptr) {
        delete queue_item;
    }


    if(scm != nullptr) {
        delete scm;
    }
}

FreeStyleProject*
FreeStyleProject::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
FreeStyleProject::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&_class, pJson["_class"], "QString", "QString");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&url, pJson["url"], "QString", "QString");
    ::Swagger::setValue(&color, pJson["color"], "QString", "QString");
    
    ::Swagger::setValue(&actions, pJson["actions"], "QList", "FreeStyleProjectactions");
    
    ::Swagger::setValue(&description, pJson["description"], "QString", "QString");
    ::Swagger::setValue(&display_name, pJson["displayName"], "QString", "QString");
    ::Swagger::setValue(&display_name_or_null, pJson["displayNameOrNull"], "QString", "QString");
    ::Swagger::setValue(&full_display_name, pJson["fullDisplayName"], "QString", "QString");
    ::Swagger::setValue(&full_name, pJson["fullName"], "QString", "QString");
    ::Swagger::setValue(&buildable, pJson["buildable"], "bool", "");
    
    ::Swagger::setValue(&builds, pJson["builds"], "QList", "FreeStyleBuild");
    
    ::Swagger::setValue(&first_build, pJson["firstBuild"], "FreeStyleBuild", "FreeStyleBuild");
    
    ::Swagger::setValue(&health_report, pJson["healthReport"], "QList", "FreeStyleProjecthealthReport");
    
    ::Swagger::setValue(&in_queue, pJson["inQueue"], "bool", "");
    ::Swagger::setValue(&keep_dependencies, pJson["keepDependencies"], "bool", "");
    ::Swagger::setValue(&last_build, pJson["lastBuild"], "FreeStyleBuild", "FreeStyleBuild");
    ::Swagger::setValue(&last_completed_build, pJson["lastCompletedBuild"], "FreeStyleBuild", "FreeStyleBuild");
    ::Swagger::setValue(&last_failed_build, pJson["lastFailedBuild"], "QString", "QString");
    ::Swagger::setValue(&last_stable_build, pJson["lastStableBuild"], "FreeStyleBuild", "FreeStyleBuild");
    ::Swagger::setValue(&last_successful_build, pJson["lastSuccessfulBuild"], "FreeStyleBuild", "FreeStyleBuild");
    ::Swagger::setValue(&last_unstable_build, pJson["lastUnstableBuild"], "QString", "QString");
    ::Swagger::setValue(&last_unsuccessful_build, pJson["lastUnsuccessfulBuild"], "QString", "QString");
    ::Swagger::setValue(&next_build_number, pJson["nextBuildNumber"], "qint32", "");
    ::Swagger::setValue(&queue_item, pJson["queueItem"], "QString", "QString");
    ::Swagger::setValue(&concurrent_build, pJson["concurrentBuild"], "bool", "");
    ::Swagger::setValue(&scm, pJson["scm"], "NullSCM", "NullSCM");
}

QString
FreeStyleProject::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
FreeStyleProject::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("_class"), _class, obj, QString("QString"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    toJsonValue(QString("url"), url, obj, QString("QString"));

    toJsonValue(QString("color"), color, obj, QString("QString"));

    QJsonArray actionsJsonArray;
    toJsonArray((QList<void*>*)actions, &actionsJsonArray, "actions", "FreeStyleProjectactions");
    obj->insert("actions", actionsJsonArray);

    toJsonValue(QString("description"), description, obj, QString("QString"));

    toJsonValue(QString("displayName"), display_name, obj, QString("QString"));

    toJsonValue(QString("displayNameOrNull"), display_name_or_null, obj, QString("QString"));

    toJsonValue(QString("fullDisplayName"), full_display_name, obj, QString("QString"));

    toJsonValue(QString("fullName"), full_name, obj, QString("QString"));

    obj->insert("buildable", QJsonValue(buildable));

    QJsonArray buildsJsonArray;
    toJsonArray((QList<void*>*)builds, &buildsJsonArray, "builds", "FreeStyleBuild");
    obj->insert("builds", buildsJsonArray);

    toJsonValue(QString("firstBuild"), first_build, obj, QString("FreeStyleBuild"));

    QJsonArray health_reportJsonArray;
    toJsonArray((QList<void*>*)health_report, &health_reportJsonArray, "health_report", "FreeStyleProjecthealthReport");
    obj->insert("healthReport", health_reportJsonArray);

    obj->insert("inQueue", QJsonValue(in_queue));

    obj->insert("keepDependencies", QJsonValue(keep_dependencies));

    toJsonValue(QString("lastBuild"), last_build, obj, QString("FreeStyleBuild"));

    toJsonValue(QString("lastCompletedBuild"), last_completed_build, obj, QString("FreeStyleBuild"));

    toJsonValue(QString("lastFailedBuild"), last_failed_build, obj, QString("QString"));

    toJsonValue(QString("lastStableBuild"), last_stable_build, obj, QString("FreeStyleBuild"));

    toJsonValue(QString("lastSuccessfulBuild"), last_successful_build, obj, QString("FreeStyleBuild"));

    toJsonValue(QString("lastUnstableBuild"), last_unstable_build, obj, QString("QString"));

    toJsonValue(QString("lastUnsuccessfulBuild"), last_unsuccessful_build, obj, QString("QString"));

    obj->insert("nextBuildNumber", QJsonValue(next_build_number));

    toJsonValue(QString("queueItem"), queue_item, obj, QString("QString"));

    obj->insert("concurrentBuild", QJsonValue(concurrent_build));

    toJsonValue(QString("scm"), scm, obj, QString("NullSCM"));

    return obj;
}

QString*
FreeStyleProject::getClass() {
    return _class;
}
void
FreeStyleProject::setClass(QString* _class) {
    this->_class = _class;
}

QString*
FreeStyleProject::getName() {
    return name;
}
void
FreeStyleProject::setName(QString* name) {
    this->name = name;
}

QString*
FreeStyleProject::getUrl() {
    return url;
}
void
FreeStyleProject::setUrl(QString* url) {
    this->url = url;
}

QString*
FreeStyleProject::getColor() {
    return color;
}
void
FreeStyleProject::setColor(QString* color) {
    this->color = color;
}

QList<FreeStyleProjectactions*>*
FreeStyleProject::getActions() {
    return actions;
}
void
FreeStyleProject::setActions(QList<FreeStyleProjectactions*>* actions) {
    this->actions = actions;
}

QString*
FreeStyleProject::getDescription() {
    return description;
}
void
FreeStyleProject::setDescription(QString* description) {
    this->description = description;
}

QString*
FreeStyleProject::getDisplayName() {
    return display_name;
}
void
FreeStyleProject::setDisplayName(QString* display_name) {
    this->display_name = display_name;
}

QString*
FreeStyleProject::getDisplayNameOrNull() {
    return display_name_or_null;
}
void
FreeStyleProject::setDisplayNameOrNull(QString* display_name_or_null) {
    this->display_name_or_null = display_name_or_null;
}

QString*
FreeStyleProject::getFullDisplayName() {
    return full_display_name;
}
void
FreeStyleProject::setFullDisplayName(QString* full_display_name) {
    this->full_display_name = full_display_name;
}

QString*
FreeStyleProject::getFullName() {
    return full_name;
}
void
FreeStyleProject::setFullName(QString* full_name) {
    this->full_name = full_name;
}

bool
FreeStyleProject::getBuildable() {
    return buildable;
}
void
FreeStyleProject::setBuildable(bool buildable) {
    this->buildable = buildable;
}

QList<FreeStyleBuild*>*
FreeStyleProject::getBuilds() {
    return builds;
}
void
FreeStyleProject::setBuilds(QList<FreeStyleBuild*>* builds) {
    this->builds = builds;
}

FreeStyleBuild*
FreeStyleProject::getFirstBuild() {
    return first_build;
}
void
FreeStyleProject::setFirstBuild(FreeStyleBuild* first_build) {
    this->first_build = first_build;
}

QList<FreeStyleProjecthealthReport*>*
FreeStyleProject::getHealthReport() {
    return health_report;
}
void
FreeStyleProject::setHealthReport(QList<FreeStyleProjecthealthReport*>* health_report) {
    this->health_report = health_report;
}

bool
FreeStyleProject::getInQueue() {
    return in_queue;
}
void
FreeStyleProject::setInQueue(bool in_queue) {
    this->in_queue = in_queue;
}

bool
FreeStyleProject::getKeepDependencies() {
    return keep_dependencies;
}
void
FreeStyleProject::setKeepDependencies(bool keep_dependencies) {
    this->keep_dependencies = keep_dependencies;
}

FreeStyleBuild*
FreeStyleProject::getLastBuild() {
    return last_build;
}
void
FreeStyleProject::setLastBuild(FreeStyleBuild* last_build) {
    this->last_build = last_build;
}

FreeStyleBuild*
FreeStyleProject::getLastCompletedBuild() {
    return last_completed_build;
}
void
FreeStyleProject::setLastCompletedBuild(FreeStyleBuild* last_completed_build) {
    this->last_completed_build = last_completed_build;
}

QString*
FreeStyleProject::getLastFailedBuild() {
    return last_failed_build;
}
void
FreeStyleProject::setLastFailedBuild(QString* last_failed_build) {
    this->last_failed_build = last_failed_build;
}

FreeStyleBuild*
FreeStyleProject::getLastStableBuild() {
    return last_stable_build;
}
void
FreeStyleProject::setLastStableBuild(FreeStyleBuild* last_stable_build) {
    this->last_stable_build = last_stable_build;
}

FreeStyleBuild*
FreeStyleProject::getLastSuccessfulBuild() {
    return last_successful_build;
}
void
FreeStyleProject::setLastSuccessfulBuild(FreeStyleBuild* last_successful_build) {
    this->last_successful_build = last_successful_build;
}

QString*
FreeStyleProject::getLastUnstableBuild() {
    return last_unstable_build;
}
void
FreeStyleProject::setLastUnstableBuild(QString* last_unstable_build) {
    this->last_unstable_build = last_unstable_build;
}

QString*
FreeStyleProject::getLastUnsuccessfulBuild() {
    return last_unsuccessful_build;
}
void
FreeStyleProject::setLastUnsuccessfulBuild(QString* last_unsuccessful_build) {
    this->last_unsuccessful_build = last_unsuccessful_build;
}

qint32
FreeStyleProject::getNextBuildNumber() {
    return next_build_number;
}
void
FreeStyleProject::setNextBuildNumber(qint32 next_build_number) {
    this->next_build_number = next_build_number;
}

QString*
FreeStyleProject::getQueueItem() {
    return queue_item;
}
void
FreeStyleProject::setQueueItem(QString* queue_item) {
    this->queue_item = queue_item;
}

bool
FreeStyleProject::getConcurrentBuild() {
    return concurrent_build;
}
void
FreeStyleProject::setConcurrentBuild(bool concurrent_build) {
    this->concurrent_build = concurrent_build;
}

NullSCM*
FreeStyleProject::getScm() {
    return scm;
}
void
FreeStyleProject::setScm(NullSCM* scm) {
    this->scm = scm;
}


}

