/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "SWGBlueOceanApi.h"
#include "SWGHelpers.h"
#include "SWGModelFactory.h"

#include <QJsonArray>
#include <QJsonDocument>

namespace Swagger {

SWGBlueOceanApi::SWGBlueOceanApi() {}

SWGBlueOceanApi::~SWGBlueOceanApi() {}

SWGBlueOceanApi::SWGBlueOceanApi(QString host, QString basePath) {
    this->host = host;
    this->basePath = basePath;
}

void
SWGBlueOceanApi::deletePipelineQueueItem(QString* organization, QString* pipeline, QString* queue) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue/{queue}");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));
    QString queuePathParam("{"); queuePathParam.append("queue").append("}");
    fullPath.replace(queuePathParam, stringValue(queue));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "DELETE");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::deletePipelineQueueItemCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::deletePipelineQueueItemCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }

    worker->deleteLater();

    emit deletePipelineQueueItemSignal();
    emit deletePipelineQueueItemSignalE(error_type, error_str);
}

void
SWGBlueOceanApi::getAuthenticatedUser(QString* organization) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/user/");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getAuthenticatedUserCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getAuthenticatedUserCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    User* output = static_cast<User*>(create(json, QString("User")));
    worker->deleteLater();

    emit getAuthenticatedUserSignal(output);
    emit getAuthenticatedUserSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getClasses(QString* class) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/classes/{class}");

    QString classPathParam("{"); classPathParam.append("class").append("}");
    fullPath.replace(classPathParam, stringValue(class));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getClassesCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getClassesCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    worker->deleteLater();

    emit getClassesSignal(output);
    emit getClassesSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getOrganisation(QString* organization) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getOrganisationCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getOrganisationCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    Organisation* output = static_cast<Organisation*>(create(json, QString("Organisation")));
    worker->deleteLater();

    emit getOrganisationSignal(output);
    emit getOrganisationSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getOrganisations() {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/");



    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getOrganisationsCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getOrganisationsCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    Organisations* output = static_cast<Organisations*>(create(json, QString("Organisations")));
    worker->deleteLater();

    emit getOrganisationsSignal(output);
    emit getOrganisationsSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipeline(QString* organization, QString* pipeline) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    Pipeline* output = static_cast<Pipeline*>(create(json, QString("Pipeline")));
    worker->deleteLater();

    emit getPipelineSignal(output);
    emit getPipelineSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineActivities(QString* organization, QString* pipeline) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/activities");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineActivitiesCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineActivitiesCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    PipelineActivities* output = static_cast<PipelineActivities*>(create(json, QString("PipelineActivities")));
    worker->deleteLater();

    emit getPipelineActivitiesSignal(output);
    emit getPipelineActivitiesSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineBranch(QString* organization, QString* pipeline, QString* branch) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));
    QString branchPathParam("{"); branchPathParam.append("branch").append("}");
    fullPath.replace(branchPathParam, stringValue(branch));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineBranchCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineBranchCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    BranchImpl* output = static_cast<BranchImpl*>(create(json, QString("BranchImpl")));
    worker->deleteLater();

    emit getPipelineBranchSignal(output);
    emit getPipelineBranchSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineBranchRun(QString* organization, QString* pipeline, QString* branch, QString* run) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches/{branch}/runs/{run}");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));
    QString branchPathParam("{"); branchPathParam.append("branch").append("}");
    fullPath.replace(branchPathParam, stringValue(branch));
    QString runPathParam("{"); runPathParam.append("run").append("}");
    fullPath.replace(runPathParam, stringValue(run));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineBranchRunCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineBranchRunCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    PipelineRun* output = static_cast<PipelineRun*>(create(json, QString("PipelineRun")));
    worker->deleteLater();

    emit getPipelineBranchRunSignal(output);
    emit getPipelineBranchRunSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineBranches(QString* organization, QString* pipeline) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/branches");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineBranchesCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineBranchesCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    MultibranchPipeline* output = static_cast<MultibranchPipeline*>(create(json, QString("MultibranchPipeline")));
    worker->deleteLater();

    emit getPipelineBranchesSignal(output);
    emit getPipelineBranchesSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineFolder(QString* organization, QString* folder) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{folder}/");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString folderPathParam("{"); folderPathParam.append("folder").append("}");
    fullPath.replace(folderPathParam, stringValue(folder));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineFolderCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineFolderCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    PipelineFolderImpl* output = static_cast<PipelineFolderImpl*>(create(json, QString("PipelineFolderImpl")));
    worker->deleteLater();

    emit getPipelineFolderSignal(output);
    emit getPipelineFolderSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineFolderPipeline(QString* organization, QString* pipeline, QString* folder) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{folder}/pipelines/{pipeline}");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));
    QString folderPathParam("{"); folderPathParam.append("folder").append("}");
    fullPath.replace(folderPathParam, stringValue(folder));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineFolderPipelineCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineFolderPipelineCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    PipelineImpl* output = static_cast<PipelineImpl*>(create(json, QString("PipelineImpl")));
    worker->deleteLater();

    emit getPipelineFolderPipelineSignal(output);
    emit getPipelineFolderPipelineSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineQueue(QString* organization, QString* pipeline) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/queue");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineQueueCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineQueueCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    PipelineQueue* output = static_cast<PipelineQueue*>(create(json, QString("PipelineQueue")));
    worker->deleteLater();

    emit getPipelineQueueSignal(output);
    emit getPipelineQueueSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineRun(QString* organization, QString* pipeline, QString* run) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));
    QString runPathParam("{"); runPathParam.append("run").append("}");
    fullPath.replace(runPathParam, stringValue(run));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineRunCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineRunCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    PipelineRun* output = static_cast<PipelineRun*>(create(json, QString("PipelineRun")));
    worker->deleteLater();

    emit getPipelineRunSignal(output);
    emit getPipelineRunSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineRunLog(QString* organization, QString* pipeline, QString* run, qint32 start, bool download) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/log");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));
    QString runPathParam("{"); runPathParam.append("run").append("}");
    fullPath.replace(runPathParam, stringValue(run));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("start"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(start)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("download"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(download)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineRunLogCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineRunLogCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    worker->deleteLater();

    emit getPipelineRunLogSignal(output);
    emit getPipelineRunLogSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineRunNode(QString* organization, QString* pipeline, QString* run, QString* node) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));
    QString runPathParam("{"); runPathParam.append("run").append("}");
    fullPath.replace(runPathParam, stringValue(run));
    QString nodePathParam("{"); nodePathParam.append("node").append("}");
    fullPath.replace(nodePathParam, stringValue(node));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineRunNodeCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineRunNodeCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    PipelineRunNode* output = static_cast<PipelineRunNode*>(create(json, QString("PipelineRunNode")));
    worker->deleteLater();

    emit getPipelineRunNodeSignal(output);
    emit getPipelineRunNodeSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineRunNodeStep(QString* organization, QString* pipeline, QString* run, QString* node, QString* step) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));
    QString runPathParam("{"); runPathParam.append("run").append("}");
    fullPath.replace(runPathParam, stringValue(run));
    QString nodePathParam("{"); nodePathParam.append("node").append("}");
    fullPath.replace(nodePathParam, stringValue(node));
    QString stepPathParam("{"); stepPathParam.append("step").append("}");
    fullPath.replace(stepPathParam, stringValue(step));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineRunNodeStepCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineRunNodeStepCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    PipelineStepImpl* output = static_cast<PipelineStepImpl*>(create(json, QString("PipelineStepImpl")));
    worker->deleteLater();

    emit getPipelineRunNodeStepSignal(output);
    emit getPipelineRunNodeStepSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineRunNodeStepLog(QString* organization, QString* pipeline, QString* run, QString* node, QString* step) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps/{step}/log");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));
    QString runPathParam("{"); runPathParam.append("run").append("}");
    fullPath.replace(runPathParam, stringValue(run));
    QString nodePathParam("{"); nodePathParam.append("node").append("}");
    fullPath.replace(nodePathParam, stringValue(node));
    QString stepPathParam("{"); stepPathParam.append("step").append("}");
    fullPath.replace(stepPathParam, stringValue(step));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineRunNodeStepLogCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineRunNodeStepLogCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    worker->deleteLater();

    emit getPipelineRunNodeStepLogSignal(output);
    emit getPipelineRunNodeStepLogSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineRunNodeSteps(QString* organization, QString* pipeline, QString* run, QString* node) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes/{node}/steps");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));
    QString runPathParam("{"); runPathParam.append("run").append("}");
    fullPath.replace(runPathParam, stringValue(run));
    QString nodePathParam("{"); nodePathParam.append("node").append("}");
    fullPath.replace(nodePathParam, stringValue(node));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineRunNodeStepsCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineRunNodeStepsCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    PipelineRunNodeSteps* output = static_cast<PipelineRunNodeSteps*>(create(json, QString("PipelineRunNodeSteps")));
    worker->deleteLater();

    emit getPipelineRunNodeStepsSignal(output);
    emit getPipelineRunNodeStepsSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineRunNodes(QString* organization, QString* pipeline, QString* run) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/nodes");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));
    QString runPathParam("{"); runPathParam.append("run").append("}");
    fullPath.replace(runPathParam, stringValue(run));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineRunNodesCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineRunNodesCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    PipelineRunNodes* output = static_cast<PipelineRunNodes*>(create(json, QString("PipelineRunNodes")));
    worker->deleteLater();

    emit getPipelineRunNodesSignal(output);
    emit getPipelineRunNodesSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelineRuns(QString* organization, QString* pipeline) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelineRunsCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelineRunsCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    PipelineRuns* output = static_cast<PipelineRuns*>(create(json, QString("PipelineRuns")));
    worker->deleteLater();

    emit getPipelineRunsSignal(output);
    emit getPipelineRunsSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getPipelines(QString* organization) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getPipelinesCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getPipelinesCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    Pipelines* output = static_cast<Pipelines*>(create(json, QString("Pipelines")));
    worker->deleteLater();

    emit getPipelinesSignal(output);
    emit getPipelinesSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getSCM(QString* organization, QString* scm) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/scm/{scm}");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString scmPathParam("{"); scmPathParam.append("scm").append("}");
    fullPath.replace(scmPathParam, stringValue(scm));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getSCMCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getSCMCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    GithubScm* output = static_cast<GithubScm*>(create(json, QString("GithubScm")));
    worker->deleteLater();

    emit getSCMSignal(output);
    emit getSCMSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getSCMOrganisationRepositories(QString* organization, QString* scm, QString* scm_organisation, QString* credential_id, qint32 page_size, qint32 page_number) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString scmPathParam("{"); scmPathParam.append("scm").append("}");
    fullPath.replace(scmPathParam, stringValue(scm));
    QString scm_organisationPathParam("{"); scm_organisationPathParam.append("scmOrganisation").append("}");
    fullPath.replace(scm_organisationPathParam, stringValue(scm_organisation));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("credentialId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(credential_id)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("pageSize"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page_size)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("pageNumber"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(page_number)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getSCMOrganisationRepositoriesCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getSCMOrganisationRepositoriesCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ScmOrganisations* output = static_cast<ScmOrganisations*>(create(json, QString("ScmOrganisations")));
    worker->deleteLater();

    emit getSCMOrganisationRepositoriesSignal(output);
    emit getSCMOrganisationRepositoriesSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getSCMOrganisationRepository(QString* organization, QString* scm, QString* scm_organisation, QString* repository, QString* credential_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/scm/{scm}/organizations/{scmOrganisation}/repositories/{repository}");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString scmPathParam("{"); scmPathParam.append("scm").append("}");
    fullPath.replace(scmPathParam, stringValue(scm));
    QString scm_organisationPathParam("{"); scm_organisationPathParam.append("scmOrganisation").append("}");
    fullPath.replace(scm_organisationPathParam, stringValue(scm_organisation));
    QString repositoryPathParam("{"); repositoryPathParam.append("repository").append("}");
    fullPath.replace(repositoryPathParam, stringValue(repository));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("credentialId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(credential_id)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getSCMOrganisationRepositoryCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getSCMOrganisationRepositoryCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ScmOrganisations* output = static_cast<ScmOrganisations*>(create(json, QString("ScmOrganisations")));
    worker->deleteLater();

    emit getSCMOrganisationRepositorySignal(output);
    emit getSCMOrganisationRepositorySignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getSCMOrganisations(QString* organization, QString* scm, QString* credential_id) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/scm/{scm}/organizations");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString scmPathParam("{"); scmPathParam.append("scm").append("}");
    fullPath.replace(scmPathParam, stringValue(scm));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("credentialId"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(credential_id)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getSCMOrganisationsCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getSCMOrganisationsCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    ScmOrganisations* output = static_cast<ScmOrganisations*>(create(json, QString("ScmOrganisations")));
    worker->deleteLater();

    emit getSCMOrganisationsSignal(output);
    emit getSCMOrganisationsSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getUser(QString* organization, QString* user) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/users/{user}");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString userPathParam("{"); userPathParam.append("user").append("}");
    fullPath.replace(userPathParam, stringValue(user));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getUserCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getUserCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    User* output = static_cast<User*>(create(json, QString("User")));
    worker->deleteLater();

    emit getUserSignal(output);
    emit getUserSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getUserFavorites(QString* user) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/users/{user}/favorites");

    QString userPathParam("{"); userPathParam.append("user").append("}");
    fullPath.replace(userPathParam, stringValue(user));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getUserFavoritesCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getUserFavoritesCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    UserFavorites* output = static_cast<UserFavorites*>(create(json, QString("UserFavorites")));
    worker->deleteLater();

    emit getUserFavoritesSignal(output);
    emit getUserFavoritesSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::getUsers(QString* organization) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/users/");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::getUsersCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::getUsersCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    User* output = static_cast<User*>(create(json, QString("User")));
    worker->deleteLater();

    emit getUsersSignal(output);
    emit getUsersSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::postPipelineRun(QString* organization, QString* pipeline, QString* run) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/replay");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));
    QString runPathParam("{"); runPathParam.append("run").append("}");
    fullPath.replace(runPathParam, stringValue(run));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::postPipelineRunCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::postPipelineRunCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    QueueItemImpl* output = static_cast<QueueItemImpl*>(create(json, QString("QueueItemImpl")));
    worker->deleteLater();

    emit postPipelineRunSignal(output);
    emit postPipelineRunSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::postPipelineRuns(QString* organization, QString* pipeline) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "POST");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::postPipelineRunsCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::postPipelineRunsCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    QueueItemImpl* output = static_cast<QueueItemImpl*>(create(json, QString("QueueItemImpl")));
    worker->deleteLater();

    emit postPipelineRunsSignal(output);
    emit postPipelineRunsSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::putPipelineFavorite(QString* organization, QString* pipeline, Body body) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/favorite");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");


    QString output = body.asJson();
    input.request_body.append(output);
    


    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::putPipelineFavoriteCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::putPipelineFavoriteCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    FavoriteImpl* output = static_cast<FavoriteImpl*>(create(json, QString("FavoriteImpl")));
    worker->deleteLater();

    emit putPipelineFavoriteSignal(output);
    emit putPipelineFavoriteSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::putPipelineRun(QString* organization, QString* pipeline, QString* run, QString* blocking, qint32 time_out_in_secs) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/organizations/{organization}/pipelines/{pipeline}/runs/{run}/stop");

    QString organizationPathParam("{"); organizationPathParam.append("organization").append("}");
    fullPath.replace(organizationPathParam, stringValue(organization));
    QString pipelinePathParam("{"); pipelinePathParam.append("pipeline").append("}");
    fullPath.replace(pipelinePathParam, stringValue(pipeline));
    QString runPathParam("{"); runPathParam.append("run").append("}");
    fullPath.replace(runPathParam, stringValue(run));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("blocking"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(blocking)));

    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("timeOutInSecs"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(time_out_in_secs)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "PUT");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::putPipelineRunCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::putPipelineRunCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    PipelineRun* output = static_cast<PipelineRun*>(create(json, QString("PipelineRun")));
    worker->deleteLater();

    emit putPipelineRunSignal(output);
    emit putPipelineRunSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::search(QString* q) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/search/");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("q"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(q)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::searchCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::searchCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    worker->deleteLater();

    emit searchSignal(output);
    emit searchSignalE(output, error_type, error_str);
}

void
SWGBlueOceanApi::searchClasses(QString* q) {
    QString fullPath;
    fullPath.append(this->host).append(this->basePath).append("/blue/rest/classes/");


    if (fullPath.indexOf("?") > 0) 
      fullPath.append("&");
    else 
      fullPath.append("?");
    fullPath.append(QUrl::toPercentEncoding("q"))
        .append("=")
        .append(QUrl::toPercentEncoding(stringValue(q)));


    HttpRequestWorker *worker = new HttpRequestWorker();
    HttpRequestInput input(fullPath, "GET");





    foreach(QString key, this->defaultHeaders.keys()) {
        input.headers.insert(key, this->defaultHeaders.value(key));
    }

    connect(worker,
            &HttpRequestWorker::on_execution_finished,
            this,
            &SWGBlueOceanApi::searchClassesCallback);

    worker->execute(&input);
}

void
SWGBlueOceanApi::searchClassesCallback(HttpRequestWorker * worker) {
    QString msg;
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type == QNetworkReply::NoError) {
        msg = QString("Success! %1 bytes").arg(worker->response.length());
    }
    else {
        msg = "Error: " + worker->error_str;
    }


    QString json(worker->response);
    QString* output = static_cast<QString*>(create(json, QString("QString")));
    worker->deleteLater();

    emit searchClassesSignal(output);
    emit searchClassesSignalE(output, error_type, error_str);
}


}
