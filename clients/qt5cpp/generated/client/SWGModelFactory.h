/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#ifndef ModelFactory_H_
#define ModelFactory_H_


#include "AllView.h"
#include "Body.h"
#include "BranchImpl.h"
#include "BranchImpllinks.h"
#include "BranchImplpermissions.h"
#include "CauseAction.h"
#include "CauseUserIdCause.h"
#include "ClassesByClass.h"
#include "ClockDifference.h"
#include "ComputerSet.h"
#include "DefaultCrumbIssuer.h"
#include "DiskSpaceMonitorDescriptorDiskSpace.h"
#include "EmptyChangeLogSet.h"
#include "ExtensionClassContainerImpl1.h"
#include "ExtensionClassContainerImpl1links.h"
#include "ExtensionClassContainerImpl1map.h"
#include "ExtensionClassImpl.h"
#include "ExtensionClassImpllinks.h"
#include "FavoriteImpl.h"
#include "FavoriteImpllinks.h"
#include "FreeStyleBuild.h"
#include "FreeStyleProject.h"
#include "FreeStyleProjectactions.h"
#include "FreeStyleProjecthealthReport.h"
#include "GenericResource.h"
#include "GithubContent.h"
#include "GithubFile.h"
#include "GithubOrganization.h"
#include "GithubOrganizationlinks.h"
#include "GithubRepositories.h"
#include "GithubRepositorieslinks.h"
#include "GithubRepository.h"
#include "GithubRepositorylinks.h"
#include "GithubRepositorypermissions.h"
#include "GithubRespositoryContainer.h"
#include "GithubRespositoryContainerlinks.h"
#include "GithubScm.h"
#include "GithubScmlinks.h"
#include "Hudson.h"
#include "HudsonMasterComputer.h"
#include "HudsonMasterComputerexecutors.h"
#include "HudsonMasterComputermonitorData.h"
#include "HudsonassignedLabels.h"
#include "InputStepImpl.h"
#include "InputStepImpllinks.h"
#include "Label1.h"
#include "Link.h"
#include "ListView.h"
#include "MultibranchPipeline.h"
#include "NullSCM.h"
#include "Organisation.h"
#include "Organisations.h"
#include "Pipeline.h"
#include "PipelineActivities.h"
#include "PipelineActivity.h"
#include "PipelineActivityartifacts.h"
#include "PipelineBranches.h"
#include "PipelineBranchesitem.h"
#include "PipelineBranchesitemlatestRun.h"
#include "PipelineBranchesitempullRequest.h"
#include "PipelineBranchesitempullRequestlinks.h"
#include "PipelineFolderImpl.h"
#include "PipelineImpl.h"
#include "PipelineImpllinks.h"
#include "PipelineQueue.h"
#include "PipelineRun.h"
#include "PipelineRunImpl.h"
#include "PipelineRunImpllinks.h"
#include "PipelineRunNode.h"
#include "PipelineRunNodeSteps.h"
#include "PipelineRunNodeedges.h"
#include "PipelineRunNodes.h"
#include "PipelineRunSteps.h"
#include "PipelineRunartifacts.h"
#include "PipelineRuns.h"
#include "PipelineStepImpl.h"
#include "PipelineStepImpllinks.h"
#include "PipelinelatestRun.h"
#include "PipelinelatestRunartifacts.h"
#include "Pipelines.h"
#include "Queue.h"
#include "QueueBlockedItem.h"
#include "QueueItemImpl.h"
#include "QueueLeftItem.h"
#include "ResponseTimeMonitorData.h"
#include "ScmOrganisations.h"
#include "StringParameterDefinition.h"
#include "StringParameterValue.h"
#include "SwapSpaceMonitorMemoryUsage2.h"
#include "UnlabeledLoadStatistics.h"
#include "User.h"
#include "UserFavorites.h"
#include "Users.h"

namespace Swagger {

  inline void* create(QString type) {
    if(QString("AllView").compare(type) == 0) {
      return new AllView();
    }
    if(QString("Body").compare(type) == 0) {
      return new Body();
    }
    if(QString("BranchImpl").compare(type) == 0) {
      return new BranchImpl();
    }
    if(QString("BranchImpllinks").compare(type) == 0) {
      return new BranchImpllinks();
    }
    if(QString("BranchImplpermissions").compare(type) == 0) {
      return new BranchImplpermissions();
    }
    if(QString("CauseAction").compare(type) == 0) {
      return new CauseAction();
    }
    if(QString("CauseUserIdCause").compare(type) == 0) {
      return new CauseUserIdCause();
    }
    if(QString("ClassesByClass").compare(type) == 0) {
      return new ClassesByClass();
    }
    if(QString("ClockDifference").compare(type) == 0) {
      return new ClockDifference();
    }
    if(QString("ComputerSet").compare(type) == 0) {
      return new ComputerSet();
    }
    if(QString("DefaultCrumbIssuer").compare(type) == 0) {
      return new DefaultCrumbIssuer();
    }
    if(QString("DiskSpaceMonitorDescriptorDiskSpace").compare(type) == 0) {
      return new DiskSpaceMonitorDescriptorDiskSpace();
    }
    if(QString("EmptyChangeLogSet").compare(type) == 0) {
      return new EmptyChangeLogSet();
    }
    if(QString("ExtensionClassContainerImpl1").compare(type) == 0) {
      return new ExtensionClassContainerImpl1();
    }
    if(QString("ExtensionClassContainerImpl1links").compare(type) == 0) {
      return new ExtensionClassContainerImpl1links();
    }
    if(QString("ExtensionClassContainerImpl1map").compare(type) == 0) {
      return new ExtensionClassContainerImpl1map();
    }
    if(QString("ExtensionClassImpl").compare(type) == 0) {
      return new ExtensionClassImpl();
    }
    if(QString("ExtensionClassImpllinks").compare(type) == 0) {
      return new ExtensionClassImpllinks();
    }
    if(QString("FavoriteImpl").compare(type) == 0) {
      return new FavoriteImpl();
    }
    if(QString("FavoriteImpllinks").compare(type) == 0) {
      return new FavoriteImpllinks();
    }
    if(QString("FreeStyleBuild").compare(type) == 0) {
      return new FreeStyleBuild();
    }
    if(QString("FreeStyleProject").compare(type) == 0) {
      return new FreeStyleProject();
    }
    if(QString("FreeStyleProjectactions").compare(type) == 0) {
      return new FreeStyleProjectactions();
    }
    if(QString("FreeStyleProjecthealthReport").compare(type) == 0) {
      return new FreeStyleProjecthealthReport();
    }
    if(QString("GenericResource").compare(type) == 0) {
      return new GenericResource();
    }
    if(QString("GithubContent").compare(type) == 0) {
      return new GithubContent();
    }
    if(QString("GithubFile").compare(type) == 0) {
      return new GithubFile();
    }
    if(QString("GithubOrganization").compare(type) == 0) {
      return new GithubOrganization();
    }
    if(QString("GithubOrganizationlinks").compare(type) == 0) {
      return new GithubOrganizationlinks();
    }
    if(QString("GithubRepositories").compare(type) == 0) {
      return new GithubRepositories();
    }
    if(QString("GithubRepositorieslinks").compare(type) == 0) {
      return new GithubRepositorieslinks();
    }
    if(QString("GithubRepository").compare(type) == 0) {
      return new GithubRepository();
    }
    if(QString("GithubRepositorylinks").compare(type) == 0) {
      return new GithubRepositorylinks();
    }
    if(QString("GithubRepositorypermissions").compare(type) == 0) {
      return new GithubRepositorypermissions();
    }
    if(QString("GithubRespositoryContainer").compare(type) == 0) {
      return new GithubRespositoryContainer();
    }
    if(QString("GithubRespositoryContainerlinks").compare(type) == 0) {
      return new GithubRespositoryContainerlinks();
    }
    if(QString("GithubScm").compare(type) == 0) {
      return new GithubScm();
    }
    if(QString("GithubScmlinks").compare(type) == 0) {
      return new GithubScmlinks();
    }
    if(QString("Hudson").compare(type) == 0) {
      return new Hudson();
    }
    if(QString("HudsonMasterComputer").compare(type) == 0) {
      return new HudsonMasterComputer();
    }
    if(QString("HudsonMasterComputerexecutors").compare(type) == 0) {
      return new HudsonMasterComputerexecutors();
    }
    if(QString("HudsonMasterComputermonitorData").compare(type) == 0) {
      return new HudsonMasterComputermonitorData();
    }
    if(QString("HudsonassignedLabels").compare(type) == 0) {
      return new HudsonassignedLabels();
    }
    if(QString("InputStepImpl").compare(type) == 0) {
      return new InputStepImpl();
    }
    if(QString("InputStepImpllinks").compare(type) == 0) {
      return new InputStepImpllinks();
    }
    if(QString("Label1").compare(type) == 0) {
      return new Label1();
    }
    if(QString("Link").compare(type) == 0) {
      return new Link();
    }
    if(QString("ListView").compare(type) == 0) {
      return new ListView();
    }
    if(QString("MultibranchPipeline").compare(type) == 0) {
      return new MultibranchPipeline();
    }
    if(QString("NullSCM").compare(type) == 0) {
      return new NullSCM();
    }
    if(QString("Organisation").compare(type) == 0) {
      return new Organisation();
    }
    if(QString("Organisations").compare(type) == 0) {
      return new Organisations();
    }
    if(QString("Pipeline").compare(type) == 0) {
      return new Pipeline();
    }
    if(QString("PipelineActivities").compare(type) == 0) {
      return new PipelineActivities();
    }
    if(QString("PipelineActivity").compare(type) == 0) {
      return new PipelineActivity();
    }
    if(QString("PipelineActivityartifacts").compare(type) == 0) {
      return new PipelineActivityartifacts();
    }
    if(QString("PipelineBranches").compare(type) == 0) {
      return new PipelineBranches();
    }
    if(QString("PipelineBranchesitem").compare(type) == 0) {
      return new PipelineBranchesitem();
    }
    if(QString("PipelineBranchesitemlatestRun").compare(type) == 0) {
      return new PipelineBranchesitemlatestRun();
    }
    if(QString("PipelineBranchesitempullRequest").compare(type) == 0) {
      return new PipelineBranchesitempullRequest();
    }
    if(QString("PipelineBranchesitempullRequestlinks").compare(type) == 0) {
      return new PipelineBranchesitempullRequestlinks();
    }
    if(QString("PipelineFolderImpl").compare(type) == 0) {
      return new PipelineFolderImpl();
    }
    if(QString("PipelineImpl").compare(type) == 0) {
      return new PipelineImpl();
    }
    if(QString("PipelineImpllinks").compare(type) == 0) {
      return new PipelineImpllinks();
    }
    if(QString("PipelineQueue").compare(type) == 0) {
      return new PipelineQueue();
    }
    if(QString("PipelineRun").compare(type) == 0) {
      return new PipelineRun();
    }
    if(QString("PipelineRunImpl").compare(type) == 0) {
      return new PipelineRunImpl();
    }
    if(QString("PipelineRunImpllinks").compare(type) == 0) {
      return new PipelineRunImpllinks();
    }
    if(QString("PipelineRunNode").compare(type) == 0) {
      return new PipelineRunNode();
    }
    if(QString("PipelineRunNodeSteps").compare(type) == 0) {
      return new PipelineRunNodeSteps();
    }
    if(QString("PipelineRunNodeedges").compare(type) == 0) {
      return new PipelineRunNodeedges();
    }
    if(QString("PipelineRunNodes").compare(type) == 0) {
      return new PipelineRunNodes();
    }
    if(QString("PipelineRunSteps").compare(type) == 0) {
      return new PipelineRunSteps();
    }
    if(QString("PipelineRunartifacts").compare(type) == 0) {
      return new PipelineRunartifacts();
    }
    if(QString("PipelineRuns").compare(type) == 0) {
      return new PipelineRuns();
    }
    if(QString("PipelineStepImpl").compare(type) == 0) {
      return new PipelineStepImpl();
    }
    if(QString("PipelineStepImpllinks").compare(type) == 0) {
      return new PipelineStepImpllinks();
    }
    if(QString("PipelinelatestRun").compare(type) == 0) {
      return new PipelinelatestRun();
    }
    if(QString("PipelinelatestRunartifacts").compare(type) == 0) {
      return new PipelinelatestRunartifacts();
    }
    if(QString("Pipelines").compare(type) == 0) {
      return new Pipelines();
    }
    if(QString("Queue").compare(type) == 0) {
      return new Queue();
    }
    if(QString("QueueBlockedItem").compare(type) == 0) {
      return new QueueBlockedItem();
    }
    if(QString("QueueItemImpl").compare(type) == 0) {
      return new QueueItemImpl();
    }
    if(QString("QueueLeftItem").compare(type) == 0) {
      return new QueueLeftItem();
    }
    if(QString("ResponseTimeMonitorData").compare(type) == 0) {
      return new ResponseTimeMonitorData();
    }
    if(QString("ScmOrganisations").compare(type) == 0) {
      return new ScmOrganisations();
    }
    if(QString("StringParameterDefinition").compare(type) == 0) {
      return new StringParameterDefinition();
    }
    if(QString("StringParameterValue").compare(type) == 0) {
      return new StringParameterValue();
    }
    if(QString("SwapSpaceMonitorMemoryUsage2").compare(type) == 0) {
      return new SwapSpaceMonitorMemoryUsage2();
    }
    if(QString("UnlabeledLoadStatistics").compare(type) == 0) {
      return new UnlabeledLoadStatistics();
    }
    if(QString("User").compare(type) == 0) {
      return new User();
    }
    if(QString("UserFavorites").compare(type) == 0) {
      return new UserFavorites();
    }
    if(QString("Users").compare(type) == 0) {
      return new Users();
    }
    
    return nullptr;
  }

  inline void* create(QString json, QString type) {
    void* val = create(type);
    if(val != nullptr) {
      SWGObject* obj = static_cast<SWGObject*>(val);
      return obj->fromJson(json);
    }
    if(type.startsWith("QString")) {
      return new QString();
    }
    return nullptr;
  }

}

#endif /* ModelFactory_H_ */
