/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "GithubContent.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

GithubContent::GithubContent(QString* json) {
    init();
    this->fromJson(*json);
}

GithubContent::GithubContent() {
    init();
}

GithubContent::~GithubContent() {
    this->cleanup();
}

void
GithubContent::init() {
    name = new QString("");
    sha = new QString("");
    _class = new QString("");
    repo = new QString("");
    size = 0;
    owner = new QString("");
    path = new QString("");
    base64_data = new QString("");
}

void
GithubContent::cleanup() {
    
    if(name != nullptr) {
        delete name;
    }

    if(sha != nullptr) {
        delete sha;
    }

    if(_class != nullptr) {
        delete _class;
    }

    if(repo != nullptr) {
        delete repo;
    }


    if(owner != nullptr) {
        delete owner;
    }

    if(path != nullptr) {
        delete path;
    }

    if(base64_data != nullptr) {
        delete base64_data;
    }
}

GithubContent*
GithubContent::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
GithubContent::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&sha, pJson["sha"], "QString", "QString");
    ::Swagger::setValue(&_class, pJson["_class"], "QString", "QString");
    ::Swagger::setValue(&repo, pJson["repo"], "QString", "QString");
    ::Swagger::setValue(&size, pJson["size"], "qint32", "");
    ::Swagger::setValue(&owner, pJson["owner"], "QString", "QString");
    ::Swagger::setValue(&path, pJson["path"], "QString", "QString");
    ::Swagger::setValue(&base64_data, pJson["base64Data"], "QString", "QString");
}

QString
GithubContent::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
GithubContent::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("name"), name, obj, QString("QString"));

    toJsonValue(QString("sha"), sha, obj, QString("QString"));

    toJsonValue(QString("_class"), _class, obj, QString("QString"));

    toJsonValue(QString("repo"), repo, obj, QString("QString"));

    obj->insert("size", QJsonValue(size));

    toJsonValue(QString("owner"), owner, obj, QString("QString"));

    toJsonValue(QString("path"), path, obj, QString("QString"));

    toJsonValue(QString("base64Data"), base64_data, obj, QString("QString"));

    return obj;
}

QString*
GithubContent::getName() {
    return name;
}
void
GithubContent::setName(QString* name) {
    this->name = name;
}

QString*
GithubContent::getSha() {
    return sha;
}
void
GithubContent::setSha(QString* sha) {
    this->sha = sha;
}

QString*
GithubContent::getClass() {
    return _class;
}
void
GithubContent::setClass(QString* _class) {
    this->_class = _class;
}

QString*
GithubContent::getRepo() {
    return repo;
}
void
GithubContent::setRepo(QString* repo) {
    this->repo = repo;
}

qint32
GithubContent::getSize() {
    return size;
}
void
GithubContent::setSize(qint32 size) {
    this->size = size;
}

QString*
GithubContent::getOwner() {
    return owner;
}
void
GithubContent::setOwner(QString* owner) {
    this->owner = owner;
}

QString*
GithubContent::getPath() {
    return path;
}
void
GithubContent::setPath(QString* path) {
    this->path = path;
}

QString*
GithubContent::getBase64Data() {
    return base64_data;
}
void
GithubContent::setBase64Data(QString* base64_data) {
    this->base64_data = base64_data;
}


}

