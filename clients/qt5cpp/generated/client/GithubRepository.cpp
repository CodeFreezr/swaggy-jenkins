/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "GithubRepository.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

GithubRepository::GithubRepository(QString* json) {
    init();
    this->fromJson(*json);
}

GithubRepository::GithubRepository() {
    init();
}

GithubRepository::~GithubRepository() {
    this->cleanup();
}

void
GithubRepository::init() {
    _class = new QString("");
    _links = new GithubRepositorylinks();
    default_branch = new QString("");
    description = new QString("");
    name = new QString("");
    permissions = new GithubRepositorypermissions();
    private = false;
    full_name = new QString("");
}

void
GithubRepository::cleanup() {
    
    if(_class != nullptr) {
        delete _class;
    }

    if(_links != nullptr) {
        delete _links;
    }

    if(default_branch != nullptr) {
        delete default_branch;
    }

    if(description != nullptr) {
        delete description;
    }

    if(name != nullptr) {
        delete name;
    }

    if(permissions != nullptr) {
        delete permissions;
    }


    if(full_name != nullptr) {
        delete full_name;
    }
}

GithubRepository*
GithubRepository::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
GithubRepository::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&_class, pJson["_class"], "QString", "QString");
    ::Swagger::setValue(&_links, pJson["_links"], "GithubRepositorylinks", "GithubRepositorylinks");
    ::Swagger::setValue(&default_branch, pJson["defaultBranch"], "QString", "QString");
    ::Swagger::setValue(&description, pJson["description"], "QString", "QString");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&permissions, pJson["permissions"], "GithubRepositorypermissions", "GithubRepositorypermissions");
    ::Swagger::setValue(&private, pJson["private"], "bool", "");
    ::Swagger::setValue(&full_name, pJson["fullName"], "QString", "QString");
}

QString
GithubRepository::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
GithubRepository::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("_class"), _class, obj, QString("QString"));

    toJsonValue(QString("_links"), _links, obj, QString("GithubRepositorylinks"));

    toJsonValue(QString("defaultBranch"), default_branch, obj, QString("QString"));

    toJsonValue(QString("description"), description, obj, QString("QString"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    toJsonValue(QString("permissions"), permissions, obj, QString("GithubRepositorypermissions"));

    obj->insert("private", QJsonValue(private));

    toJsonValue(QString("fullName"), full_name, obj, QString("QString"));

    return obj;
}

QString*
GithubRepository::getClass() {
    return _class;
}
void
GithubRepository::setClass(QString* _class) {
    this->_class = _class;
}

GithubRepositorylinks*
GithubRepository::getLinks() {
    return _links;
}
void
GithubRepository::setLinks(GithubRepositorylinks* _links) {
    this->_links = _links;
}

QString*
GithubRepository::getDefaultBranch() {
    return default_branch;
}
void
GithubRepository::setDefaultBranch(QString* default_branch) {
    this->default_branch = default_branch;
}

QString*
GithubRepository::getDescription() {
    return description;
}
void
GithubRepository::setDescription(QString* description) {
    this->description = description;
}

QString*
GithubRepository::getName() {
    return name;
}
void
GithubRepository::setName(QString* name) {
    this->name = name;
}

GithubRepositorypermissions*
GithubRepository::getPermissions() {
    return permissions;
}
void
GithubRepository::setPermissions(GithubRepositorypermissions* permissions) {
    this->permissions = permissions;
}

bool
GithubRepository::getPrivate() {
    return private;
}
void
GithubRepository::setPrivate(bool private) {
    this->private = private;
}

QString*
GithubRepository::getFullName() {
    return full_name;
}
void
GithubRepository::setFullName(QString* full_name) {
    this->full_name = full_name;
}


}

