/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "SWGHudsonmodelQueueLeftItem.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

SWGHudsonmodelQueueLeftItem::SWGHudsonmodelQueueLeftItem(QString* json) {
    init();
    this->fromJson(*json);
}

SWGHudsonmodelQueueLeftItem::SWGHudsonmodelQueueLeftItem() {
    init();
}

SWGHudsonmodelQueueLeftItem::~SWGHudsonmodelQueueLeftItem() {
    this->cleanup();
}

void
SWGHudsonmodelQueueLeftItem::init() {
    _class = new QString("");
    actions = new QList<SWGHudsonmodelCauseAction*>();
    blocked = false;
    buildable = false;
    id = 0;
    in_queue_since = 0;
    params = new QString("");
    stuck = false;
    task = new SWGHudsonmodelFreeStyleProject();
    url = new QString("");
    why = new QString("");
    cancelled = false;
    executable = new SWGHudsonmodelFreeStyleBuild();
}

void
SWGHudsonmodelQueueLeftItem::cleanup() {
    
    if(_class != nullptr) {
        delete _class;
    }

    if(actions != nullptr) {
        QList<SWGHudsonmodelCauseAction*>* arr = actions;
        foreach(SWGHudsonmodelCauseAction* o, *arr) {
            delete o;
        }
        delete actions;
    }





    if(params != nullptr) {
        delete params;
    }


    if(task != nullptr) {
        delete task;
    }

    if(url != nullptr) {
        delete url;
    }

    if(why != nullptr) {
        delete why;
    }


    if(executable != nullptr) {
        delete executable;
    }
}

SWGHudsonmodelQueueLeftItem*
SWGHudsonmodelQueueLeftItem::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
SWGHudsonmodelQueueLeftItem::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&_class, pJson["_class"], "QString", "QString");
    
    ::Swagger::setValue(&actions, pJson["actions"], "QList", "SWGHudsonmodelCauseAction");
    
    ::Swagger::setValue(&blocked, pJson["blocked"], "bool", "");
    ::Swagger::setValue(&buildable, pJson["buildable"], "bool", "");
    ::Swagger::setValue(&id, pJson["id"], "qint32", "");
    ::Swagger::setValue(&in_queue_since, pJson["inQueueSince"], "qint32", "");
    ::Swagger::setValue(&params, pJson["params"], "QString", "QString");
    ::Swagger::setValue(&stuck, pJson["stuck"], "bool", "");
    ::Swagger::setValue(&task, pJson["task"], "SWGHudsonmodelFreeStyleProject", "SWGHudsonmodelFreeStyleProject");
    ::Swagger::setValue(&url, pJson["url"], "QString", "QString");
    ::Swagger::setValue(&why, pJson["why"], "QString", "QString");
    ::Swagger::setValue(&cancelled, pJson["cancelled"], "bool", "");
    ::Swagger::setValue(&executable, pJson["executable"], "SWGHudsonmodelFreeStyleBuild", "SWGHudsonmodelFreeStyleBuild");
}

QString
SWGHudsonmodelQueueLeftItem::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
SWGHudsonmodelQueueLeftItem::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("_class"), _class, obj, QString("QString"));

    QJsonArray actionsJsonArray;
    toJsonArray((QList<void*>*)actions, &actionsJsonArray, "actions", "SWGHudsonmodelCauseAction");
    obj->insert("actions", actionsJsonArray);

    obj->insert("blocked", QJsonValue(blocked));

    obj->insert("buildable", QJsonValue(buildable));

    obj->insert("id", QJsonValue(id));

    obj->insert("inQueueSince", QJsonValue(in_queue_since));

    toJsonValue(QString("params"), params, obj, QString("QString"));

    obj->insert("stuck", QJsonValue(stuck));

    toJsonValue(QString("task"), task, obj, QString("SWGHudsonmodelFreeStyleProject"));

    toJsonValue(QString("url"), url, obj, QString("QString"));

    toJsonValue(QString("why"), why, obj, QString("QString"));

    obj->insert("cancelled", QJsonValue(cancelled));

    toJsonValue(QString("executable"), executable, obj, QString("SWGHudsonmodelFreeStyleBuild"));

    return obj;
}

QString*
SWGHudsonmodelQueueLeftItem::getClass() {
    return _class;
}
void
SWGHudsonmodelQueueLeftItem::setClass(QString* _class) {
    this->_class = _class;
}

QList<SWGHudsonmodelCauseAction*>*
SWGHudsonmodelQueueLeftItem::getActions() {
    return actions;
}
void
SWGHudsonmodelQueueLeftItem::setActions(QList<SWGHudsonmodelCauseAction*>* actions) {
    this->actions = actions;
}

bool
SWGHudsonmodelQueueLeftItem::getBlocked() {
    return blocked;
}
void
SWGHudsonmodelQueueLeftItem::setBlocked(bool blocked) {
    this->blocked = blocked;
}

bool
SWGHudsonmodelQueueLeftItem::getBuildable() {
    return buildable;
}
void
SWGHudsonmodelQueueLeftItem::setBuildable(bool buildable) {
    this->buildable = buildable;
}

qint32
SWGHudsonmodelQueueLeftItem::getId() {
    return id;
}
void
SWGHudsonmodelQueueLeftItem::setId(qint32 id) {
    this->id = id;
}

qint32
SWGHudsonmodelQueueLeftItem::getInQueueSince() {
    return in_queue_since;
}
void
SWGHudsonmodelQueueLeftItem::setInQueueSince(qint32 in_queue_since) {
    this->in_queue_since = in_queue_since;
}

QString*
SWGHudsonmodelQueueLeftItem::getParams() {
    return params;
}
void
SWGHudsonmodelQueueLeftItem::setParams(QString* params) {
    this->params = params;
}

bool
SWGHudsonmodelQueueLeftItem::getStuck() {
    return stuck;
}
void
SWGHudsonmodelQueueLeftItem::setStuck(bool stuck) {
    this->stuck = stuck;
}

SWGHudsonmodelFreeStyleProject*
SWGHudsonmodelQueueLeftItem::getTask() {
    return task;
}
void
SWGHudsonmodelQueueLeftItem::setTask(SWGHudsonmodelFreeStyleProject* task) {
    this->task = task;
}

QString*
SWGHudsonmodelQueueLeftItem::getUrl() {
    return url;
}
void
SWGHudsonmodelQueueLeftItem::setUrl(QString* url) {
    this->url = url;
}

QString*
SWGHudsonmodelQueueLeftItem::getWhy() {
    return why;
}
void
SWGHudsonmodelQueueLeftItem::setWhy(QString* why) {
    this->why = why;
}

bool
SWGHudsonmodelQueueLeftItem::getCancelled() {
    return cancelled;
}
void
SWGHudsonmodelQueueLeftItem::setCancelled(bool cancelled) {
    this->cancelled = cancelled;
}

SWGHudsonmodelFreeStyleBuild*
SWGHudsonmodelQueueLeftItem::getExecutable() {
    return executable;
}
void
SWGHudsonmodelQueueLeftItem::setExecutable(SWGHudsonmodelFreeStyleBuild* executable) {
    this->executable = executable;
}


}

