/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * HudsonMasterComputermonitorData.h
 * 
 * 
 */

#ifndef HudsonMasterComputermonitorData_H_
#define HudsonMasterComputermonitorData_H_

#include <QJsonObject>


#include "ClockDifference.h"
#include "DiskSpaceMonitorDescriptorDiskSpace.h"
#include "ResponseTimeMonitorData.h"
#include "SwapSpaceMonitorMemoryUsage2.h"
#include <QString>

#include "SWGObject.h"


namespace Swagger {

class HudsonMasterComputermonitorData: public SWGObject {
public:
    HudsonMasterComputermonitorData();
    HudsonMasterComputermonitorData(QString* json);
    virtual ~HudsonMasterComputermonitorData();
    void init();
    void cleanup();

    QString asJson ();
    QJsonObject* asJsonObject();
    void fromJsonObject(QJsonObject &json);
    HudsonMasterComputermonitorData* fromJson(QString &jsonString);

    SwapSpaceMonitorMemoryUsage2* getHudsonNodeMonitorsSwapSpaceMonitor();
    void setHudsonNodeMonitorsSwapSpaceMonitor(SwapSpaceMonitorMemoryUsage2* hudson_node_monitors_swap_space_monitor);

    DiskSpaceMonitorDescriptorDiskSpace* getHudsonNodeMonitorsTemporarySpaceMonitor();
    void setHudsonNodeMonitorsTemporarySpaceMonitor(DiskSpaceMonitorDescriptorDiskSpace* hudson_node_monitors_temporary_space_monitor);

    DiskSpaceMonitorDescriptorDiskSpace* getHudsonNodeMonitorsDiskSpaceMonitor();
    void setHudsonNodeMonitorsDiskSpaceMonitor(DiskSpaceMonitorDescriptorDiskSpace* hudson_node_monitors_disk_space_monitor);

    QString* getHudsonNodeMonitorsArchitectureMonitor();
    void setHudsonNodeMonitorsArchitectureMonitor(QString* hudson_node_monitors_architecture_monitor);

    ResponseTimeMonitorData* getHudsonNodeMonitorsResponseTimeMonitor();
    void setHudsonNodeMonitorsResponseTimeMonitor(ResponseTimeMonitorData* hudson_node_monitors_response_time_monitor);

    ClockDifference* getHudsonNodeMonitorsClockMonitor();
    void setHudsonNodeMonitorsClockMonitor(ClockDifference* hudson_node_monitors_clock_monitor);

    QString* getClass();
    void setClass(QString* _class);


private:
    SwapSpaceMonitorMemoryUsage2* hudson_node_monitors_swap_space_monitor;
    DiskSpaceMonitorDescriptorDiskSpace* hudson_node_monitors_temporary_space_monitor;
    DiskSpaceMonitorDescriptorDiskSpace* hudson_node_monitors_disk_space_monitor;
    QString* hudson_node_monitors_architecture_monitor;
    ResponseTimeMonitorData* hudson_node_monitors_response_time_monitor;
    ClockDifference* hudson_node_monitors_clock_monitor;
    QString* _class;
};

}

#endif /* HudsonMasterComputermonitorData_H_ */
