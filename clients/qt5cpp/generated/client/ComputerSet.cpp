/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "ComputerSet.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

ComputerSet::ComputerSet(QString* json) {
    init();
    this->fromJson(*json);
}

ComputerSet::ComputerSet() {
    init();
}

ComputerSet::~ComputerSet() {
    this->cleanup();
}

void
ComputerSet::init() {
    _class = new QString("");
    busy_executors = 0;
    computer = new QList<HudsonMasterComputer*>();
    display_name = new QString("");
    total_executors = 0;
}

void
ComputerSet::cleanup() {
    
    if(_class != nullptr) {
        delete _class;
    }


    if(computer != nullptr) {
        QList<HudsonMasterComputer*>* arr = computer;
        foreach(HudsonMasterComputer* o, *arr) {
            delete o;
        }
        delete computer;
    }

    if(display_name != nullptr) {
        delete display_name;
    }

}

ComputerSet*
ComputerSet::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
ComputerSet::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&_class, pJson["_class"], "QString", "QString");
    ::Swagger::setValue(&busy_executors, pJson["busyExecutors"], "qint32", "");
    
    ::Swagger::setValue(&computer, pJson["computer"], "QList", "HudsonMasterComputer");
    
    ::Swagger::setValue(&display_name, pJson["displayName"], "QString", "QString");
    ::Swagger::setValue(&total_executors, pJson["totalExecutors"], "qint32", "");
}

QString
ComputerSet::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
ComputerSet::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("_class"), _class, obj, QString("QString"));

    obj->insert("busyExecutors", QJsonValue(busy_executors));

    QJsonArray computerJsonArray;
    toJsonArray((QList<void*>*)computer, &computerJsonArray, "computer", "HudsonMasterComputer");
    obj->insert("computer", computerJsonArray);

    toJsonValue(QString("displayName"), display_name, obj, QString("QString"));

    obj->insert("totalExecutors", QJsonValue(total_executors));

    return obj;
}

QString*
ComputerSet::getClass() {
    return _class;
}
void
ComputerSet::setClass(QString* _class) {
    this->_class = _class;
}

qint32
ComputerSet::getBusyExecutors() {
    return busy_executors;
}
void
ComputerSet::setBusyExecutors(qint32 busy_executors) {
    this->busy_executors = busy_executors;
}

QList<HudsonMasterComputer*>*
ComputerSet::getComputer() {
    return computer;
}
void
ComputerSet::setComputer(QList<HudsonMasterComputer*>* computer) {
    this->computer = computer;
}

QString*
ComputerSet::getDisplayName() {
    return display_name;
}
void
ComputerSet::setDisplayName(QString* display_name) {
    this->display_name = display_name;
}

qint32
ComputerSet::getTotalExecutors() {
    return total_executors;
}
void
ComputerSet::setTotalExecutors(qint32 total_executors) {
    this->total_executors = total_executors;
}


}

