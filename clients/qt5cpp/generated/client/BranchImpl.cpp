/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


#include "BranchImpl.h"

#include "SWGHelpers.h"

#include <QJsonDocument>
#include <QJsonArray>
#include <QObject>
#include <QDebug>

namespace Swagger {

BranchImpl::BranchImpl(QString* json) {
    init();
    this->fromJson(*json);
}

BranchImpl::BranchImpl() {
    init();
}

BranchImpl::~BranchImpl() {
    this->cleanup();
}

void
BranchImpl::init() {
    _class = new QString("");
    display_name = new QString("");
    estimated_duration_in_millis = 0;
    full_display_name = new QString("");
    full_name = new QString("");
    name = new QString("");
    organization = new QString("");
    parameters = new QList<StringParameterDefinition*>();
    permissions = new BranchImplpermissions();
    weather_score = 0;
    pull_request = new QString("");
    _links = new BranchImpllinks();
    latest_run = new PipelineRunImpl();
}

void
BranchImpl::cleanup() {
    
    if(_class != nullptr) {
        delete _class;
    }

    if(display_name != nullptr) {
        delete display_name;
    }


    if(full_display_name != nullptr) {
        delete full_display_name;
    }

    if(full_name != nullptr) {
        delete full_name;
    }

    if(name != nullptr) {
        delete name;
    }

    if(organization != nullptr) {
        delete organization;
    }

    if(parameters != nullptr) {
        QList<StringParameterDefinition*>* arr = parameters;
        foreach(StringParameterDefinition* o, *arr) {
            delete o;
        }
        delete parameters;
    }

    if(permissions != nullptr) {
        delete permissions;
    }


    if(pull_request != nullptr) {
        delete pull_request;
    }

    if(_links != nullptr) {
        delete _links;
    }

    if(latest_run != nullptr) {
        delete latest_run;
    }
}

BranchImpl*
BranchImpl::fromJson(QString &json) {
    QByteArray array (json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
    return this;
}

void
BranchImpl::fromJsonObject(QJsonObject &pJson) {
    ::Swagger::setValue(&_class, pJson["_class"], "QString", "QString");
    ::Swagger::setValue(&display_name, pJson["displayName"], "QString", "QString");
    ::Swagger::setValue(&estimated_duration_in_millis, pJson["estimatedDurationInMillis"], "qint32", "");
    ::Swagger::setValue(&full_display_name, pJson["fullDisplayName"], "QString", "QString");
    ::Swagger::setValue(&full_name, pJson["fullName"], "QString", "QString");
    ::Swagger::setValue(&name, pJson["name"], "QString", "QString");
    ::Swagger::setValue(&organization, pJson["organization"], "QString", "QString");
    
    ::Swagger::setValue(&parameters, pJson["parameters"], "QList", "StringParameterDefinition");
    
    ::Swagger::setValue(&permissions, pJson["permissions"], "BranchImplpermissions", "BranchImplpermissions");
    ::Swagger::setValue(&weather_score, pJson["weatherScore"], "qint32", "");
    ::Swagger::setValue(&pull_request, pJson["pullRequest"], "QString", "QString");
    ::Swagger::setValue(&_links, pJson["_links"], "BranchImpllinks", "BranchImpllinks");
    ::Swagger::setValue(&latest_run, pJson["latestRun"], "PipelineRunImpl", "PipelineRunImpl");
}

QString
BranchImpl::asJson ()
{
    QJsonObject* obj = this->asJsonObject();
    
    QJsonDocument doc(*obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject*
BranchImpl::asJsonObject() {
    QJsonObject* obj = new QJsonObject();
    
    toJsonValue(QString("_class"), _class, obj, QString("QString"));

    toJsonValue(QString("displayName"), display_name, obj, QString("QString"));

    obj->insert("estimatedDurationInMillis", QJsonValue(estimated_duration_in_millis));

    toJsonValue(QString("fullDisplayName"), full_display_name, obj, QString("QString"));

    toJsonValue(QString("fullName"), full_name, obj, QString("QString"));

    toJsonValue(QString("name"), name, obj, QString("QString"));

    toJsonValue(QString("organization"), organization, obj, QString("QString"));

    QJsonArray parametersJsonArray;
    toJsonArray((QList<void*>*)parameters, &parametersJsonArray, "parameters", "StringParameterDefinition");
    obj->insert("parameters", parametersJsonArray);

    toJsonValue(QString("permissions"), permissions, obj, QString("BranchImplpermissions"));

    obj->insert("weatherScore", QJsonValue(weather_score));

    toJsonValue(QString("pullRequest"), pull_request, obj, QString("QString"));

    toJsonValue(QString("_links"), _links, obj, QString("BranchImpllinks"));

    toJsonValue(QString("latestRun"), latest_run, obj, QString("PipelineRunImpl"));

    return obj;
}

QString*
BranchImpl::getClass() {
    return _class;
}
void
BranchImpl::setClass(QString* _class) {
    this->_class = _class;
}

QString*
BranchImpl::getDisplayName() {
    return display_name;
}
void
BranchImpl::setDisplayName(QString* display_name) {
    this->display_name = display_name;
}

qint32
BranchImpl::getEstimatedDurationInMillis() {
    return estimated_duration_in_millis;
}
void
BranchImpl::setEstimatedDurationInMillis(qint32 estimated_duration_in_millis) {
    this->estimated_duration_in_millis = estimated_duration_in_millis;
}

QString*
BranchImpl::getFullDisplayName() {
    return full_display_name;
}
void
BranchImpl::setFullDisplayName(QString* full_display_name) {
    this->full_display_name = full_display_name;
}

QString*
BranchImpl::getFullName() {
    return full_name;
}
void
BranchImpl::setFullName(QString* full_name) {
    this->full_name = full_name;
}

QString*
BranchImpl::getName() {
    return name;
}
void
BranchImpl::setName(QString* name) {
    this->name = name;
}

QString*
BranchImpl::getOrganization() {
    return organization;
}
void
BranchImpl::setOrganization(QString* organization) {
    this->organization = organization;
}

QList<StringParameterDefinition*>*
BranchImpl::getParameters() {
    return parameters;
}
void
BranchImpl::setParameters(QList<StringParameterDefinition*>* parameters) {
    this->parameters = parameters;
}

BranchImplpermissions*
BranchImpl::getPermissions() {
    return permissions;
}
void
BranchImpl::setPermissions(BranchImplpermissions* permissions) {
    this->permissions = permissions;
}

qint32
BranchImpl::getWeatherScore() {
    return weather_score;
}
void
BranchImpl::setWeatherScore(qint32 weather_score) {
    this->weather_score = weather_score;
}

QString*
BranchImpl::getPullRequest() {
    return pull_request;
}
void
BranchImpl::setPullRequest(QString* pull_request) {
    this->pull_request = pull_request;
}

BranchImpllinks*
BranchImpl::getLinks() {
    return _links;
}
void
BranchImpl::setLinks(BranchImpllinks* _links) {
    this->_links = _links;
}

PipelineRunImpl*
BranchImpl::getLatestRun() {
    return latest_run;
}
void
BranchImpl::setLatestRun(PipelineRunImpl* latest_run) {
    this->latest_run = latest_run;
}


}

