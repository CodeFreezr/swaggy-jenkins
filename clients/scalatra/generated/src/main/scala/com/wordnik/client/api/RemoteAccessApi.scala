/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wordnik.client.api

import com.wordnik.client.model.ComputerSet
import com.wordnik.client.model.DefaultCrumbIssuer
import com.wordnik.client.model.FreeStyleBuild
import com.wordnik.client.model.FreeStyleProject
import com.wordnik.client.model.Hudson
import com.wordnik.client.model.ListView
import com.wordnik.client.model.Queue

import java.io.File

import org.scalatra.{ TypedParamSupport, ScalatraServlet }
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{FileUploadSupport, MultipartConfig, SizeConstraintExceededException}

import scala.collection.JavaConverters._

class RemoteAccessApi (implicit val swagger: Swagger) extends ScalatraServlet
    with FileUploadSupport
    with JacksonJsonSupport
    with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "RemoteAccessApi"
  override protected val applicationName: Option[String] = Some("//RemoteAccess")

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val getComputerOperation = (apiOperation[ComputerSet]("getComputer")
      summary ""
      parameters(queryParam[Int]("depth").description(""))
  )

  get("/computer/api/json",operation(getComputerOperation)) {
    
    
                val depth = params.getAs[Int]("depth")

    println("depth: " + depth)
  }

  

  val getCrumbOperation = (apiOperation[DefaultCrumbIssuer]("getCrumb")
      summary ""
      parameters()
  )

  get("/crumbIssuer/api/json",operation(getCrumbOperation)) {
  }

  

  val getJenkinsOperation = (apiOperation[Hudson]("getJenkins")
      summary ""
      parameters()
  )

  get("/api/json",operation(getJenkinsOperation)) {
  }

  

  val getJobOperation = (apiOperation[FreeStyleProject]("getJob")
      summary ""
      parameters(pathParam[String]("name").description(""))
  )

  get("/job/:name/api/json",operation(getJobOperation)) {
    
    
      val name = params.getOrElse("name", halt(400))
    
    println("name: " + name)
  }

  

  val getJobConfigOperation = (apiOperation[String]("getJobConfig")
      summary ""
      parameters(pathParam[String]("name").description(""))
  )

  get("/job/:name/config.xml",operation(getJobConfigOperation)) {
    
    
      val name = params.getOrElse("name", halt(400))
    
    println("name: " + name)
  }

  

  val getJobLastBuildOperation = (apiOperation[FreeStyleBuild]("getJobLastBuild")
      summary ""
      parameters(pathParam[String]("name").description(""))
  )

  get("/job/:name/lastBuild/api/json",operation(getJobLastBuildOperation)) {
    
    
      val name = params.getOrElse("name", halt(400))
    
    println("name: " + name)
  }

  

  val getJobProgressiveTextOperation = (apiOperation[Unit]("getJobProgressiveText")
      summary ""
      parameters(pathParam[String]("name").description(""), pathParam[String]("number").description(""), queryParam[String]("start").description(""))
  )

  get("/job/:name/:number/logText/progressiveText",operation(getJobProgressiveTextOperation)) {
    
    
      val name = params.getOrElse("name", halt(400))
    
    println("name: " + name)
    
    
      val number = params.getOrElse("number", halt(400))
    
    println("number: " + number)
    
    
                val start = params.getAs[String]("start")

    println("start: " + start)
  }

  

  val getQueueOperation = (apiOperation[Queue]("getQueue")
      summary ""
      parameters()
  )

  get("/queue/api/json",operation(getQueueOperation)) {
  }

  

  val getQueueItemOperation = (apiOperation[Queue]("getQueueItem")
      summary ""
      parameters(pathParam[String]("number").description(""))
  )

  get("/queue/item/:number/api/json",operation(getQueueItemOperation)) {
    
    
      val number = params.getOrElse("number", halt(400))
    
    println("number: " + number)
  }

  

  val getViewOperation = (apiOperation[ListView]("getView")
      summary ""
      parameters(pathParam[String]("name").description(""))
  )

  get("/view/:name/api/json",operation(getViewOperation)) {
    
    
      val name = params.getOrElse("name", halt(400))
    
    println("name: " + name)
  }

  

  val getViewConfigOperation = (apiOperation[String]("getViewConfig")
      summary ""
      parameters(pathParam[String]("name").description(""))
  )

  get("/view/:name/config.xml",operation(getViewConfigOperation)) {
    
    
      val name = params.getOrElse("name", halt(400))
    
    println("name: " + name)
  }

  

  val headJenkinsOperation = (apiOperation[Unit]("headJenkins")
      summary ""
      parameters()
  )

  head("/api/json",operation(headJenkinsOperation)) {
  }

  

  val postCreateItemOperation = (apiOperation[Unit]("postCreateItem")
      summary ""
      parameters(queryParam[String]("name").description(""), queryParam[String]("from").description("").optional, queryParam[String]("mode").description("").optional, bodyParam[String]("body").description("").optional, headerParam[String]("jenkinsCrumb").description("").optional, headerParam[String]("contentType").description("").optional)
  )

  post("/createItem",operation(postCreateItemOperation)) {
    
    
                val name = params.getAs[String]("name")

    println("name: " + name)
    
    
                val from = params.getAs[String]("from")

    println("from: " + from)
    
    
                val mode = params.getAs[String]("mode")

    println("mode: " + mode)
    
    
          val body = parsedBody.extract[String]

    println("body: " + body)
    
    
          val jenkinsCrumb = request.getHeader("jenkinsCrumb")

    println("jenkinsCrumb: " + jenkinsCrumb)
    
    
          val contentType = request.getHeader("contentType")

    println("contentType: " + contentType)
  }

  

  val postCreateViewOperation = (apiOperation[Unit]("postCreateView")
      summary ""
      parameters(queryParam[String]("name").description(""), bodyParam[String]("body").description("").optional, headerParam[String]("jenkinsCrumb").description("").optional, headerParam[String]("contentType").description("").optional)
  )

  post("/createView",operation(postCreateViewOperation)) {
    
    
                val name = params.getAs[String]("name")

    println("name: " + name)
    
    
          val body = parsedBody.extract[String]

    println("body: " + body)
    
    
          val jenkinsCrumb = request.getHeader("jenkinsCrumb")

    println("jenkinsCrumb: " + jenkinsCrumb)
    
    
          val contentType = request.getHeader("contentType")

    println("contentType: " + contentType)
  }

  

  val postJobBuildOperation = (apiOperation[Unit]("postJobBuild")
      summary ""
      parameters(pathParam[String]("name").description(""), queryParam[String]("json").description(""), queryParam[String]("token").description("").optional, headerParam[String]("jenkinsCrumb").description("").optional)
  )

  post("/job/:name/build",operation(postJobBuildOperation)) {
    
    
      val name = params.getOrElse("name", halt(400))
    
    println("name: " + name)
    
    
                val json = params.getAs[String]("json")

    println("json: " + json)
    
    
                val token = params.getAs[String]("token")

    println("token: " + token)
    
    
          val jenkinsCrumb = request.getHeader("jenkinsCrumb")

    println("jenkinsCrumb: " + jenkinsCrumb)
  }

  

  val postJobConfigOperation = (apiOperation[Unit]("postJobConfig")
      summary ""
      parameters(pathParam[String]("name").description(""), bodyParam[String]("body").description(""), headerParam[String]("jenkinsCrumb").description("").optional)
  )

  post("/job/:name/config.xml",operation(postJobConfigOperation)) {
    
    
      val name = params.getOrElse("name", halt(400))
    
    println("name: " + name)
    
    
          val body = parsedBody.extract[String]

    println("body: " + body)
    
    
          val jenkinsCrumb = request.getHeader("jenkinsCrumb")

    println("jenkinsCrumb: " + jenkinsCrumb)
  }

  

  val postJobDeleteOperation = (apiOperation[Unit]("postJobDelete")
      summary ""
      parameters(pathParam[String]("name").description(""), headerParam[String]("jenkinsCrumb").description("").optional)
  )

  post("/job/:name/doDelete",operation(postJobDeleteOperation)) {
    
    
      val name = params.getOrElse("name", halt(400))
    
    println("name: " + name)
    
    
          val jenkinsCrumb = request.getHeader("jenkinsCrumb")

    println("jenkinsCrumb: " + jenkinsCrumb)
  }

  

  val postJobDisableOperation = (apiOperation[Unit]("postJobDisable")
      summary ""
      parameters(pathParam[String]("name").description(""), headerParam[String]("jenkinsCrumb").description("").optional)
  )

  post("/job/:name/disable",operation(postJobDisableOperation)) {
    
    
      val name = params.getOrElse("name", halt(400))
    
    println("name: " + name)
    
    
          val jenkinsCrumb = request.getHeader("jenkinsCrumb")

    println("jenkinsCrumb: " + jenkinsCrumb)
  }

  

  val postJobEnableOperation = (apiOperation[Unit]("postJobEnable")
      summary ""
      parameters(pathParam[String]("name").description(""), headerParam[String]("jenkinsCrumb").description("").optional)
  )

  post("/job/:name/enable",operation(postJobEnableOperation)) {
    
    
      val name = params.getOrElse("name", halt(400))
    
    println("name: " + name)
    
    
          val jenkinsCrumb = request.getHeader("jenkinsCrumb")

    println("jenkinsCrumb: " + jenkinsCrumb)
  }

  

  val postJobLastBuildStopOperation = (apiOperation[Unit]("postJobLastBuildStop")
      summary ""
      parameters(pathParam[String]("name").description(""), headerParam[String]("jenkinsCrumb").description("").optional)
  )

  post("/job/:name/lastBuild/stop",operation(postJobLastBuildStopOperation)) {
    
    
      val name = params.getOrElse("name", halt(400))
    
    println("name: " + name)
    
    
          val jenkinsCrumb = request.getHeader("jenkinsCrumb")

    println("jenkinsCrumb: " + jenkinsCrumb)
  }

  

  val postViewConfigOperation = (apiOperation[Unit]("postViewConfig")
      summary ""
      parameters(pathParam[String]("name").description(""), bodyParam[String]("body").description(""), headerParam[String]("jenkinsCrumb").description("").optional)
  )

  post("/view/:name/config.xml",operation(postViewConfigOperation)) {
    
    
      val name = params.getOrElse("name", halt(400))
    
    println("name: " + name)
    
    
          val body = parsedBody.extract[String]

    println("body: " + body)
    
    
          val jenkinsCrumb = request.getHeader("jenkinsCrumb")

    println("jenkinsCrumb: " + jenkinsCrumb)
  }

}
