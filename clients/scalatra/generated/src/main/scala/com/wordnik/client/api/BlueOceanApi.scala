/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.wordnik.client.api

import com.wordnik.client.model.GetMultibranchPipeline
import com.wordnik.client.model.GetOrganisations
import com.wordnik.client.model.GetPipelines
import com.wordnik.client.model.IojenkinsblueoceanrestimplpipelineBranchImpl
import com.wordnik.client.model.IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl
import com.wordnik.client.model.IojenkinsblueoceanserviceembeddedrestPipelineImpl
import com.wordnik.client.model.SwaggyjenkinsOrganisation
import com.wordnik.client.model.SwaggyjenkinsPipeline
import com.wordnik.client.model.SwaggyjenkinsUser

import java.io.File

import org.scalatra.{ TypedParamSupport, ScalatraServlet }
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{FileUploadSupport, MultipartConfig, SizeConstraintExceededException}

import scala.collection.JavaConverters._

class BlueOceanApi (implicit val swagger: Swagger) extends ScalatraServlet
    with FileUploadSupport
    with JacksonJsonSupport
    with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "BlueOceanApi"
  override protected val applicationName: Option[String] = Some("//BlueOcean")

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val getAuthenticatedUserOperation = (apiOperation[SwaggyjenkinsUser]("getAuthenticatedUser")
      summary ""
      parameters(pathParam[String]("organisation").description(""))
  )

  get("/blue/rest/organizations/:organisation/user/",operation(getAuthenticatedUserOperation)) {
    
    
      val organisation = params.getOrElse("organisation", halt(400))
    
    println("organisation: " + organisation)
  }

  

  val getClassesOperation = (apiOperation[String]("getClasses")
      summary ""
      parameters(pathParam[String]("_class").description(""))
  )

  get("/blue/rest/classes/:class",operation(getClassesOperation)) {
    
    
      val _class = params.getOrElse("_class", halt(400))
    
    println("_class: " + _class)
  }

  

  val getOrganisationOperation = (apiOperation[SwaggyjenkinsOrganisation]("getOrganisation")
      summary ""
      parameters(pathParam[String]("organisation").description(""))
  )

  get("/blue/rest/organizations/:organisation",operation(getOrganisationOperation)) {
    
    
      val organisation = params.getOrElse("organisation", halt(400))
    
    println("organisation: " + organisation)
  }

  

  val getOrganisationsOperation = (apiOperation[GetOrganisations]("getOrganisations")
      summary ""
      parameters()
  )

  get("/blue/rest/organizations/",operation(getOrganisationsOperation)) {
  }

  

  val getPipelineBranchByOrgOperation = (apiOperation[IojenkinsblueoceanrestimplpipelineBranchImpl]("getPipelineBranchByOrg")
      summary ""
      parameters(pathParam[String]("organisation").description(""), pathParam[String]("pipeline").description(""), pathParam[String]("branch").description(""))
  )

  get("/blue/rest/organizations/:organisation/pipelines/:pipeline/branches/:branch/",operation(getPipelineBranchByOrgOperation)) {
    
    
      val organisation = params.getOrElse("organisation", halt(400))
    
    println("organisation: " + organisation)
    
    
      val pipeline = params.getOrElse("pipeline", halt(400))
    
    println("pipeline: " + pipeline)
    
    
      val branch = params.getOrElse("branch", halt(400))
    
    println("branch: " + branch)
  }

  

  val getPipelineBranchesByOrgOperation = (apiOperation[GetMultibranchPipeline]("getPipelineBranchesByOrg")
      summary ""
      parameters(pathParam[String]("organisation").description(""), pathParam[String]("pipeline").description(""))
  )

  get("/blue/rest/organizations/:organisation/pipelines/:pipeline/branches",operation(getPipelineBranchesByOrgOperation)) {
    
    
      val organisation = params.getOrElse("organisation", halt(400))
    
    println("organisation: " + organisation)
    
    
      val pipeline = params.getOrElse("pipeline", halt(400))
    
    println("pipeline: " + pipeline)
  }

  

  val getPipelineByOrgOperation = (apiOperation[SwaggyjenkinsPipeline]("getPipelineByOrg")
      summary ""
      parameters(pathParam[String]("organisation").description(""), pathParam[String]("pipeline").description(""))
  )

  get("/blue/rest/organizations/:organisation/pipelines/:pipeline",operation(getPipelineByOrgOperation)) {
    
    
      val organisation = params.getOrElse("organisation", halt(400))
    
    println("organisation: " + organisation)
    
    
      val pipeline = params.getOrElse("pipeline", halt(400))
    
    println("pipeline: " + pipeline)
  }

  

  val getPipelineFolderByOrgOperation = (apiOperation[IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl]("getPipelineFolderByOrg")
      summary ""
      parameters(pathParam[String]("organisation").description(""), pathParam[String]("folder").description(""))
  )

  get("/blue/rest/organizations/:organisation/pipelines/:folder/",operation(getPipelineFolderByOrgOperation)) {
    
    
      val organisation = params.getOrElse("organisation", halt(400))
    
    println("organisation: " + organisation)
    
    
      val folder = params.getOrElse("folder", halt(400))
    
    println("folder: " + folder)
  }

  

  val getPipelineFolderByOrg_1Operation = (apiOperation[IojenkinsblueoceanserviceembeddedrestPipelineImpl]("getPipelineFolderByOrg_1")
      summary ""
      parameters(pathParam[String]("organisation").description(""), pathParam[String]("pipeline").description(""), pathParam[String]("folder").description(""))
  )

  get("/blue/rest/organizations/:organisation/pipelines/:folder/pipelines/:pipeline",operation(getPipelineFolderByOrg_1Operation)) {
    
    
      val organisation = params.getOrElse("organisation", halt(400))
    
    println("organisation: " + organisation)
    
    
      val pipeline = params.getOrElse("pipeline", halt(400))
    
    println("pipeline: " + pipeline)
    
    
      val folder = params.getOrElse("folder", halt(400))
    
    println("folder: " + folder)
  }

  

  val getPipelinesByOrgOperation = (apiOperation[GetPipelines]("getPipelinesByOrg")
      summary ""
      parameters(pathParam[String]("organisation").description(""))
  )

  get("/blue/rest/organizations/:organisation/pipelines/",operation(getPipelinesByOrgOperation)) {
    
    
      val organisation = params.getOrElse("organisation", halt(400))
    
    println("organisation: " + organisation)
  }

  

  val getUserOperation = (apiOperation[SwaggyjenkinsUser]("getUser")
      summary ""
      parameters(pathParam[String]("organisation").description(""), pathParam[String]("user").description(""))
  )

  get("/blue/rest/organizations/:organisation/users/:user",operation(getUserOperation)) {
    
    
      val organisation = params.getOrElse("organisation", halt(400))
    
    println("organisation: " + organisation)
    
    
      val user = params.getOrElse("user", halt(400))
    
    println("user: " + user)
  }

  

  val getUsersOperation = (apiOperation[SwaggyjenkinsUser]("getUsers")
      summary ""
      parameters(pathParam[String]("organisation").description(""))
  )

  get("/blue/rest/organizations/:organisation/users/",operation(getUsersOperation)) {
    
    
      val organisation = params.getOrElse("organisation", halt(400))
    
    println("organisation: " + organisation)
  }

  

  val searchOperation = (apiOperation[String]("search")
      summary ""
      parameters(queryParam[String]("q").description(""))
  )

  get("/blue/rest/classes/",operation(searchOperation)) {
    
    
                val q = params.getAs[String]("q")

    println("q: " + q)
  }

  

  val search_2Operation = (apiOperation[String]("search_2")
      summary ""
      parameters(queryParam[String]("q").description(""))
  )

  get("/blue/rest/search/",operation(search_2Operation)) {
    
    
                val q = params.getAs[String]("q")

    println("q: " + q)
  }

}
