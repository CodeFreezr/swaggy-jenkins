/* 
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HudsonmodelHudsonMasterComputerMonitorData
    /// </summary>
    [DataContract]
    public partial class HudsonmodelHudsonMasterComputerMonitorData :  IEquatable<HudsonmodelHudsonMasterComputerMonitorData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HudsonmodelHudsonMasterComputerMonitorData" /> class.
        /// </summary>
        /// <param name="HudsonNodeMonitorsSwapSpaceMonitor">HudsonNodeMonitorsSwapSpaceMonitor.</param>
        /// <param name="HudsonNodeMonitorsTemporarySpaceMonitor">HudsonNodeMonitorsTemporarySpaceMonitor.</param>
        /// <param name="HudsonNodeMonitorsDiskSpaceMonitor">HudsonNodeMonitorsDiskSpaceMonitor.</param>
        /// <param name="HudsonNodeMonitorsArchitectureMonitor">HudsonNodeMonitorsArchitectureMonitor.</param>
        /// <param name="HudsonNodeMonitorsResponseTimeMonitor">HudsonNodeMonitorsResponseTimeMonitor.</param>
        /// <param name="HudsonNodeMonitorsClockMonitor">HudsonNodeMonitorsClockMonitor.</param>
        /// <param name="_Class">_Class.</param>
        public HudsonmodelHudsonMasterComputerMonitorData(HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2 HudsonNodeMonitorsSwapSpaceMonitor = default(HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2), HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace HudsonNodeMonitorsTemporarySpaceMonitor = default(HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace), HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace HudsonNodeMonitorsDiskSpaceMonitor = default(HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace), string HudsonNodeMonitorsArchitectureMonitor = default(string), HudsonnodeMonitorsResponseTimeMonitorData HudsonNodeMonitorsResponseTimeMonitor = default(HudsonnodeMonitorsResponseTimeMonitorData), HudsonutilClockDifference HudsonNodeMonitorsClockMonitor = default(HudsonutilClockDifference), string _Class = default(string))
        {
            this.HudsonNodeMonitorsSwapSpaceMonitor = HudsonNodeMonitorsSwapSpaceMonitor;
            this.HudsonNodeMonitorsTemporarySpaceMonitor = HudsonNodeMonitorsTemporarySpaceMonitor;
            this.HudsonNodeMonitorsDiskSpaceMonitor = HudsonNodeMonitorsDiskSpaceMonitor;
            this.HudsonNodeMonitorsArchitectureMonitor = HudsonNodeMonitorsArchitectureMonitor;
            this.HudsonNodeMonitorsResponseTimeMonitor = HudsonNodeMonitorsResponseTimeMonitor;
            this.HudsonNodeMonitorsClockMonitor = HudsonNodeMonitorsClockMonitor;
            this._Class = _Class;
        }
        
        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsSwapSpaceMonitor
        /// </summary>
        [DataMember(Name="hudson.node_monitors.SwapSpaceMonitor", EmitDefaultValue=false)]
        public HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2 HudsonNodeMonitorsSwapSpaceMonitor { get; set; }
        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsTemporarySpaceMonitor
        /// </summary>
        [DataMember(Name="hudson.node_monitors.TemporarySpaceMonitor", EmitDefaultValue=false)]
        public HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace HudsonNodeMonitorsTemporarySpaceMonitor { get; set; }
        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsDiskSpaceMonitor
        /// </summary>
        [DataMember(Name="hudson.node_monitors.DiskSpaceMonitor", EmitDefaultValue=false)]
        public HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace HudsonNodeMonitorsDiskSpaceMonitor { get; set; }
        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsArchitectureMonitor
        /// </summary>
        [DataMember(Name="hudson.node_monitors.ArchitectureMonitor", EmitDefaultValue=false)]
        public string HudsonNodeMonitorsArchitectureMonitor { get; set; }
        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsResponseTimeMonitor
        /// </summary>
        [DataMember(Name="hudson.node_monitors.ResponseTimeMonitor", EmitDefaultValue=false)]
        public HudsonnodeMonitorsResponseTimeMonitorData HudsonNodeMonitorsResponseTimeMonitor { get; set; }
        /// <summary>
        /// Gets or Sets HudsonNodeMonitorsClockMonitor
        /// </summary>
        [DataMember(Name="hudson.node_monitors.ClockMonitor", EmitDefaultValue=false)]
        public HudsonutilClockDifference HudsonNodeMonitorsClockMonitor { get; set; }
        /// <summary>
        /// Gets or Sets _Class
        /// </summary>
        [DataMember(Name="_class", EmitDefaultValue=false)]
        public string _Class { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HudsonmodelHudsonMasterComputerMonitorData {\n");
            sb.Append("  HudsonNodeMonitorsSwapSpaceMonitor: ").Append(HudsonNodeMonitorsSwapSpaceMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsTemporarySpaceMonitor: ").Append(HudsonNodeMonitorsTemporarySpaceMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsDiskSpaceMonitor: ").Append(HudsonNodeMonitorsDiskSpaceMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsArchitectureMonitor: ").Append(HudsonNodeMonitorsArchitectureMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsResponseTimeMonitor: ").Append(HudsonNodeMonitorsResponseTimeMonitor).Append("\n");
            sb.Append("  HudsonNodeMonitorsClockMonitor: ").Append(HudsonNodeMonitorsClockMonitor).Append("\n");
            sb.Append("  _Class: ").Append(_Class).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HudsonmodelHudsonMasterComputerMonitorData);
        }

        /// <summary>
        /// Returns true if HudsonmodelHudsonMasterComputerMonitorData instances are equal
        /// </summary>
        /// <param name="other">Instance of HudsonmodelHudsonMasterComputerMonitorData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HudsonmodelHudsonMasterComputerMonitorData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.HudsonNodeMonitorsSwapSpaceMonitor == other.HudsonNodeMonitorsSwapSpaceMonitor ||
                    this.HudsonNodeMonitorsSwapSpaceMonitor != null &&
                    this.HudsonNodeMonitorsSwapSpaceMonitor.Equals(other.HudsonNodeMonitorsSwapSpaceMonitor)
                ) && 
                (
                    this.HudsonNodeMonitorsTemporarySpaceMonitor == other.HudsonNodeMonitorsTemporarySpaceMonitor ||
                    this.HudsonNodeMonitorsTemporarySpaceMonitor != null &&
                    this.HudsonNodeMonitorsTemporarySpaceMonitor.Equals(other.HudsonNodeMonitorsTemporarySpaceMonitor)
                ) && 
                (
                    this.HudsonNodeMonitorsDiskSpaceMonitor == other.HudsonNodeMonitorsDiskSpaceMonitor ||
                    this.HudsonNodeMonitorsDiskSpaceMonitor != null &&
                    this.HudsonNodeMonitorsDiskSpaceMonitor.Equals(other.HudsonNodeMonitorsDiskSpaceMonitor)
                ) && 
                (
                    this.HudsonNodeMonitorsArchitectureMonitor == other.HudsonNodeMonitorsArchitectureMonitor ||
                    this.HudsonNodeMonitorsArchitectureMonitor != null &&
                    this.HudsonNodeMonitorsArchitectureMonitor.Equals(other.HudsonNodeMonitorsArchitectureMonitor)
                ) && 
                (
                    this.HudsonNodeMonitorsResponseTimeMonitor == other.HudsonNodeMonitorsResponseTimeMonitor ||
                    this.HudsonNodeMonitorsResponseTimeMonitor != null &&
                    this.HudsonNodeMonitorsResponseTimeMonitor.Equals(other.HudsonNodeMonitorsResponseTimeMonitor)
                ) && 
                (
                    this.HudsonNodeMonitorsClockMonitor == other.HudsonNodeMonitorsClockMonitor ||
                    this.HudsonNodeMonitorsClockMonitor != null &&
                    this.HudsonNodeMonitorsClockMonitor.Equals(other.HudsonNodeMonitorsClockMonitor)
                ) && 
                (
                    this._Class == other._Class ||
                    this._Class != null &&
                    this._Class.Equals(other._Class)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.HudsonNodeMonitorsSwapSpaceMonitor != null)
                    hash = hash * 59 + this.HudsonNodeMonitorsSwapSpaceMonitor.GetHashCode();
                if (this.HudsonNodeMonitorsTemporarySpaceMonitor != null)
                    hash = hash * 59 + this.HudsonNodeMonitorsTemporarySpaceMonitor.GetHashCode();
                if (this.HudsonNodeMonitorsDiskSpaceMonitor != null)
                    hash = hash * 59 + this.HudsonNodeMonitorsDiskSpaceMonitor.GetHashCode();
                if (this.HudsonNodeMonitorsArchitectureMonitor != null)
                    hash = hash * 59 + this.HudsonNodeMonitorsArchitectureMonitor.GetHashCode();
                if (this.HudsonNodeMonitorsResponseTimeMonitor != null)
                    hash = hash * 59 + this.HudsonNodeMonitorsResponseTimeMonitor.GetHashCode();
                if (this.HudsonNodeMonitorsClockMonitor != null)
                    hash = hash * 59 + this.HudsonNodeMonitorsClockMonitor.GetHashCode();
                if (this._Class != null)
                    hash = hash * 59 + this._Class.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
