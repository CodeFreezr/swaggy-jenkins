/* 
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HudsonMasterComputerexecutors
    /// </summary>
    [DataContract]
    public partial class HudsonMasterComputerexecutors :  IEquatable<HudsonMasterComputerexecutors>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HudsonMasterComputerexecutors" /> class.
        /// </summary>
        /// <param name="CurrentExecutable">CurrentExecutable.</param>
        /// <param name="Idle">Idle.</param>
        /// <param name="LikelyStuck">LikelyStuck.</param>
        /// <param name="Number">Number.</param>
        /// <param name="Progress">Progress.</param>
        /// <param name="_Class">_Class.</param>
        public HudsonMasterComputerexecutors(FreeStyleBuild CurrentExecutable = default(FreeStyleBuild), bool? Idle = default(bool?), bool? LikelyStuck = default(bool?), int? Number = default(int?), int? Progress = default(int?), string _Class = default(string))
        {
            this.CurrentExecutable = CurrentExecutable;
            this.Idle = Idle;
            this.LikelyStuck = LikelyStuck;
            this.Number = Number;
            this.Progress = Progress;
            this._Class = _Class;
        }
        
        /// <summary>
        /// Gets or Sets CurrentExecutable
        /// </summary>
        [DataMember(Name="currentExecutable", EmitDefaultValue=false)]
        public FreeStyleBuild CurrentExecutable { get; set; }

        /// <summary>
        /// Gets or Sets Idle
        /// </summary>
        [DataMember(Name="idle", EmitDefaultValue=false)]
        public bool? Idle { get; set; }

        /// <summary>
        /// Gets or Sets LikelyStuck
        /// </summary>
        [DataMember(Name="likelyStuck", EmitDefaultValue=false)]
        public bool? LikelyStuck { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public int? Number { get; set; }

        /// <summary>
        /// Gets or Sets Progress
        /// </summary>
        [DataMember(Name="progress", EmitDefaultValue=false)]
        public int? Progress { get; set; }

        /// <summary>
        /// Gets or Sets _Class
        /// </summary>
        [DataMember(Name="_class", EmitDefaultValue=false)]
        public string _Class { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HudsonMasterComputerexecutors {\n");
            sb.Append("  CurrentExecutable: ").Append(CurrentExecutable).Append("\n");
            sb.Append("  Idle: ").Append(Idle).Append("\n");
            sb.Append("  LikelyStuck: ").Append(LikelyStuck).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  _Class: ").Append(_Class).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HudsonMasterComputerexecutors);
        }

        /// <summary>
        /// Returns true if HudsonMasterComputerexecutors instances are equal
        /// </summary>
        /// <param name="input">Instance of HudsonMasterComputerexecutors to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HudsonMasterComputerexecutors input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentExecutable == input.CurrentExecutable ||
                    (this.CurrentExecutable != null &&
                    this.CurrentExecutable.Equals(input.CurrentExecutable))
                ) && 
                (
                    this.Idle == input.Idle ||
                    (this.Idle != null &&
                    this.Idle.Equals(input.Idle))
                ) && 
                (
                    this.LikelyStuck == input.LikelyStuck ||
                    (this.LikelyStuck != null &&
                    this.LikelyStuck.Equals(input.LikelyStuck))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Progress == input.Progress ||
                    (this.Progress != null &&
                    this.Progress.Equals(input.Progress))
                ) && 
                (
                    this._Class == input._Class ||
                    (this._Class != null &&
                    this._Class.Equals(input._Class))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentExecutable != null)
                    hashCode = hashCode * 59 + this.CurrentExecutable.GetHashCode();
                if (this.Idle != null)
                    hashCode = hashCode * 59 + this.Idle.GetHashCode();
                if (this.LikelyStuck != null)
                    hashCode = hashCode * 59 + this.LikelyStuck.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Progress != null)
                    hashCode = hashCode * 59 + this.Progress.GetHashCode();
                if (this._Class != null)
                    hashCode = hashCode * 59 + this._Class.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
