/* 
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// QueueBlockedItem
    /// </summary>
    [DataContract]
    public partial class QueueBlockedItem :  IEquatable<QueueBlockedItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="QueueBlockedItem" /> class.
        /// </summary>
        /// <param name="_Class">_Class.</param>
        /// <param name="Actions">Actions.</param>
        /// <param name="Blocked">Blocked.</param>
        /// <param name="Buildable">Buildable.</param>
        /// <param name="Id">Id.</param>
        /// <param name="InQueueSince">InQueueSince.</param>
        /// <param name="_Params">_Params.</param>
        /// <param name="Stuck">Stuck.</param>
        /// <param name="Task">Task.</param>
        /// <param name="Url">Url.</param>
        /// <param name="Why">Why.</param>
        /// <param name="BuildableStartMilliseconds">BuildableStartMilliseconds.</param>
        public QueueBlockedItem(string _Class = default(string), List<CauseAction> Actions = default(List<CauseAction>), bool? Blocked = default(bool?), bool? Buildable = default(bool?), int? Id = default(int?), int? InQueueSince = default(int?), string _Params = default(string), bool? Stuck = default(bool?), FreeStyleProject Task = default(FreeStyleProject), string Url = default(string), string Why = default(string), int? BuildableStartMilliseconds = default(int?))
        {
            this._Class = _Class;
            this.Actions = Actions;
            this.Blocked = Blocked;
            this.Buildable = Buildable;
            this.Id = Id;
            this.InQueueSince = InQueueSince;
            this._Params = _Params;
            this.Stuck = Stuck;
            this.Task = Task;
            this.Url = Url;
            this.Why = Why;
            this.BuildableStartMilliseconds = BuildableStartMilliseconds;
        }
        
        /// <summary>
        /// Gets or Sets _Class
        /// </summary>
        [DataMember(Name="_class", EmitDefaultValue=false)]
        public string _Class { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public List<CauseAction> Actions { get; set; }

        /// <summary>
        /// Gets or Sets Blocked
        /// </summary>
        [DataMember(Name="blocked", EmitDefaultValue=false)]
        public bool? Blocked { get; set; }

        /// <summary>
        /// Gets or Sets Buildable
        /// </summary>
        [DataMember(Name="buildable", EmitDefaultValue=false)]
        public bool? Buildable { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets InQueueSince
        /// </summary>
        [DataMember(Name="inQueueSince", EmitDefaultValue=false)]
        public int? InQueueSince { get; set; }

        /// <summary>
        /// Gets or Sets _Params
        /// </summary>
        [DataMember(Name="params", EmitDefaultValue=false)]
        public string _Params { get; set; }

        /// <summary>
        /// Gets or Sets Stuck
        /// </summary>
        [DataMember(Name="stuck", EmitDefaultValue=false)]
        public bool? Stuck { get; set; }

        /// <summary>
        /// Gets or Sets Task
        /// </summary>
        [DataMember(Name="task", EmitDefaultValue=false)]
        public FreeStyleProject Task { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Why
        /// </summary>
        [DataMember(Name="why", EmitDefaultValue=false)]
        public string Why { get; set; }

        /// <summary>
        /// Gets or Sets BuildableStartMilliseconds
        /// </summary>
        [DataMember(Name="buildableStartMilliseconds", EmitDefaultValue=false)]
        public int? BuildableStartMilliseconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class QueueBlockedItem {\n");
            sb.Append("  _Class: ").Append(_Class).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Blocked: ").Append(Blocked).Append("\n");
            sb.Append("  Buildable: ").Append(Buildable).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InQueueSince: ").Append(InQueueSince).Append("\n");
            sb.Append("  _Params: ").Append(_Params).Append("\n");
            sb.Append("  Stuck: ").Append(Stuck).Append("\n");
            sb.Append("  Task: ").Append(Task).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Why: ").Append(Why).Append("\n");
            sb.Append("  BuildableStartMilliseconds: ").Append(BuildableStartMilliseconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as QueueBlockedItem);
        }

        /// <summary>
        /// Returns true if QueueBlockedItem instances are equal
        /// </summary>
        /// <param name="input">Instance of QueueBlockedItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(QueueBlockedItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._Class == input._Class ||
                    (this._Class != null &&
                    this._Class.Equals(input._Class))
                ) && 
                (
                    this.Actions == input.Actions ||
                    (this.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions))
                ) && 
                (
                    this.Blocked == input.Blocked ||
                    (this.Blocked != null &&
                    this.Blocked.Equals(input.Blocked))
                ) && 
                (
                    this.Buildable == input.Buildable ||
                    (this.Buildable != null &&
                    this.Buildable.Equals(input.Buildable))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.InQueueSince == input.InQueueSince ||
                    (this.InQueueSince != null &&
                    this.InQueueSince.Equals(input.InQueueSince))
                ) && 
                (
                    this._Params == input._Params ||
                    (this._Params != null &&
                    this._Params.Equals(input._Params))
                ) && 
                (
                    this.Stuck == input.Stuck ||
                    (this.Stuck != null &&
                    this.Stuck.Equals(input.Stuck))
                ) && 
                (
                    this.Task == input.Task ||
                    (this.Task != null &&
                    this.Task.Equals(input.Task))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Why == input.Why ||
                    (this.Why != null &&
                    this.Why.Equals(input.Why))
                ) && 
                (
                    this.BuildableStartMilliseconds == input.BuildableStartMilliseconds ||
                    (this.BuildableStartMilliseconds != null &&
                    this.BuildableStartMilliseconds.Equals(input.BuildableStartMilliseconds))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._Class != null)
                    hashCode = hashCode * 59 + this._Class.GetHashCode();
                if (this.Actions != null)
                    hashCode = hashCode * 59 + this.Actions.GetHashCode();
                if (this.Blocked != null)
                    hashCode = hashCode * 59 + this.Blocked.GetHashCode();
                if (this.Buildable != null)
                    hashCode = hashCode * 59 + this.Buildable.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.InQueueSince != null)
                    hashCode = hashCode * 59 + this.InQueueSince.GetHashCode();
                if (this._Params != null)
                    hashCode = hashCode * 59 + this._Params.GetHashCode();
                if (this.Stuck != null)
                    hashCode = hashCode * 59 + this.Stuck.GetHashCode();
                if (this.Task != null)
                    hashCode = hashCode * 59 + this.Task.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Why != null)
                    hashCode = hashCode * 59 + this.Why.GetHashCode();
                if (this.BuildableStartMilliseconds != null)
                    hashCode = hashCode * 59 + this.BuildableStartMilliseconds.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
