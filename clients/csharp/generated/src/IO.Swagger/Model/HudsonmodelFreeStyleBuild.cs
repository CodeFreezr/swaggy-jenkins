/* 
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HudsonmodelFreeStyleBuild
    /// </summary>
    [DataContract]
    public partial class HudsonmodelFreeStyleBuild :  IEquatable<HudsonmodelFreeStyleBuild>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HudsonmodelFreeStyleBuild" /> class.
        /// </summary>
        /// <param name="_Class">_Class.</param>
        /// <param name="Number">Number.</param>
        /// <param name="Url">Url.</param>
        /// <param name="Actions">Actions.</param>
        /// <param name="Building">Building.</param>
        /// <param name="Description">Description.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="Duration">Duration.</param>
        /// <param name="EstimatedDuration">EstimatedDuration.</param>
        /// <param name="Executor">Executor.</param>
        /// <param name="FullDisplayName">FullDisplayName.</param>
        /// <param name="Id">Id.</param>
        /// <param name="KeepLog">KeepLog.</param>
        /// <param name="QueueId">QueueId.</param>
        /// <param name="Result">Result.</param>
        /// <param name="Timestamp">Timestamp.</param>
        /// <param name="BuiltOn">BuiltOn.</param>
        /// <param name="ChangeSet">ChangeSet.</param>
        public HudsonmodelFreeStyleBuild(string _Class = default(string), int? Number = default(int?), string Url = default(string), List<HudsonmodelCauseAction> Actions = default(List<HudsonmodelCauseAction>), bool? Building = default(bool?), string Description = default(string), string DisplayName = default(string), int? Duration = default(int?), int? EstimatedDuration = default(int?), string Executor = default(string), string FullDisplayName = default(string), string Id = default(string), bool? KeepLog = default(bool?), int? QueueId = default(int?), string Result = default(string), int? Timestamp = default(int?), string BuiltOn = default(string), HudsonscmEmptyChangeLogSet ChangeSet = default(HudsonscmEmptyChangeLogSet))
        {
            this._Class = _Class;
            this.Number = Number;
            this.Url = Url;
            this.Actions = Actions;
            this.Building = Building;
            this.Description = Description;
            this.DisplayName = DisplayName;
            this.Duration = Duration;
            this.EstimatedDuration = EstimatedDuration;
            this.Executor = Executor;
            this.FullDisplayName = FullDisplayName;
            this.Id = Id;
            this.KeepLog = KeepLog;
            this.QueueId = QueueId;
            this.Result = Result;
            this.Timestamp = Timestamp;
            this.BuiltOn = BuiltOn;
            this.ChangeSet = ChangeSet;
        }
        
        /// <summary>
        /// Gets or Sets _Class
        /// </summary>
        [DataMember(Name="_class", EmitDefaultValue=false)]
        public string _Class { get; set; }
        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public int? Number { get; set; }
        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }
        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public List<HudsonmodelCauseAction> Actions { get; set; }
        /// <summary>
        /// Gets or Sets Building
        /// </summary>
        [DataMember(Name="building", EmitDefaultValue=false)]
        public bool? Building { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }
        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public int? Duration { get; set; }
        /// <summary>
        /// Gets or Sets EstimatedDuration
        /// </summary>
        [DataMember(Name="estimatedDuration", EmitDefaultValue=false)]
        public int? EstimatedDuration { get; set; }
        /// <summary>
        /// Gets or Sets Executor
        /// </summary>
        [DataMember(Name="executor", EmitDefaultValue=false)]
        public string Executor { get; set; }
        /// <summary>
        /// Gets or Sets FullDisplayName
        /// </summary>
        [DataMember(Name="fullDisplayName", EmitDefaultValue=false)]
        public string FullDisplayName { get; set; }
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }
        /// <summary>
        /// Gets or Sets KeepLog
        /// </summary>
        [DataMember(Name="keepLog", EmitDefaultValue=false)]
        public bool? KeepLog { get; set; }
        /// <summary>
        /// Gets or Sets QueueId
        /// </summary>
        [DataMember(Name="queueId", EmitDefaultValue=false)]
        public int? QueueId { get; set; }
        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [DataMember(Name="result", EmitDefaultValue=false)]
        public string Result { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="timestamp", EmitDefaultValue=false)]
        public int? Timestamp { get; set; }
        /// <summary>
        /// Gets or Sets BuiltOn
        /// </summary>
        [DataMember(Name="builtOn", EmitDefaultValue=false)]
        public string BuiltOn { get; set; }
        /// <summary>
        /// Gets or Sets ChangeSet
        /// </summary>
        [DataMember(Name="changeSet", EmitDefaultValue=false)]
        public HudsonscmEmptyChangeLogSet ChangeSet { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HudsonmodelFreeStyleBuild {\n");
            sb.Append("  _Class: ").Append(_Class).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Building: ").Append(Building).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  EstimatedDuration: ").Append(EstimatedDuration).Append("\n");
            sb.Append("  Executor: ").Append(Executor).Append("\n");
            sb.Append("  FullDisplayName: ").Append(FullDisplayName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  KeepLog: ").Append(KeepLog).Append("\n");
            sb.Append("  QueueId: ").Append(QueueId).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  BuiltOn: ").Append(BuiltOn).Append("\n");
            sb.Append("  ChangeSet: ").Append(ChangeSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HudsonmodelFreeStyleBuild);
        }

        /// <summary>
        /// Returns true if HudsonmodelFreeStyleBuild instances are equal
        /// </summary>
        /// <param name="other">Instance of HudsonmodelFreeStyleBuild to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HudsonmodelFreeStyleBuild other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this._Class == other._Class ||
                    this._Class != null &&
                    this._Class.Equals(other._Class)
                ) && 
                (
                    this.Number == other.Number ||
                    this.Number != null &&
                    this.Number.Equals(other.Number)
                ) && 
                (
                    this.Url == other.Url ||
                    this.Url != null &&
                    this.Url.Equals(other.Url)
                ) && 
                (
                    this.Actions == other.Actions ||
                    this.Actions != null &&
                    this.Actions.SequenceEqual(other.Actions)
                ) && 
                (
                    this.Building == other.Building ||
                    this.Building != null &&
                    this.Building.Equals(other.Building)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.Duration == other.Duration ||
                    this.Duration != null &&
                    this.Duration.Equals(other.Duration)
                ) && 
                (
                    this.EstimatedDuration == other.EstimatedDuration ||
                    this.EstimatedDuration != null &&
                    this.EstimatedDuration.Equals(other.EstimatedDuration)
                ) && 
                (
                    this.Executor == other.Executor ||
                    this.Executor != null &&
                    this.Executor.Equals(other.Executor)
                ) && 
                (
                    this.FullDisplayName == other.FullDisplayName ||
                    this.FullDisplayName != null &&
                    this.FullDisplayName.Equals(other.FullDisplayName)
                ) && 
                (
                    this.Id == other.Id ||
                    this.Id != null &&
                    this.Id.Equals(other.Id)
                ) && 
                (
                    this.KeepLog == other.KeepLog ||
                    this.KeepLog != null &&
                    this.KeepLog.Equals(other.KeepLog)
                ) && 
                (
                    this.QueueId == other.QueueId ||
                    this.QueueId != null &&
                    this.QueueId.Equals(other.QueueId)
                ) && 
                (
                    this.Result == other.Result ||
                    this.Result != null &&
                    this.Result.Equals(other.Result)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.BuiltOn == other.BuiltOn ||
                    this.BuiltOn != null &&
                    this.BuiltOn.Equals(other.BuiltOn)
                ) && 
                (
                    this.ChangeSet == other.ChangeSet ||
                    this.ChangeSet != null &&
                    this.ChangeSet.Equals(other.ChangeSet)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this._Class != null)
                    hash = hash * 59 + this._Class.GetHashCode();
                if (this.Number != null)
                    hash = hash * 59 + this.Number.GetHashCode();
                if (this.Url != null)
                    hash = hash * 59 + this.Url.GetHashCode();
                if (this.Actions != null)
                    hash = hash * 59 + this.Actions.GetHashCode();
                if (this.Building != null)
                    hash = hash * 59 + this.Building.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.Duration != null)
                    hash = hash * 59 + this.Duration.GetHashCode();
                if (this.EstimatedDuration != null)
                    hash = hash * 59 + this.EstimatedDuration.GetHashCode();
                if (this.Executor != null)
                    hash = hash * 59 + this.Executor.GetHashCode();
                if (this.FullDisplayName != null)
                    hash = hash * 59 + this.FullDisplayName.GetHashCode();
                if (this.Id != null)
                    hash = hash * 59 + this.Id.GetHashCode();
                if (this.KeepLog != null)
                    hash = hash * 59 + this.KeepLog.GetHashCode();
                if (this.QueueId != null)
                    hash = hash * 59 + this.QueueId.GetHashCode();
                if (this.Result != null)
                    hash = hash * 59 + this.Result.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.BuiltOn != null)
                    hash = hash * 59 + this.BuiltOn.GetHashCode();
                if (this.ChangeSet != null)
                    hash = hash * 59 + this.ChangeSet.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
