// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public enum ErrorResponse : ErrorType {
    case Error(Int, NSData?, ErrorType)
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.locale = NSLocale(localeIdentifier:"en_US_POSIX")
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [GetClassesByClass]
            Decoders.addDecoder(clazz: [GetClassesByClass].self) { (source: AnyObject) -> [GetClassesByClass] in
                return Decoders.decode(clazz: [GetClassesByClass].self, source: source)
            }
            // Decoder for GetClassesByClass
            Decoders.addDecoder(clazz: GetClassesByClass.self) { (source: AnyObject) -> GetClassesByClass in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetClassesByClass()
                instance.classes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["classes"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [GetMultibranchPipeline]
            Decoders.addDecoder(clazz: [GetMultibranchPipeline].self) { (source: AnyObject) -> [GetMultibranchPipeline] in
                return Decoders.decode(clazz: [GetMultibranchPipeline].self, source: source)
            }
            // Decoder for GetMultibranchPipeline
            Decoders.addDecoder(clazz: GetMultibranchPipeline.self) { (source: AnyObject) -> GetMultibranchPipeline in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetMultibranchPipeline()
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"])
                instance.latestRun = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["latestRun"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.weatherScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"])
                instance.branchNames = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["branchNames"])
                instance.numberOfFailingBranches = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfFailingBranches"])
                instance.numberOfFailingPullRequests = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfFailingPullRequests"])
                instance.numberOfSuccessfulBranches = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfSuccessfulBranches"])
                instance.numberOfSuccessfulPullRequests = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfSuccessfulPullRequests"])
                instance.totalNumberOfBranches = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalNumberOfBranches"])
                instance.totalNumberOfPullRequests = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalNumberOfPullRequests"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [GetOrganisations]
            Decoders.addDecoder(clazz: [GetOrganisations].self) { (source: AnyObject) -> [GetOrganisations] in
                return Decoders.decode(clazz: [GetOrganisations].self, source: source)
            }
            // Decoder for GetOrganisations
            Decoders.addDecoder(clazz: GetOrganisations.self) { (source: AnyObject) -> GetOrganisations in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetOrganisations()
                return instance
            }


            // Decoder for [GetPipelineBranches]
            Decoders.addDecoder(clazz: [GetPipelineBranches].self) { (source: AnyObject) -> [GetPipelineBranches] in
                return Decoders.decode(clazz: [GetPipelineBranches].self, source: source)
            }
            // Decoder for GetPipelineBranches
            Decoders.addDecoder(clazz: GetPipelineBranches.self) { (source: AnyObject) -> GetPipelineBranches in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetPipelineBranches()
                return instance
            }


            // Decoder for [GetPipelineBranchesitem]
            Decoders.addDecoder(clazz: [GetPipelineBranchesitem].self) { (source: AnyObject) -> [GetPipelineBranchesitem] in
                return Decoders.decode(clazz: [GetPipelineBranchesitem].self, source: source)
            }
            // Decoder for GetPipelineBranchesitem
            Decoders.addDecoder(clazz: GetPipelineBranchesitem.self) { (source: AnyObject) -> GetPipelineBranchesitem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetPipelineBranchesitem()
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.weatherScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"])
                instance.latestRun = Decoders.decodeOptional(clazz: GetPipelineBranchesitemLatestRun.self, source: sourceDictionary["latestRun"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.pullRequest = Decoders.decodeOptional(clazz: GetPipelineBranchesitemPullRequest.self, source: sourceDictionary["pullRequest"])
                instance.totalNumberOfPullRequests = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalNumberOfPullRequests"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [GetPipelineBranchesitemLatestRun]
            Decoders.addDecoder(clazz: [GetPipelineBranchesitemLatestRun].self) { (source: AnyObject) -> [GetPipelineBranchesitemLatestRun] in
                return Decoders.decode(clazz: [GetPipelineBranchesitemLatestRun].self, source: source)
            }
            // Decoder for GetPipelineBranchesitemLatestRun
            Decoders.addDecoder(clazz: GetPipelineBranchesitemLatestRun.self) { (source: AnyObject) -> GetPipelineBranchesitemLatestRun in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetPipelineBranchesitemLatestRun()
                instance.durationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"])
                instance.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"])
                instance.enQueueTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enQueueTime"])
                instance.endTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endTime"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.pipeline = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pipeline"])
                instance.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"])
                instance.runSummary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["runSummary"])
                instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.commitId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commitId"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [GetPipelineBranchesitemPullRequest]
            Decoders.addDecoder(clazz: [GetPipelineBranchesitemPullRequest].self) { (source: AnyObject) -> [GetPipelineBranchesitemPullRequest] in
                return Decoders.decode(clazz: [GetPipelineBranchesitemPullRequest].self, source: source)
            }
            // Decoder for GetPipelineBranchesitemPullRequest
            Decoders.addDecoder(clazz: GetPipelineBranchesitemPullRequest.self) { (source: AnyObject) -> GetPipelineBranchesitemPullRequest in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetPipelineBranchesitemPullRequest()
                instance.links = Decoders.decodeOptional(clazz: GetPipelineBranchesitemPullRequestLinks.self, source: sourceDictionary["_links"])
                instance.author = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["author"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.title = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["title"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [GetPipelineBranchesitemPullRequestLinks]
            Decoders.addDecoder(clazz: [GetPipelineBranchesitemPullRequestLinks].self) { (source: AnyObject) -> [GetPipelineBranchesitemPullRequestLinks] in
                return Decoders.decode(clazz: [GetPipelineBranchesitemPullRequestLinks].self, source: source)
            }
            // Decoder for GetPipelineBranchesitemPullRequestLinks
            Decoders.addDecoder(clazz: GetPipelineBranchesitemPullRequestLinks.self) { (source: AnyObject) -> GetPipelineBranchesitemPullRequestLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetPipelineBranchesitemPullRequestLinks()
                instance._self = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["self"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [GetPipelines]
            Decoders.addDecoder(clazz: [GetPipelines].self) { (source: AnyObject) -> [GetPipelines] in
                return Decoders.decode(clazz: [GetPipelines].self, source: source)
            }
            // Decoder for GetPipelines
            Decoders.addDecoder(clazz: GetPipelines.self) { (source: AnyObject) -> GetPipelines in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetPipelines()
                return instance
            }


            // Decoder for [GetUsers]
            Decoders.addDecoder(clazz: [GetUsers].self) { (source: AnyObject) -> [GetUsers] in
                return Decoders.decode(clazz: [GetUsers].self, source: source)
            }
            // Decoder for GetUsers
            Decoders.addDecoder(clazz: GetUsers.self) { (source: AnyObject) -> GetUsers in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = GetUsers()
                return instance
            }


            // Decoder for [HudsonmodelAllView]
            Decoders.addDecoder(clazz: [HudsonmodelAllView].self) { (source: AnyObject) -> [HudsonmodelAllView] in
                return Decoders.decode(clazz: [HudsonmodelAllView].self, source: source)
            }
            // Decoder for HudsonmodelAllView
            Decoders.addDecoder(clazz: HudsonmodelAllView.self) { (source: AnyObject) -> HudsonmodelAllView in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelAllView()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [HudsonmodelCauseAction]
            Decoders.addDecoder(clazz: [HudsonmodelCauseAction].self) { (source: AnyObject) -> [HudsonmodelCauseAction] in
                return Decoders.decode(clazz: [HudsonmodelCauseAction].self, source: source)
            }
            // Decoder for HudsonmodelCauseAction
            Decoders.addDecoder(clazz: HudsonmodelCauseAction.self) { (source: AnyObject) -> HudsonmodelCauseAction in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelCauseAction()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.causes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["causes"])
                return instance
            }


            // Decoder for [HudsonmodelCauseUserIdCause]
            Decoders.addDecoder(clazz: [HudsonmodelCauseUserIdCause].self) { (source: AnyObject) -> [HudsonmodelCauseUserIdCause] in
                return Decoders.decode(clazz: [HudsonmodelCauseUserIdCause].self, source: source)
            }
            // Decoder for HudsonmodelCauseUserIdCause
            Decoders.addDecoder(clazz: HudsonmodelCauseUserIdCause.self) { (source: AnyObject) -> HudsonmodelCauseUserIdCause in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelCauseUserIdCause()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.shortDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["shortDescription"])
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.userName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userName"])
                return instance
            }


            // Decoder for [HudsonmodelComputerSet]
            Decoders.addDecoder(clazz: [HudsonmodelComputerSet].self) { (source: AnyObject) -> [HudsonmodelComputerSet] in
                return Decoders.decode(clazz: [HudsonmodelComputerSet].self, source: source)
            }
            // Decoder for HudsonmodelComputerSet
            Decoders.addDecoder(clazz: HudsonmodelComputerSet.self) { (source: AnyObject) -> HudsonmodelComputerSet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelComputerSet()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.busyExecutors = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["busyExecutors"])
                instance.computer = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["computer"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.totalExecutors = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalExecutors"])
                return instance
            }


            // Decoder for [HudsonmodelFreeStyleBuild]
            Decoders.addDecoder(clazz: [HudsonmodelFreeStyleBuild].self) { (source: AnyObject) -> [HudsonmodelFreeStyleBuild] in
                return Decoders.decode(clazz: [HudsonmodelFreeStyleBuild].self, source: source)
            }
            // Decoder for HudsonmodelFreeStyleBuild
            Decoders.addDecoder(clazz: HudsonmodelFreeStyleBuild.self) { (source: AnyObject) -> HudsonmodelFreeStyleBuild in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelFreeStyleBuild()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"])
                instance.building = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["building"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.duration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["duration"])
                instance.estimatedDuration = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDuration"])
                instance.executor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["executor"])
                instance.fullDisplayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullDisplayName"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.keepLog = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["keepLog"])
                instance.queueId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["queueId"])
                instance.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"])
                instance.timestamp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timestamp"])
                instance.builtOn = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["builtOn"])
                instance.changeSet = Decoders.decodeOptional(clazz: HudsonscmEmptyChangeLogSet.self, source: sourceDictionary["changeSet"])
                return instance
            }


            // Decoder for [HudsonmodelFreeStyleProject]
            Decoders.addDecoder(clazz: [HudsonmodelFreeStyleProject].self) { (source: AnyObject) -> [HudsonmodelFreeStyleProject] in
                return Decoders.decode(clazz: [HudsonmodelFreeStyleProject].self, source: source)
            }
            // Decoder for HudsonmodelFreeStyleProject
            Decoders.addDecoder(clazz: HudsonmodelFreeStyleProject.self) { (source: AnyObject) -> HudsonmodelFreeStyleProject in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelFreeStyleProject()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.color = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["color"])
                instance.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.displayNameOrNull = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayNameOrNull"])
                instance.fullDisplayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullDisplayName"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"])
                instance.buildable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["buildable"])
                instance.builds = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["builds"])
                instance.firstBuild = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleBuild.self, source: sourceDictionary["firstBuild"])
                instance.healthReport = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["healthReport"])
                instance.inQueue = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["inQueue"])
                instance.keepDependencies = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["keepDependencies"])
                instance.lastBuild = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleBuild.self, source: sourceDictionary["lastBuild"])
                instance.lastCompletedBuild = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleBuild.self, source: sourceDictionary["lastCompletedBuild"])
                instance.lastFailedBuild = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastFailedBuild"])
                instance.lastStableBuild = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleBuild.self, source: sourceDictionary["lastStableBuild"])
                instance.lastSuccessfulBuild = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleBuild.self, source: sourceDictionary["lastSuccessfulBuild"])
                instance.lastUnstableBuild = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUnstableBuild"])
                instance.lastUnsuccessfulBuild = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["lastUnsuccessfulBuild"])
                instance.nextBuildNumber = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["nextBuildNumber"])
                instance.queueItem = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["queueItem"])
                instance.concurrentBuild = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["concurrentBuild"])
                instance.scm = Decoders.decodeOptional(clazz: HudsonscmNullSCM.self, source: sourceDictionary["scm"])
                return instance
            }


            // Decoder for [HudsonmodelFreeStyleProjectactions]
            Decoders.addDecoder(clazz: [HudsonmodelFreeStyleProjectactions].self) { (source: AnyObject) -> [HudsonmodelFreeStyleProjectactions] in
                return Decoders.decode(clazz: [HudsonmodelFreeStyleProjectactions].self, source: source)
            }
            // Decoder for HudsonmodelFreeStyleProjectactions
            Decoders.addDecoder(clazz: HudsonmodelFreeStyleProjectactions.self) { (source: AnyObject) -> HudsonmodelFreeStyleProjectactions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelFreeStyleProjectactions()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [HudsonmodelFreeStyleProjecthealthReport]
            Decoders.addDecoder(clazz: [HudsonmodelFreeStyleProjecthealthReport].self) { (source: AnyObject) -> [HudsonmodelFreeStyleProjecthealthReport] in
                return Decoders.decode(clazz: [HudsonmodelFreeStyleProjecthealthReport].self, source: source)
            }
            // Decoder for HudsonmodelFreeStyleProjecthealthReport
            Decoders.addDecoder(clazz: HudsonmodelFreeStyleProjecthealthReport.self) { (source: AnyObject) -> HudsonmodelFreeStyleProjecthealthReport in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelFreeStyleProjecthealthReport()
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.iconClassName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconClassName"])
                instance.iconUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconUrl"])
                instance.score = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["score"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [HudsonmodelHudson]
            Decoders.addDecoder(clazz: [HudsonmodelHudson].self) { (source: AnyObject) -> [HudsonmodelHudson] in
                return Decoders.decode(clazz: [HudsonmodelHudson].self, source: source)
            }
            // Decoder for HudsonmodelHudson
            Decoders.addDecoder(clazz: HudsonmodelHudson.self) { (source: AnyObject) -> HudsonmodelHudson in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelHudson()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.assignedLabels = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["assignedLabels"])
                instance.mode = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["mode"])
                instance.nodeDescription = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nodeDescription"])
                instance.nodeName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["nodeName"])
                instance.numExecutors = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numExecutors"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.jobs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["jobs"])
                instance.primaryView = Decoders.decodeOptional(clazz: HudsonmodelAllView.self, source: sourceDictionary["primaryView"])
                instance.quietingDown = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["quietingDown"])
                instance.slaveAgentPort = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["slaveAgentPort"])
                instance.unlabeledLoad = Decoders.decodeOptional(clazz: JenkinsmodelUnlabeledLoadStatistics.self, source: sourceDictionary["unlabeledLoad"])
                instance.useCrumbs = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["useCrumbs"])
                instance.useSecurity = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["useSecurity"])
                instance.views = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["views"])
                return instance
            }


            // Decoder for [HudsonmodelHudsonMasterComputer]
            Decoders.addDecoder(clazz: [HudsonmodelHudsonMasterComputer].self) { (source: AnyObject) -> [HudsonmodelHudsonMasterComputer] in
                return Decoders.decode(clazz: [HudsonmodelHudsonMasterComputer].self, source: source)
            }
            // Decoder for HudsonmodelHudsonMasterComputer
            Decoders.addDecoder(clazz: HudsonmodelHudsonMasterComputer.self) { (source: AnyObject) -> HudsonmodelHudsonMasterComputer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelHudsonMasterComputer()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.executors = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["executors"])
                instance.icon = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["icon"])
                instance.iconClassName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["iconClassName"])
                instance.idle = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["idle"])
                instance.jnlpAgent = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["jnlpAgent"])
                instance.launchSupported = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["launchSupported"])
                instance.loadStatistics = Decoders.decodeOptional(clazz: HudsonmodelLabel1.self, source: sourceDictionary["loadStatistics"])
                instance.manualLaunchAllowed = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["manualLaunchAllowed"])
                instance.monitorData = Decoders.decodeOptional(clazz: HudsonmodelHudsonMasterComputerMonitorData.self, source: sourceDictionary["monitorData"])
                instance.numExecutors = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numExecutors"])
                instance.offline = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["offline"])
                instance.offlineCause = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["offlineCause"])
                instance.offlineCauseReason = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["offlineCauseReason"])
                instance.temporarilyOffline = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["temporarilyOffline"])
                return instance
            }


            // Decoder for [HudsonmodelHudsonMasterComputerMonitorData]
            Decoders.addDecoder(clazz: [HudsonmodelHudsonMasterComputerMonitorData].self) { (source: AnyObject) -> [HudsonmodelHudsonMasterComputerMonitorData] in
                return Decoders.decode(clazz: [HudsonmodelHudsonMasterComputerMonitorData].self, source: source)
            }
            // Decoder for HudsonmodelHudsonMasterComputerMonitorData
            Decoders.addDecoder(clazz: HudsonmodelHudsonMasterComputerMonitorData.self) { (source: AnyObject) -> HudsonmodelHudsonMasterComputerMonitorData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelHudsonMasterComputerMonitorData()
                instance.hudsonNodeMonitorsSwapSpaceMonitor = Decoders.decodeOptional(clazz: HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2.self, source: sourceDictionary["hudson.node_monitors.SwapSpaceMonitor"])
                instance.hudsonNodeMonitorsTemporarySpaceMonitor = Decoders.decodeOptional(clazz: HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace.self, source: sourceDictionary["hudson.node_monitors.TemporarySpaceMonitor"])
                instance.hudsonNodeMonitorsDiskSpaceMonitor = Decoders.decodeOptional(clazz: HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace.self, source: sourceDictionary["hudson.node_monitors.DiskSpaceMonitor"])
                instance.hudsonNodeMonitorsArchitectureMonitor = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["hudson.node_monitors.ArchitectureMonitor"])
                instance.hudsonNodeMonitorsResponseTimeMonitor = Decoders.decodeOptional(clazz: HudsonnodeMonitorsResponseTimeMonitorData.self, source: sourceDictionary["hudson.node_monitors.ResponseTimeMonitor"])
                instance.hudsonNodeMonitorsClockMonitor = Decoders.decodeOptional(clazz: HudsonutilClockDifference.self, source: sourceDictionary["hudson.node_monitors.ClockMonitor"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [HudsonmodelHudsonMasterComputerexecutors]
            Decoders.addDecoder(clazz: [HudsonmodelHudsonMasterComputerexecutors].self) { (source: AnyObject) -> [HudsonmodelHudsonMasterComputerexecutors] in
                return Decoders.decode(clazz: [HudsonmodelHudsonMasterComputerexecutors].self, source: source)
            }
            // Decoder for HudsonmodelHudsonMasterComputerexecutors
            Decoders.addDecoder(clazz: HudsonmodelHudsonMasterComputerexecutors.self) { (source: AnyObject) -> HudsonmodelHudsonMasterComputerexecutors in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelHudsonMasterComputerexecutors()
                instance.currentExecutable = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleBuild.self, source: sourceDictionary["currentExecutable"])
                instance.idle = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["idle"])
                instance.likelyStuck = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["likelyStuck"])
                instance.number = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["number"])
                instance.progress = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["progress"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [HudsonmodelHudsonassignedLabels]
            Decoders.addDecoder(clazz: [HudsonmodelHudsonassignedLabels].self) { (source: AnyObject) -> [HudsonmodelHudsonassignedLabels] in
                return Decoders.decode(clazz: [HudsonmodelHudsonassignedLabels].self, source: source)
            }
            // Decoder for HudsonmodelHudsonassignedLabels
            Decoders.addDecoder(clazz: HudsonmodelHudsonassignedLabels.self) { (source: AnyObject) -> HudsonmodelHudsonassignedLabels in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelHudsonassignedLabels()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [HudsonmodelLabel1]
            Decoders.addDecoder(clazz: [HudsonmodelLabel1].self) { (source: AnyObject) -> [HudsonmodelLabel1] in
                return Decoders.decode(clazz: [HudsonmodelLabel1].self, source: source)
            }
            // Decoder for HudsonmodelLabel1
            Decoders.addDecoder(clazz: HudsonmodelLabel1.self) { (source: AnyObject) -> HudsonmodelLabel1 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelLabel1()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [HudsonmodelListView]
            Decoders.addDecoder(clazz: [HudsonmodelListView].self) { (source: AnyObject) -> [HudsonmodelListView] in
                return Decoders.decode(clazz: [HudsonmodelListView].self, source: source)
            }
            // Decoder for HudsonmodelListView
            Decoders.addDecoder(clazz: HudsonmodelListView.self) { (source: AnyObject) -> HudsonmodelListView in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelListView()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.jobs = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["jobs"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                return instance
            }


            // Decoder for [HudsonmodelQueue]
            Decoders.addDecoder(clazz: [HudsonmodelQueue].self) { (source: AnyObject) -> [HudsonmodelQueue] in
                return Decoders.decode(clazz: [HudsonmodelQueue].self, source: source)
            }
            // Decoder for HudsonmodelQueue
            Decoders.addDecoder(clazz: HudsonmodelQueue.self) { (source: AnyObject) -> HudsonmodelQueue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelQueue()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [HudsonmodelQueueBlockedItem]
            Decoders.addDecoder(clazz: [HudsonmodelQueueBlockedItem].self) { (source: AnyObject) -> [HudsonmodelQueueBlockedItem] in
                return Decoders.decode(clazz: [HudsonmodelQueueBlockedItem].self, source: source)
            }
            // Decoder for HudsonmodelQueueBlockedItem
            Decoders.addDecoder(clazz: HudsonmodelQueueBlockedItem.self) { (source: AnyObject) -> HudsonmodelQueueBlockedItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelQueueBlockedItem()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"])
                instance.blocked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["blocked"])
                instance.buildable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["buildable"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.inQueueSince = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inQueueSince"])
                instance.params = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["params"])
                instance.stuck = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stuck"])
                instance.task = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleProject.self, source: sourceDictionary["task"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.why = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["why"])
                instance.buildableStartMilliseconds = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["buildableStartMilliseconds"])
                return instance
            }


            // Decoder for [HudsonmodelQueueLeftItem]
            Decoders.addDecoder(clazz: [HudsonmodelQueueLeftItem].self) { (source: AnyObject) -> [HudsonmodelQueueLeftItem] in
                return Decoders.decode(clazz: [HudsonmodelQueueLeftItem].self, source: source)
            }
            // Decoder for HudsonmodelQueueLeftItem
            Decoders.addDecoder(clazz: HudsonmodelQueueLeftItem.self) { (source: AnyObject) -> HudsonmodelQueueLeftItem in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelQueueLeftItem()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.actions = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["actions"])
                instance.blocked = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["blocked"])
                instance.buildable = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["buildable"])
                instance.id = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["id"])
                instance.inQueueSince = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["inQueueSince"])
                instance.params = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["params"])
                instance.stuck = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stuck"])
                instance.task = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleProject.self, source: sourceDictionary["task"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.why = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["why"])
                instance.cancelled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["cancelled"])
                instance.executable = Decoders.decodeOptional(clazz: HudsonmodelFreeStyleBuild.self, source: sourceDictionary["executable"])
                return instance
            }


            // Decoder for [HudsonmodelStringParameterDefinition]
            Decoders.addDecoder(clazz: [HudsonmodelStringParameterDefinition].self) { (source: AnyObject) -> [HudsonmodelStringParameterDefinition] in
                return Decoders.decode(clazz: [HudsonmodelStringParameterDefinition].self, source: source)
            }
            // Decoder for HudsonmodelStringParameterDefinition
            Decoders.addDecoder(clazz: HudsonmodelStringParameterDefinition.self) { (source: AnyObject) -> HudsonmodelStringParameterDefinition in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelStringParameterDefinition()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.defaultParameterValue = Decoders.decodeOptional(clazz: HudsonmodelStringParameterValue.self, source: sourceDictionary["defaultParameterValue"])
                instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                return instance
            }


            // Decoder for [HudsonmodelStringParameterValue]
            Decoders.addDecoder(clazz: [HudsonmodelStringParameterValue].self) { (source: AnyObject) -> [HudsonmodelStringParameterValue] in
                return Decoders.decode(clazz: [HudsonmodelStringParameterValue].self, source: source)
            }
            // Decoder for HudsonmodelStringParameterValue
            Decoders.addDecoder(clazz: HudsonmodelStringParameterValue.self) { (source: AnyObject) -> HudsonmodelStringParameterValue in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonmodelStringParameterValue()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.value = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["value"])
                return instance
            }


            // Decoder for [HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace]
            Decoders.addDecoder(clazz: [HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace].self) { (source: AnyObject) -> [HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace] in
                return Decoders.decode(clazz: [HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace].self, source: source)
            }
            // Decoder for HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace
            Decoders.addDecoder(clazz: HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace.self) { (source: AnyObject) -> HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonnodeMonitorsDiskSpaceMonitorDescriptorDiskSpace()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.timestamp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timestamp"])
                instance.path = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["path"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                return instance
            }


            // Decoder for [HudsonnodeMonitorsResponseTimeMonitorData]
            Decoders.addDecoder(clazz: [HudsonnodeMonitorsResponseTimeMonitorData].self) { (source: AnyObject) -> [HudsonnodeMonitorsResponseTimeMonitorData] in
                return Decoders.decode(clazz: [HudsonnodeMonitorsResponseTimeMonitorData].self, source: source)
            }
            // Decoder for HudsonnodeMonitorsResponseTimeMonitorData
            Decoders.addDecoder(clazz: HudsonnodeMonitorsResponseTimeMonitorData.self) { (source: AnyObject) -> HudsonnodeMonitorsResponseTimeMonitorData in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonnodeMonitorsResponseTimeMonitorData()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.timestamp = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["timestamp"])
                instance.average = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["average"])
                return instance
            }


            // Decoder for [HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2]
            Decoders.addDecoder(clazz: [HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2].self) { (source: AnyObject) -> [HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2] in
                return Decoders.decode(clazz: [HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2].self, source: source)
            }
            // Decoder for HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2
            Decoders.addDecoder(clazz: HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2.self) { (source: AnyObject) -> HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonnodeMonitorsSwapSpaceMonitorMemoryUsage2()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.availablePhysicalMemory = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["availablePhysicalMemory"])
                instance.availableSwapSpace = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["availableSwapSpace"])
                instance.totalPhysicalMemory = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalPhysicalMemory"])
                instance.totalSwapSpace = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalSwapSpace"])
                return instance
            }


            // Decoder for [HudsonscmEmptyChangeLogSet]
            Decoders.addDecoder(clazz: [HudsonscmEmptyChangeLogSet].self) { (source: AnyObject) -> [HudsonscmEmptyChangeLogSet] in
                return Decoders.decode(clazz: [HudsonscmEmptyChangeLogSet].self, source: source)
            }
            // Decoder for HudsonscmEmptyChangeLogSet
            Decoders.addDecoder(clazz: HudsonscmEmptyChangeLogSet.self) { (source: AnyObject) -> HudsonscmEmptyChangeLogSet in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonscmEmptyChangeLogSet()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.kind = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["kind"])
                return instance
            }


            // Decoder for [HudsonscmNullSCM]
            Decoders.addDecoder(clazz: [HudsonscmNullSCM].self) { (source: AnyObject) -> [HudsonscmNullSCM] in
                return Decoders.decode(clazz: [HudsonscmNullSCM].self, source: source)
            }
            // Decoder for HudsonscmNullSCM
            Decoders.addDecoder(clazz: HudsonscmNullSCM.self) { (source: AnyObject) -> HudsonscmNullSCM in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonscmNullSCM()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [HudsonsecuritycsrfDefaultCrumbIssuer]
            Decoders.addDecoder(clazz: [HudsonsecuritycsrfDefaultCrumbIssuer].self) { (source: AnyObject) -> [HudsonsecuritycsrfDefaultCrumbIssuer] in
                return Decoders.decode(clazz: [HudsonsecuritycsrfDefaultCrumbIssuer].self, source: source)
            }
            // Decoder for HudsonsecuritycsrfDefaultCrumbIssuer
            Decoders.addDecoder(clazz: HudsonsecuritycsrfDefaultCrumbIssuer.self) { (source: AnyObject) -> HudsonsecuritycsrfDefaultCrumbIssuer in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonsecuritycsrfDefaultCrumbIssuer()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.crumb = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["crumb"])
                instance.crumbRequestField = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["crumbRequestField"])
                return instance
            }


            // Decoder for [HudsonutilClockDifference]
            Decoders.addDecoder(clazz: [HudsonutilClockDifference].self) { (source: AnyObject) -> [HudsonutilClockDifference] in
                return Decoders.decode(clazz: [HudsonutilClockDifference].self, source: source)
            }
            // Decoder for HudsonutilClockDifference
            Decoders.addDecoder(clazz: HudsonutilClockDifference.self) { (source: AnyObject) -> HudsonutilClockDifference in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = HudsonutilClockDifference()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.diff = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["diff"])
                return instance
            }


            // Decoder for [IojenkinsblueoceanresthalLink]
            Decoders.addDecoder(clazz: [IojenkinsblueoceanresthalLink].self) { (source: AnyObject) -> [IojenkinsblueoceanresthalLink] in
                return Decoders.decode(clazz: [IojenkinsblueoceanresthalLink].self, source: source)
            }
            // Decoder for IojenkinsblueoceanresthalLink
            Decoders.addDecoder(clazz: IojenkinsblueoceanresthalLink.self) { (source: AnyObject) -> IojenkinsblueoceanresthalLink in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IojenkinsblueoceanresthalLink()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.href = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["href"])
                return instance
            }


            // Decoder for [IojenkinsblueoceanrestimplpipelineBranchImpl]
            Decoders.addDecoder(clazz: [IojenkinsblueoceanrestimplpipelineBranchImpl].self) { (source: AnyObject) -> [IojenkinsblueoceanrestimplpipelineBranchImpl] in
                return Decoders.decode(clazz: [IojenkinsblueoceanrestimplpipelineBranchImpl].self, source: source)
            }
            // Decoder for IojenkinsblueoceanrestimplpipelineBranchImpl
            Decoders.addDecoder(clazz: IojenkinsblueoceanrestimplpipelineBranchImpl.self) { (source: AnyObject) -> IojenkinsblueoceanrestimplpipelineBranchImpl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IojenkinsblueoceanrestimplpipelineBranchImpl()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"])
                instance.fullDisplayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullDisplayName"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.parameters = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["parameters"])
                instance.permissions = Decoders.decodeOptional(clazz: IojenkinsblueoceanrestimplpipelineBranchImplPermissions.self, source: sourceDictionary["permissions"])
                instance.weatherScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"])
                instance.pullRequest = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pullRequest"])
                return instance
            }


            // Decoder for [IojenkinsblueoceanrestimplpipelineBranchImplPermissions]
            Decoders.addDecoder(clazz: [IojenkinsblueoceanrestimplpipelineBranchImplPermissions].self) { (source: AnyObject) -> [IojenkinsblueoceanrestimplpipelineBranchImplPermissions] in
                return Decoders.decode(clazz: [IojenkinsblueoceanrestimplpipelineBranchImplPermissions].self, source: source)
            }
            // Decoder for IojenkinsblueoceanrestimplpipelineBranchImplPermissions
            Decoders.addDecoder(clazz: IojenkinsblueoceanrestimplpipelineBranchImplPermissions.self) { (source: AnyObject) -> IojenkinsblueoceanrestimplpipelineBranchImplPermissions in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IojenkinsblueoceanrestimplpipelineBranchImplPermissions()
                instance.create = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["create"])
                instance.read = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["read"])
                instance.start = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["start"])
                instance.stop = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["stop"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1]
            Decoders.addDecoder(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1].self) { (source: AnyObject) -> [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1] in
                return Decoders.decode(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1].self, source: source)
            }
            // Decoder for IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1
            Decoders.addDecoder(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1.self) { (source: AnyObject) -> IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.links = Decoders.decodeOptional(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links.self, source: sourceDictionary["_links"])
                instance.map = Decoders.decodeOptional(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map.self, source: sourceDictionary["map"])
                return instance
            }


            // Decoder for [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links]
            Decoders.addDecoder(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links].self) { (source: AnyObject) -> [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links] in
                return Decoders.decode(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links].self, source: source)
            }
            // Decoder for IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links
            Decoders.addDecoder(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links.self) { (source: AnyObject) -> IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Links()
                instance._self = Decoders.decodeOptional(clazz: IojenkinsblueoceanresthalLink.self, source: sourceDictionary["self"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map]
            Decoders.addDecoder(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map].self) { (source: AnyObject) -> [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map] in
                return Decoders.decode(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map].self, source: source)
            }
            // Decoder for IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map
            Decoders.addDecoder(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map.self) { (source: AnyObject) -> IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IojenkinsblueoceanserviceembeddedrestExtensionClassContainerImpl1Map()
                instance.ioJenkinsBlueoceanServiceEmbeddedRestPipelineImpl = Decoders.decodeOptional(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassImpl.self, source: sourceDictionary["io.jenkins.blueocean.service.embedded.rest.PipelineImpl"])
                instance.ioJenkinsBlueoceanServiceEmbeddedRestMultiBranchPipelineImpl = Decoders.decodeOptional(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassImpl.self, source: sourceDictionary["io.jenkins.blueocean.service.embedded.rest.MultiBranchPipelineImpl"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [IojenkinsblueoceanserviceembeddedrestExtensionClassImpl]
            Decoders.addDecoder(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassImpl].self) { (source: AnyObject) -> [IojenkinsblueoceanserviceembeddedrestExtensionClassImpl] in
                return Decoders.decode(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassImpl].self, source: source)
            }
            // Decoder for IojenkinsblueoceanserviceembeddedrestExtensionClassImpl
            Decoders.addDecoder(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassImpl.self) { (source: AnyObject) -> IojenkinsblueoceanserviceembeddedrestExtensionClassImpl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IojenkinsblueoceanserviceembeddedrestExtensionClassImpl()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.links = Decoders.decodeOptional(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks.self, source: sourceDictionary["_links"])
                instance.classes = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["classes"])
                return instance
            }


            // Decoder for [IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks]
            Decoders.addDecoder(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks].self) { (source: AnyObject) -> [IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks] in
                return Decoders.decode(clazz: [IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks].self, source: source)
            }
            // Decoder for IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks
            Decoders.addDecoder(clazz: IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks.self) { (source: AnyObject) -> IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IojenkinsblueoceanserviceembeddedrestExtensionClassImplLinks()
                instance._self = Decoders.decodeOptional(clazz: IojenkinsblueoceanresthalLink.self, source: sourceDictionary["self"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl]
            Decoders.addDecoder(clazz: [IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl].self) { (source: AnyObject) -> [IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl] in
                return Decoders.decode(clazz: [IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl].self, source: source)
            }
            // Decoder for IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl
            Decoders.addDecoder(clazz: IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl.self) { (source: AnyObject) -> IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.numberOfFolders = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfFolders"])
                instance.numberOfPipelines = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["numberOfPipelines"])
                return instance
            }


            // Decoder for [IojenkinsblueoceanserviceembeddedrestPipelineImpl]
            Decoders.addDecoder(clazz: [IojenkinsblueoceanserviceembeddedrestPipelineImpl].self) { (source: AnyObject) -> [IojenkinsblueoceanserviceembeddedrestPipelineImpl] in
                return Decoders.decode(clazz: [IojenkinsblueoceanserviceembeddedrestPipelineImpl].self, source: source)
            }
            // Decoder for IojenkinsblueoceanserviceembeddedrestPipelineImpl
            Decoders.addDecoder(clazz: IojenkinsblueoceanserviceembeddedrestPipelineImpl.self) { (source: AnyObject) -> IojenkinsblueoceanserviceembeddedrestPipelineImpl in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = IojenkinsblueoceanserviceembeddedrestPipelineImpl()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"])
                instance.latestRun = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["latestRun"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.weatherScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"])
                return instance
            }


            // Decoder for [JenkinsmodelUnlabeledLoadStatistics]
            Decoders.addDecoder(clazz: [JenkinsmodelUnlabeledLoadStatistics].self) { (source: AnyObject) -> [JenkinsmodelUnlabeledLoadStatistics] in
                return Decoders.decode(clazz: [JenkinsmodelUnlabeledLoadStatistics].self, source: source)
            }
            // Decoder for JenkinsmodelUnlabeledLoadStatistics
            Decoders.addDecoder(clazz: JenkinsmodelUnlabeledLoadStatistics.self) { (source: AnyObject) -> JenkinsmodelUnlabeledLoadStatistics in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JenkinsmodelUnlabeledLoadStatistics()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [SwaggyjenkinsOrganisation]
            Decoders.addDecoder(clazz: [SwaggyjenkinsOrganisation].self) { (source: AnyObject) -> [SwaggyjenkinsOrganisation] in
                return Decoders.decode(clazz: [SwaggyjenkinsOrganisation].self, source: source)
            }
            // Decoder for SwaggyjenkinsOrganisation
            Decoders.addDecoder(clazz: SwaggyjenkinsOrganisation.self) { (source: AnyObject) -> SwaggyjenkinsOrganisation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SwaggyjenkinsOrganisation()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }


            // Decoder for [SwaggyjenkinsPipeline]
            Decoders.addDecoder(clazz: [SwaggyjenkinsPipeline].self) { (source: AnyObject) -> [SwaggyjenkinsPipeline] in
                return Decoders.decode(clazz: [SwaggyjenkinsPipeline].self, source: source)
            }
            // Decoder for SwaggyjenkinsPipeline
            Decoders.addDecoder(clazz: SwaggyjenkinsPipeline.self) { (source: AnyObject) -> SwaggyjenkinsPipeline in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SwaggyjenkinsPipeline()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.displayName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["displayName"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"])
                instance.weatherScore = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["weatherScore"])
                instance.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"])
                instance.latestRun = Decoders.decodeOptional(clazz: SwaggyjenkinsPipelineLatestRun.self, source: sourceDictionary["latestRun"])
                return instance
            }


            // Decoder for [SwaggyjenkinsPipelineLatestRun]
            Decoders.addDecoder(clazz: [SwaggyjenkinsPipelineLatestRun].self) { (source: AnyObject) -> [SwaggyjenkinsPipelineLatestRun] in
                return Decoders.decode(clazz: [SwaggyjenkinsPipelineLatestRun].self, source: source)
            }
            // Decoder for SwaggyjenkinsPipelineLatestRun
            Decoders.addDecoder(clazz: SwaggyjenkinsPipelineLatestRun.self) { (source: AnyObject) -> SwaggyjenkinsPipelineLatestRun in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SwaggyjenkinsPipelineLatestRun()
                instance.artifacts = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["artifacts"])
                instance.durationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["durationInMillis"])
                instance.estimatedDurationInMillis = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["estimatedDurationInMillis"])
                instance.enQueueTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["enQueueTime"])
                instance.endTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["endTime"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.organization = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["organization"])
                instance.pipeline = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["pipeline"])
                instance.result = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["result"])
                instance.runSummary = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["runSummary"])
                instance.startTime = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["startTime"])
                instance.state = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["state"])
                instance.type = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["type"])
                instance.commitId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["commitId"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [SwaggyjenkinsPipelineLatestRunartifacts]
            Decoders.addDecoder(clazz: [SwaggyjenkinsPipelineLatestRunartifacts].self) { (source: AnyObject) -> [SwaggyjenkinsPipelineLatestRunartifacts] in
                return Decoders.decode(clazz: [SwaggyjenkinsPipelineLatestRunartifacts].self, source: source)
            }
            // Decoder for SwaggyjenkinsPipelineLatestRunartifacts
            Decoders.addDecoder(clazz: SwaggyjenkinsPipelineLatestRunartifacts.self) { (source: AnyObject) -> SwaggyjenkinsPipelineLatestRunartifacts in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SwaggyjenkinsPipelineLatestRunartifacts()
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.size = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["size"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                return instance
            }


            // Decoder for [SwaggyjenkinsUser]
            Decoders.addDecoder(clazz: [SwaggyjenkinsUser].self) { (source: AnyObject) -> [SwaggyjenkinsUser] in
                return Decoders.decode(clazz: [SwaggyjenkinsUser].self, source: source)
            }
            // Decoder for SwaggyjenkinsUser
            Decoders.addDecoder(clazz: SwaggyjenkinsUser.self) { (source: AnyObject) -> SwaggyjenkinsUser in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = SwaggyjenkinsUser()
                instance._class = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["_class"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.fullName = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["fullName"])
                instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                return instance
            }
        }
    }
}
