/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator 2.3.0-SNAPSHOT.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "BranchImplpermissions.h"

#include <string>
#include <sstream>
#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

using boost::property_tree::ptree;
using boost::property_tree::read_json;
using boost::property_tree::write_json;

namespace io {
namespace swagger {
namespace server {
namespace model {

BranchImplpermissions::BranchImplpermissions()
{
    m_Create = false;
    m_Read = false;
    m_Start = false;
    m_Stop = false;
    m__class = "";
    
}

BranchImplpermissions::~BranchImplpermissions()
{
}

std::string BranchImplpermissions::toJsonString()
{
	std::stringstream ss;
	ptree pt;
	pt.put("Create", m_Create);
	pt.put("Read", m_Read);
	pt.put("Start", m_Start);
	pt.put("Stop", m_Stop);
	pt.put("_class", m__class);
	write_json(ss, pt, false);
	return ss.str();
}

void BranchImplpermissions::fromJsonString(std::string const& jsonString)
{
	std::stringstream ss(jsonString);
	ptree pt;
	read_json(ss,pt);
	m_Create = pt.get("Create", false);
	m_Read = pt.get("Read", false);
	m_Start = pt.get("Start", false);
	m_Stop = pt.get("Stop", false);
	m__class = pt.get("_class", "");
}

bool BranchImplpermissions::getCreate() const
{
    return m_Create;
}
void BranchImplpermissions::setCreate(bool value)
{
    m_Create = value;
}
bool BranchImplpermissions::getRead() const
{
    return m_Read;
}
void BranchImplpermissions::setRead(bool value)
{
    m_Read = value;
}
bool BranchImplpermissions::getStart() const
{
    return m_Start;
}
void BranchImplpermissions::setStart(bool value)
{
    m_Start = value;
}
bool BranchImplpermissions::getStop() const
{
    return m_Stop;
}
void BranchImplpermissions::setStop(bool value)
{
    m_Stop = value;
}
std::string BranchImplpermissions::getClass() const
{
    return m__class;
}
void BranchImplpermissions::setClass(std::string value)
{
    m__class = value;
}

}
}
}
}

