/* 
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing BlueOceanApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class BlueOceanApiTests
    {
        private BlueOceanApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new BlueOceanApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of BlueOceanApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BlueOceanApi
            //Assert.IsInstanceOfType(typeof(BlueOceanApi), instance, "instance is a BlueOceanApi");
        }

        
        /// <summary>
        /// Test GetAuthenticatedUser
        /// </summary>
        [Test]
        public void GetAuthenticatedUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisation = null;
            //var response = instance.GetAuthenticatedUser(organisation);
            //Assert.IsInstanceOf<SwaggyjenkinsUser> (response, "response is SwaggyjenkinsUser");
        }
        
        /// <summary>
        /// Test GetClasses
        /// </summary>
        [Test]
        public void GetClassesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _class = null;
            //var response = instance.GetClasses(_class);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test GetOrganisation
        /// </summary>
        [Test]
        public void GetOrganisationTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisation = null;
            //var response = instance.GetOrganisation(organisation);
            //Assert.IsInstanceOf<SwaggyjenkinsOrganisation> (response, "response is SwaggyjenkinsOrganisation");
        }
        
        /// <summary>
        /// Test GetOrganisations
        /// </summary>
        [Test]
        public void GetOrganisationsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetOrganisations();
            //Assert.IsInstanceOf<GetOrganisations> (response, "response is GetOrganisations");
        }
        
        /// <summary>
        /// Test GetPipelineBranchByOrg
        /// </summary>
        [Test]
        public void GetPipelineBranchByOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisation = null;
            //string pipeline = null;
            //string branch = null;
            //var response = instance.GetPipelineBranchByOrg(organisation, pipeline, branch);
            //Assert.IsInstanceOf<IojenkinsblueoceanrestimplpipelineBranchImpl> (response, "response is IojenkinsblueoceanrestimplpipelineBranchImpl");
        }
        
        /// <summary>
        /// Test GetPipelineBranchesByOrg
        /// </summary>
        [Test]
        public void GetPipelineBranchesByOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisation = null;
            //string pipeline = null;
            //var response = instance.GetPipelineBranchesByOrg(organisation, pipeline);
            //Assert.IsInstanceOf<GetMultibranchPipeline> (response, "response is GetMultibranchPipeline");
        }
        
        /// <summary>
        /// Test GetPipelineByOrg
        /// </summary>
        [Test]
        public void GetPipelineByOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisation = null;
            //string pipeline = null;
            //var response = instance.GetPipelineByOrg(organisation, pipeline);
            //Assert.IsInstanceOf<SwaggyjenkinsPipeline> (response, "response is SwaggyjenkinsPipeline");
        }
        
        /// <summary>
        /// Test GetPipelineFolderByOrg
        /// </summary>
        [Test]
        public void GetPipelineFolderByOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisation = null;
            //string folder = null;
            //var response = instance.GetPipelineFolderByOrg(organisation, folder);
            //Assert.IsInstanceOf<IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl> (response, "response is IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl");
        }
        
        /// <summary>
        /// Test GetPipelineFolderByOrg_0
        /// </summary>
        [Test]
        public void GetPipelineFolderByOrg_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisation = null;
            //string pipeline = null;
            //string folder = null;
            //var response = instance.GetPipelineFolderByOrg_0(organisation, pipeline, folder);
            //Assert.IsInstanceOf<IojenkinsblueoceanserviceembeddedrestPipelineImpl> (response, "response is IojenkinsblueoceanserviceembeddedrestPipelineImpl");
        }
        
        /// <summary>
        /// Test GetPipelinesByOrg
        /// </summary>
        [Test]
        public void GetPipelinesByOrgTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisation = null;
            //var response = instance.GetPipelinesByOrg(organisation);
            //Assert.IsInstanceOf<GetPipelines> (response, "response is GetPipelines");
        }
        
        /// <summary>
        /// Test GetUser
        /// </summary>
        [Test]
        public void GetUserTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisation = null;
            //string user = null;
            //var response = instance.GetUser(organisation, user);
            //Assert.IsInstanceOf<SwaggyjenkinsUser> (response, "response is SwaggyjenkinsUser");
        }
        
        /// <summary>
        /// Test GetUsers
        /// </summary>
        [Test]
        public void GetUsersTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string organisation = null;
            //var response = instance.GetUsers(organisation);
            //Assert.IsInstanceOf<SwaggyjenkinsUser> (response, "response is SwaggyjenkinsUser");
        }
        
        /// <summary>
        /// Test Search
        /// </summary>
        [Test]
        public void SearchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //var response = instance.Search(q);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test Search_0
        /// </summary>
        [Test]
        public void Search_0Test()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string q = null;
            //var response = instance.Search_0(q);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
    }

}
