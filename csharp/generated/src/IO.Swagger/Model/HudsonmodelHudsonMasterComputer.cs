/* 
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// HudsonmodelHudsonMasterComputer
    /// </summary>
    [DataContract]
    public partial class HudsonmodelHudsonMasterComputer :  IEquatable<HudsonmodelHudsonMasterComputer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HudsonmodelHudsonMasterComputer" /> class.
        /// </summary>
        /// <param name="_Class">_Class.</param>
        /// <param name="DisplayName">DisplayName.</param>
        /// <param name="Executors">Executors.</param>
        /// <param name="Icon">Icon.</param>
        /// <param name="IconClassName">IconClassName.</param>
        /// <param name="Idle">Idle.</param>
        /// <param name="JnlpAgent">JnlpAgent.</param>
        /// <param name="LaunchSupported">LaunchSupported.</param>
        /// <param name="LoadStatistics">LoadStatistics.</param>
        /// <param name="ManualLaunchAllowed">ManualLaunchAllowed.</param>
        /// <param name="MonitorData">MonitorData.</param>
        /// <param name="NumExecutors">NumExecutors.</param>
        /// <param name="Offline">Offline.</param>
        /// <param name="OfflineCause">OfflineCause.</param>
        /// <param name="OfflineCauseReason">OfflineCauseReason.</param>
        /// <param name="TemporarilyOffline">TemporarilyOffline.</param>
        public HudsonmodelHudsonMasterComputer(string _Class = default(string), string DisplayName = default(string), List<HudsonmodelHudsonMasterComputerexecutors> Executors = default(List<HudsonmodelHudsonMasterComputerexecutors>), string Icon = default(string), string IconClassName = default(string), bool? Idle = default(bool?), bool? JnlpAgent = default(bool?), bool? LaunchSupported = default(bool?), HudsonmodelLabel1 LoadStatistics = default(HudsonmodelLabel1), bool? ManualLaunchAllowed = default(bool?), HudsonmodelHudsonMasterComputerMonitorData MonitorData = default(HudsonmodelHudsonMasterComputerMonitorData), int? NumExecutors = default(int?), bool? Offline = default(bool?), string OfflineCause = default(string), string OfflineCauseReason = default(string), bool? TemporarilyOffline = default(bool?))
        {
            this._Class = _Class;
            this.DisplayName = DisplayName;
            this.Executors = Executors;
            this.Icon = Icon;
            this.IconClassName = IconClassName;
            this.Idle = Idle;
            this.JnlpAgent = JnlpAgent;
            this.LaunchSupported = LaunchSupported;
            this.LoadStatistics = LoadStatistics;
            this.ManualLaunchAllowed = ManualLaunchAllowed;
            this.MonitorData = MonitorData;
            this.NumExecutors = NumExecutors;
            this.Offline = Offline;
            this.OfflineCause = OfflineCause;
            this.OfflineCauseReason = OfflineCauseReason;
            this.TemporarilyOffline = TemporarilyOffline;
        }
        
        /// <summary>
        /// Gets or Sets _Class
        /// </summary>
        [DataMember(Name="_class", EmitDefaultValue=false)]
        public string _Class { get; set; }
        /// <summary>
        /// Gets or Sets DisplayName
        /// </summary>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }
        /// <summary>
        /// Gets or Sets Executors
        /// </summary>
        [DataMember(Name="executors", EmitDefaultValue=false)]
        public List<HudsonmodelHudsonMasterComputerexecutors> Executors { get; set; }
        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public string Icon { get; set; }
        /// <summary>
        /// Gets or Sets IconClassName
        /// </summary>
        [DataMember(Name="iconClassName", EmitDefaultValue=false)]
        public string IconClassName { get; set; }
        /// <summary>
        /// Gets or Sets Idle
        /// </summary>
        [DataMember(Name="idle", EmitDefaultValue=false)]
        public bool? Idle { get; set; }
        /// <summary>
        /// Gets or Sets JnlpAgent
        /// </summary>
        [DataMember(Name="jnlpAgent", EmitDefaultValue=false)]
        public bool? JnlpAgent { get; set; }
        /// <summary>
        /// Gets or Sets LaunchSupported
        /// </summary>
        [DataMember(Name="launchSupported", EmitDefaultValue=false)]
        public bool? LaunchSupported { get; set; }
        /// <summary>
        /// Gets or Sets LoadStatistics
        /// </summary>
        [DataMember(Name="loadStatistics", EmitDefaultValue=false)]
        public HudsonmodelLabel1 LoadStatistics { get; set; }
        /// <summary>
        /// Gets or Sets ManualLaunchAllowed
        /// </summary>
        [DataMember(Name="manualLaunchAllowed", EmitDefaultValue=false)]
        public bool? ManualLaunchAllowed { get; set; }
        /// <summary>
        /// Gets or Sets MonitorData
        /// </summary>
        [DataMember(Name="monitorData", EmitDefaultValue=false)]
        public HudsonmodelHudsonMasterComputerMonitorData MonitorData { get; set; }
        /// <summary>
        /// Gets or Sets NumExecutors
        /// </summary>
        [DataMember(Name="numExecutors", EmitDefaultValue=false)]
        public int? NumExecutors { get; set; }
        /// <summary>
        /// Gets or Sets Offline
        /// </summary>
        [DataMember(Name="offline", EmitDefaultValue=false)]
        public bool? Offline { get; set; }
        /// <summary>
        /// Gets or Sets OfflineCause
        /// </summary>
        [DataMember(Name="offlineCause", EmitDefaultValue=false)]
        public string OfflineCause { get; set; }
        /// <summary>
        /// Gets or Sets OfflineCauseReason
        /// </summary>
        [DataMember(Name="offlineCauseReason", EmitDefaultValue=false)]
        public string OfflineCauseReason { get; set; }
        /// <summary>
        /// Gets or Sets TemporarilyOffline
        /// </summary>
        [DataMember(Name="temporarilyOffline", EmitDefaultValue=false)]
        public bool? TemporarilyOffline { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HudsonmodelHudsonMasterComputer {\n");
            sb.Append("  _Class: ").Append(_Class).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Executors: ").Append(Executors).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  IconClassName: ").Append(IconClassName).Append("\n");
            sb.Append("  Idle: ").Append(Idle).Append("\n");
            sb.Append("  JnlpAgent: ").Append(JnlpAgent).Append("\n");
            sb.Append("  LaunchSupported: ").Append(LaunchSupported).Append("\n");
            sb.Append("  LoadStatistics: ").Append(LoadStatistics).Append("\n");
            sb.Append("  ManualLaunchAllowed: ").Append(ManualLaunchAllowed).Append("\n");
            sb.Append("  MonitorData: ").Append(MonitorData).Append("\n");
            sb.Append("  NumExecutors: ").Append(NumExecutors).Append("\n");
            sb.Append("  Offline: ").Append(Offline).Append("\n");
            sb.Append("  OfflineCause: ").Append(OfflineCause).Append("\n");
            sb.Append("  OfflineCauseReason: ").Append(OfflineCauseReason).Append("\n");
            sb.Append("  TemporarilyOffline: ").Append(TemporarilyOffline).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as HudsonmodelHudsonMasterComputer);
        }

        /// <summary>
        /// Returns true if HudsonmodelHudsonMasterComputer instances are equal
        /// </summary>
        /// <param name="other">Instance of HudsonmodelHudsonMasterComputer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HudsonmodelHudsonMasterComputer other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this._Class == other._Class ||
                    this._Class != null &&
                    this._Class.Equals(other._Class)
                ) && 
                (
                    this.DisplayName == other.DisplayName ||
                    this.DisplayName != null &&
                    this.DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    this.Executors == other.Executors ||
                    this.Executors != null &&
                    this.Executors.SequenceEqual(other.Executors)
                ) && 
                (
                    this.Icon == other.Icon ||
                    this.Icon != null &&
                    this.Icon.Equals(other.Icon)
                ) && 
                (
                    this.IconClassName == other.IconClassName ||
                    this.IconClassName != null &&
                    this.IconClassName.Equals(other.IconClassName)
                ) && 
                (
                    this.Idle == other.Idle ||
                    this.Idle != null &&
                    this.Idle.Equals(other.Idle)
                ) && 
                (
                    this.JnlpAgent == other.JnlpAgent ||
                    this.JnlpAgent != null &&
                    this.JnlpAgent.Equals(other.JnlpAgent)
                ) && 
                (
                    this.LaunchSupported == other.LaunchSupported ||
                    this.LaunchSupported != null &&
                    this.LaunchSupported.Equals(other.LaunchSupported)
                ) && 
                (
                    this.LoadStatistics == other.LoadStatistics ||
                    this.LoadStatistics != null &&
                    this.LoadStatistics.Equals(other.LoadStatistics)
                ) && 
                (
                    this.ManualLaunchAllowed == other.ManualLaunchAllowed ||
                    this.ManualLaunchAllowed != null &&
                    this.ManualLaunchAllowed.Equals(other.ManualLaunchAllowed)
                ) && 
                (
                    this.MonitorData == other.MonitorData ||
                    this.MonitorData != null &&
                    this.MonitorData.Equals(other.MonitorData)
                ) && 
                (
                    this.NumExecutors == other.NumExecutors ||
                    this.NumExecutors != null &&
                    this.NumExecutors.Equals(other.NumExecutors)
                ) && 
                (
                    this.Offline == other.Offline ||
                    this.Offline != null &&
                    this.Offline.Equals(other.Offline)
                ) && 
                (
                    this.OfflineCause == other.OfflineCause ||
                    this.OfflineCause != null &&
                    this.OfflineCause.Equals(other.OfflineCause)
                ) && 
                (
                    this.OfflineCauseReason == other.OfflineCauseReason ||
                    this.OfflineCauseReason != null &&
                    this.OfflineCauseReason.Equals(other.OfflineCauseReason)
                ) && 
                (
                    this.TemporarilyOffline == other.TemporarilyOffline ||
                    this.TemporarilyOffline != null &&
                    this.TemporarilyOffline.Equals(other.TemporarilyOffline)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this._Class != null)
                    hash = hash * 59 + this._Class.GetHashCode();
                if (this.DisplayName != null)
                    hash = hash * 59 + this.DisplayName.GetHashCode();
                if (this.Executors != null)
                    hash = hash * 59 + this.Executors.GetHashCode();
                if (this.Icon != null)
                    hash = hash * 59 + this.Icon.GetHashCode();
                if (this.IconClassName != null)
                    hash = hash * 59 + this.IconClassName.GetHashCode();
                if (this.Idle != null)
                    hash = hash * 59 + this.Idle.GetHashCode();
                if (this.JnlpAgent != null)
                    hash = hash * 59 + this.JnlpAgent.GetHashCode();
                if (this.LaunchSupported != null)
                    hash = hash * 59 + this.LaunchSupported.GetHashCode();
                if (this.LoadStatistics != null)
                    hash = hash * 59 + this.LoadStatistics.GetHashCode();
                if (this.ManualLaunchAllowed != null)
                    hash = hash * 59 + this.ManualLaunchAllowed.GetHashCode();
                if (this.MonitorData != null)
                    hash = hash * 59 + this.MonitorData.GetHashCode();
                if (this.NumExecutors != null)
                    hash = hash * 59 + this.NumExecutors.GetHashCode();
                if (this.Offline != null)
                    hash = hash * 59 + this.Offline.GetHashCode();
                if (this.OfflineCause != null)
                    hash = hash * 59 + this.OfflineCause.GetHashCode();
                if (this.OfflineCauseReason != null)
                    hash = hash * 59 + this.OfflineCauseReason.GetHashCode();
                if (this.TemporarilyOffline != null)
                    hash = hash * 59 + this.TemporarilyOffline.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
