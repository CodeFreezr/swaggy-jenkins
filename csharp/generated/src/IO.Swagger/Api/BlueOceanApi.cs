/* 
 * Swaggy Jenkins
 *
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBlueOceanApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve authenticated user details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>SwaggyjenkinsUser</returns>
        SwaggyjenkinsUser GetAuthenticatedUser (string organisation);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve authenticated user details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>ApiResponse of SwaggyjenkinsUser</returns>
        ApiResponse<SwaggyjenkinsUser> GetAuthenticatedUserWithHttpInfo (string organisation);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of class names supported by a given class
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_class">Name of the class</param>
        /// <returns>string</returns>
        string GetClasses (string _class);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of class names supported by a given class
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_class">Name of the class</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> GetClassesWithHttpInfo (string _class);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve organisation details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>SwaggyjenkinsOrganisation</returns>
        SwaggyjenkinsOrganisation GetOrganisation (string organisation);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve organisation details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>ApiResponse of SwaggyjenkinsOrganisation</returns>
        ApiResponse<SwaggyjenkinsOrganisation> GetOrganisationWithHttpInfo (string organisation);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all organisations details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetOrganisations</returns>
        GetOrganisations GetOrganisations ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all organisations details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetOrganisations</returns>
        ApiResponse<GetOrganisations> GetOrganisationsWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve branch details for an organisation pipeline
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <returns>IojenkinsblueoceanrestimplpipelineBranchImpl</returns>
        IojenkinsblueoceanrestimplpipelineBranchImpl GetPipelineBranchByOrg (string organisation, string pipeline, string branch);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve branch details for an organisation pipeline
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <returns>ApiResponse of IojenkinsblueoceanrestimplpipelineBranchImpl</returns>
        ApiResponse<IojenkinsblueoceanrestimplpipelineBranchImpl> GetPipelineBranchByOrgWithHttpInfo (string organisation, string pipeline, string branch);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all branches details for an organisation pipeline
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>GetMultibranchPipeline</returns>
        GetMultibranchPipeline GetPipelineBranchesByOrg (string organisation, string pipeline);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all branches details for an organisation pipeline
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>ApiResponse of GetMultibranchPipeline</returns>
        ApiResponse<GetMultibranchPipeline> GetPipelineBranchesByOrgWithHttpInfo (string organisation, string pipeline);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>SwaggyjenkinsPipeline</returns>
        SwaggyjenkinsPipeline GetPipelineByOrg (string organisation, string pipeline);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>ApiResponse of SwaggyjenkinsPipeline</returns>
        ApiResponse<SwaggyjenkinsPipeline> GetPipelineByOrgWithHttpInfo (string organisation, string pipeline);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline folder for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl</returns>
        IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl GetPipelineFolderByOrg (string organisation, string folder);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline folder for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>ApiResponse of IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl</returns>
        ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl> GetPipelineFolderByOrgWithHttpInfo (string organisation, string folder);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organisation folder
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>IojenkinsblueoceanserviceembeddedrestPipelineImpl</returns>
        IojenkinsblueoceanserviceembeddedrestPipelineImpl GetPipelineFolderByOrg_0 (string organisation, string pipeline, string folder);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organisation folder
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>ApiResponse of IojenkinsblueoceanserviceembeddedrestPipelineImpl</returns>
        ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineImpl> GetPipelineFolderByOrg_0WithHttpInfo (string organisation, string pipeline, string folder);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all pipelines details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>GetPipelines</returns>
        GetPipelines GetPipelinesByOrg (string organisation);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all pipelines details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>ApiResponse of GetPipelines</returns>
        ApiResponse<GetPipelines> GetPipelinesByOrgWithHttpInfo (string organisation);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="user">Name of the user</param>
        /// <returns>SwaggyjenkinsUser</returns>
        SwaggyjenkinsUser GetUser (string organisation, string user);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="user">Name of the user</param>
        /// <returns>ApiResponse of SwaggyjenkinsUser</returns>
        ApiResponse<SwaggyjenkinsUser> GetUserWithHttpInfo (string organisation, string user);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve users details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>SwaggyjenkinsUser</returns>
        SwaggyjenkinsUser GetUsers (string organisation);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve users details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>ApiResponse of SwaggyjenkinsUser</returns>
        ApiResponse<SwaggyjenkinsUser> GetUsersWithHttpInfo (string organisation);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get classes details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <returns>string</returns>
        string Search (string q);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get classes details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SearchWithHttpInfo (string q);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for any resource details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <returns>string</returns>
        string Search_0 (string q);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for any resource details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> Search_0WithHttpInfo (string q);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve authenticated user details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>Task of SwaggyjenkinsUser</returns>
        System.Threading.Tasks.Task<SwaggyjenkinsUser> GetAuthenticatedUserAsync (string organisation);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve authenticated user details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>Task of ApiResponse (SwaggyjenkinsUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<SwaggyjenkinsUser>> GetAuthenticatedUserAsyncWithHttpInfo (string organisation);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of class names supported by a given class
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_class">Name of the class</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> GetClassesAsync (string _class);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get a list of class names supported by a given class
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_class">Name of the class</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> GetClassesAsyncWithHttpInfo (string _class);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve organisation details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>Task of SwaggyjenkinsOrganisation</returns>
        System.Threading.Tasks.Task<SwaggyjenkinsOrganisation> GetOrganisationAsync (string organisation);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve organisation details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>Task of ApiResponse (SwaggyjenkinsOrganisation)</returns>
        System.Threading.Tasks.Task<ApiResponse<SwaggyjenkinsOrganisation>> GetOrganisationAsyncWithHttpInfo (string organisation);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all organisations details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetOrganisations</returns>
        System.Threading.Tasks.Task<GetOrganisations> GetOrganisationsAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all organisations details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetOrganisations)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetOrganisations>> GetOrganisationsAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve branch details for an organisation pipeline
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <returns>Task of IojenkinsblueoceanrestimplpipelineBranchImpl</returns>
        System.Threading.Tasks.Task<IojenkinsblueoceanrestimplpipelineBranchImpl> GetPipelineBranchByOrgAsync (string organisation, string pipeline, string branch);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve branch details for an organisation pipeline
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <returns>Task of ApiResponse (IojenkinsblueoceanrestimplpipelineBranchImpl)</returns>
        System.Threading.Tasks.Task<ApiResponse<IojenkinsblueoceanrestimplpipelineBranchImpl>> GetPipelineBranchByOrgAsyncWithHttpInfo (string organisation, string pipeline, string branch);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all branches details for an organisation pipeline
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of GetMultibranchPipeline</returns>
        System.Threading.Tasks.Task<GetMultibranchPipeline> GetPipelineBranchesByOrgAsync (string organisation, string pipeline);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all branches details for an organisation pipeline
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of ApiResponse (GetMultibranchPipeline)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetMultibranchPipeline>> GetPipelineBranchesByOrgAsyncWithHttpInfo (string organisation, string pipeline);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of SwaggyjenkinsPipeline</returns>
        System.Threading.Tasks.Task<SwaggyjenkinsPipeline> GetPipelineByOrgAsync (string organisation, string pipeline);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of ApiResponse (SwaggyjenkinsPipeline)</returns>
        System.Threading.Tasks.Task<ApiResponse<SwaggyjenkinsPipeline>> GetPipelineByOrgAsyncWithHttpInfo (string organisation, string pipeline);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline folder for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>Task of IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl</returns>
        System.Threading.Tasks.Task<IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl> GetPipelineFolderByOrgAsync (string organisation, string folder);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline folder for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>Task of ApiResponse (IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl)</returns>
        System.Threading.Tasks.Task<ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl>> GetPipelineFolderByOrgAsyncWithHttpInfo (string organisation, string folder);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organisation folder
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>Task of IojenkinsblueoceanserviceembeddedrestPipelineImpl</returns>
        System.Threading.Tasks.Task<IojenkinsblueoceanserviceembeddedrestPipelineImpl> GetPipelineFolderByOrg_0Async (string organisation, string pipeline, string folder);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve pipeline details for an organisation folder
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>Task of ApiResponse (IojenkinsblueoceanserviceembeddedrestPipelineImpl)</returns>
        System.Threading.Tasks.Task<ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineImpl>> GetPipelineFolderByOrg_0AsyncWithHttpInfo (string organisation, string pipeline, string folder);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all pipelines details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>Task of GetPipelines</returns>
        System.Threading.Tasks.Task<GetPipelines> GetPipelinesByOrgAsync (string organisation);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve all pipelines details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>Task of ApiResponse (GetPipelines)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPipelines>> GetPipelinesByOrgAsyncWithHttpInfo (string organisation);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="user">Name of the user</param>
        /// <returns>Task of SwaggyjenkinsUser</returns>
        System.Threading.Tasks.Task<SwaggyjenkinsUser> GetUserAsync (string organisation, string user);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve user details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="user">Name of the user</param>
        /// <returns>Task of ApiResponse (SwaggyjenkinsUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<SwaggyjenkinsUser>> GetUserAsyncWithHttpInfo (string organisation, string user);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve users details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>Task of SwaggyjenkinsUser</returns>
        System.Threading.Tasks.Task<SwaggyjenkinsUser> GetUsersAsync (string organisation);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Retrieve users details for an organisation
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>Task of ApiResponse (SwaggyjenkinsUser)</returns>
        System.Threading.Tasks.Task<ApiResponse<SwaggyjenkinsUser>> GetUsersAsyncWithHttpInfo (string organisation);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get classes details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SearchAsync (string q);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Get classes details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SearchAsyncWithHttpInfo (string q);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for any resource details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> Search_0Async (string q);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for any resource details
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> Search_0AsyncWithHttpInfo (string q);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BlueOceanApi : IBlueOceanApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BlueOceanApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BlueOceanApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BlueOceanApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BlueOceanApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Retrieve authenticated user details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>SwaggyjenkinsUser</returns>
        public SwaggyjenkinsUser GetAuthenticatedUser (string organisation)
        {
             ApiResponse<SwaggyjenkinsUser> localVarResponse = GetAuthenticatedUserWithHttpInfo(organisation);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve authenticated user details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>ApiResponse of SwaggyjenkinsUser</returns>
        public ApiResponse< SwaggyjenkinsUser > GetAuthenticatedUserWithHttpInfo (string organisation)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetAuthenticatedUser");

            var localVarPath = "/blue/rest/organizations/{organisation}/user/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthenticatedUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwaggyjenkinsUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SwaggyjenkinsUser) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwaggyjenkinsUser)));
        }

        /// <summary>
        ///  Retrieve authenticated user details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>Task of SwaggyjenkinsUser</returns>
        public async System.Threading.Tasks.Task<SwaggyjenkinsUser> GetAuthenticatedUserAsync (string organisation)
        {
             ApiResponse<SwaggyjenkinsUser> localVarResponse = await GetAuthenticatedUserAsyncWithHttpInfo(organisation);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve authenticated user details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>Task of ApiResponse (SwaggyjenkinsUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SwaggyjenkinsUser>> GetAuthenticatedUserAsyncWithHttpInfo (string organisation)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetAuthenticatedUser");

            var localVarPath = "/blue/rest/organizations/{organisation}/user/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAuthenticatedUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwaggyjenkinsUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SwaggyjenkinsUser) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwaggyjenkinsUser)));
        }

        /// <summary>
        ///  Get a list of class names supported by a given class
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_class">Name of the class</param>
        /// <returns>string</returns>
        public string GetClasses (string _class)
        {
             ApiResponse<string> localVarResponse = GetClassesWithHttpInfo(_class);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get a list of class names supported by a given class
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_class">Name of the class</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > GetClassesWithHttpInfo (string _class)
        {
            // verify the required parameter '_class' is set
            if (_class == null)
                throw new ApiException(400, "Missing required parameter '_class' when calling BlueOceanApi->GetClasses");

            var localVarPath = "/blue/rest/classes/{class}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_class != null) localVarPathParams.Add("class", Configuration.ApiClient.ParameterToString(_class)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClasses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Get a list of class names supported by a given class
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_class">Name of the class</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> GetClassesAsync (string _class)
        {
             ApiResponse<string> localVarResponse = await GetClassesAsyncWithHttpInfo(_class);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get a list of class names supported by a given class
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_class">Name of the class</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> GetClassesAsyncWithHttpInfo (string _class)
        {
            // verify the required parameter '_class' is set
            if (_class == null)
                throw new ApiException(400, "Missing required parameter '_class' when calling BlueOceanApi->GetClasses");

            var localVarPath = "/blue/rest/classes/{class}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_class != null) localVarPathParams.Add("class", Configuration.ApiClient.ParameterToString(_class)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetClasses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Retrieve organisation details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>SwaggyjenkinsOrganisation</returns>
        public SwaggyjenkinsOrganisation GetOrganisation (string organisation)
        {
             ApiResponse<SwaggyjenkinsOrganisation> localVarResponse = GetOrganisationWithHttpInfo(organisation);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve organisation details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>ApiResponse of SwaggyjenkinsOrganisation</returns>
        public ApiResponse< SwaggyjenkinsOrganisation > GetOrganisationWithHttpInfo (string organisation)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetOrganisation");

            var localVarPath = "/blue/rest/organizations/{organisation}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganisation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwaggyjenkinsOrganisation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SwaggyjenkinsOrganisation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwaggyjenkinsOrganisation)));
        }

        /// <summary>
        ///  Retrieve organisation details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>Task of SwaggyjenkinsOrganisation</returns>
        public async System.Threading.Tasks.Task<SwaggyjenkinsOrganisation> GetOrganisationAsync (string organisation)
        {
             ApiResponse<SwaggyjenkinsOrganisation> localVarResponse = await GetOrganisationAsyncWithHttpInfo(organisation);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve organisation details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>Task of ApiResponse (SwaggyjenkinsOrganisation)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SwaggyjenkinsOrganisation>> GetOrganisationAsyncWithHttpInfo (string organisation)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetOrganisation");

            var localVarPath = "/blue/rest/organizations/{organisation}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganisation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwaggyjenkinsOrganisation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SwaggyjenkinsOrganisation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwaggyjenkinsOrganisation)));
        }

        /// <summary>
        ///  Retrieve all organisations details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>GetOrganisations</returns>
        public GetOrganisations GetOrganisations ()
        {
             ApiResponse<GetOrganisations> localVarResponse = GetOrganisationsWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve all organisations details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of GetOrganisations</returns>
        public ApiResponse< GetOrganisations > GetOrganisationsWithHttpInfo ()
        {

            var localVarPath = "/blue/rest/organizations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganisations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOrganisations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOrganisations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOrganisations)));
        }

        /// <summary>
        ///  Retrieve all organisations details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of GetOrganisations</returns>
        public async System.Threading.Tasks.Task<GetOrganisations> GetOrganisationsAsync ()
        {
             ApiResponse<GetOrganisations> localVarResponse = await GetOrganisationsAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve all organisations details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (GetOrganisations)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetOrganisations>> GetOrganisationsAsyncWithHttpInfo ()
        {

            var localVarPath = "/blue/rest/organizations/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);



            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetOrganisations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetOrganisations>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetOrganisations) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetOrganisations)));
        }

        /// <summary>
        ///  Retrieve branch details for an organisation pipeline
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <returns>IojenkinsblueoceanrestimplpipelineBranchImpl</returns>
        public IojenkinsblueoceanrestimplpipelineBranchImpl GetPipelineBranchByOrg (string organisation, string pipeline, string branch)
        {
             ApiResponse<IojenkinsblueoceanrestimplpipelineBranchImpl> localVarResponse = GetPipelineBranchByOrgWithHttpInfo(organisation, pipeline, branch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve branch details for an organisation pipeline
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <returns>ApiResponse of IojenkinsblueoceanrestimplpipelineBranchImpl</returns>
        public ApiResponse< IojenkinsblueoceanrestimplpipelineBranchImpl > GetPipelineBranchByOrgWithHttpInfo (string organisation, string pipeline, string branch)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetPipelineBranchByOrg");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineBranchByOrg");
            // verify the required parameter 'branch' is set
            if (branch == null)
                throw new ApiException(400, "Missing required parameter 'branch' when calling BlueOceanApi->GetPipelineBranchByOrg");

            var localVarPath = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches/{branch}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (branch != null) localVarPathParams.Add("branch", Configuration.ApiClient.ParameterToString(branch)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineBranchByOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IojenkinsblueoceanrestimplpipelineBranchImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IojenkinsblueoceanrestimplpipelineBranchImpl) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IojenkinsblueoceanrestimplpipelineBranchImpl)));
        }

        /// <summary>
        ///  Retrieve branch details for an organisation pipeline
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <returns>Task of IojenkinsblueoceanrestimplpipelineBranchImpl</returns>
        public async System.Threading.Tasks.Task<IojenkinsblueoceanrestimplpipelineBranchImpl> GetPipelineBranchByOrgAsync (string organisation, string pipeline, string branch)
        {
             ApiResponse<IojenkinsblueoceanrestimplpipelineBranchImpl> localVarResponse = await GetPipelineBranchByOrgAsyncWithHttpInfo(organisation, pipeline, branch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve branch details for an organisation pipeline
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="branch">Name of the branch</param>
        /// <returns>Task of ApiResponse (IojenkinsblueoceanrestimplpipelineBranchImpl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IojenkinsblueoceanrestimplpipelineBranchImpl>> GetPipelineBranchByOrgAsyncWithHttpInfo (string organisation, string pipeline, string branch)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetPipelineBranchByOrg");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineBranchByOrg");
            // verify the required parameter 'branch' is set
            if (branch == null)
                throw new ApiException(400, "Missing required parameter 'branch' when calling BlueOceanApi->GetPipelineBranchByOrg");

            var localVarPath = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches/{branch}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (branch != null) localVarPathParams.Add("branch", Configuration.ApiClient.ParameterToString(branch)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineBranchByOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IojenkinsblueoceanrestimplpipelineBranchImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IojenkinsblueoceanrestimplpipelineBranchImpl) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IojenkinsblueoceanrestimplpipelineBranchImpl)));
        }

        /// <summary>
        ///  Retrieve all branches details for an organisation pipeline
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>GetMultibranchPipeline</returns>
        public GetMultibranchPipeline GetPipelineBranchesByOrg (string organisation, string pipeline)
        {
             ApiResponse<GetMultibranchPipeline> localVarResponse = GetPipelineBranchesByOrgWithHttpInfo(organisation, pipeline);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve all branches details for an organisation pipeline
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>ApiResponse of GetMultibranchPipeline</returns>
        public ApiResponse< GetMultibranchPipeline > GetPipelineBranchesByOrgWithHttpInfo (string organisation, string pipeline)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetPipelineBranchesByOrg");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineBranchesByOrg");

            var localVarPath = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", Configuration.ApiClient.ParameterToString(pipeline)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineBranchesByOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMultibranchPipeline>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMultibranchPipeline) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMultibranchPipeline)));
        }

        /// <summary>
        ///  Retrieve all branches details for an organisation pipeline
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of GetMultibranchPipeline</returns>
        public async System.Threading.Tasks.Task<GetMultibranchPipeline> GetPipelineBranchesByOrgAsync (string organisation, string pipeline)
        {
             ApiResponse<GetMultibranchPipeline> localVarResponse = await GetPipelineBranchesByOrgAsyncWithHttpInfo(organisation, pipeline);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve all branches details for an organisation pipeline
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of ApiResponse (GetMultibranchPipeline)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetMultibranchPipeline>> GetPipelineBranchesByOrgAsyncWithHttpInfo (string organisation, string pipeline)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetPipelineBranchesByOrg");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineBranchesByOrg");

            var localVarPath = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", Configuration.ApiClient.ParameterToString(pipeline)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineBranchesByOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetMultibranchPipeline>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetMultibranchPipeline) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetMultibranchPipeline)));
        }

        /// <summary>
        ///  Retrieve pipeline details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>SwaggyjenkinsPipeline</returns>
        public SwaggyjenkinsPipeline GetPipelineByOrg (string organisation, string pipeline)
        {
             ApiResponse<SwaggyjenkinsPipeline> localVarResponse = GetPipelineByOrgWithHttpInfo(organisation, pipeline);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve pipeline details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>ApiResponse of SwaggyjenkinsPipeline</returns>
        public ApiResponse< SwaggyjenkinsPipeline > GetPipelineByOrgWithHttpInfo (string organisation, string pipeline)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetPipelineByOrg");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineByOrg");

            var localVarPath = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", Configuration.ApiClient.ParameterToString(pipeline)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineByOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwaggyjenkinsPipeline>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SwaggyjenkinsPipeline) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwaggyjenkinsPipeline)));
        }

        /// <summary>
        ///  Retrieve pipeline details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of SwaggyjenkinsPipeline</returns>
        public async System.Threading.Tasks.Task<SwaggyjenkinsPipeline> GetPipelineByOrgAsync (string organisation, string pipeline)
        {
             ApiResponse<SwaggyjenkinsPipeline> localVarResponse = await GetPipelineByOrgAsyncWithHttpInfo(organisation, pipeline);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve pipeline details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <returns>Task of ApiResponse (SwaggyjenkinsPipeline)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SwaggyjenkinsPipeline>> GetPipelineByOrgAsyncWithHttpInfo (string organisation, string pipeline)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetPipelineByOrg");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineByOrg");

            var localVarPath = "/blue/rest/organizations/{organisation}/pipelines/{pipeline}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", Configuration.ApiClient.ParameterToString(pipeline)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineByOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwaggyjenkinsPipeline>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SwaggyjenkinsPipeline) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwaggyjenkinsPipeline)));
        }

        /// <summary>
        ///  Retrieve pipeline folder for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl</returns>
        public IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl GetPipelineFolderByOrg (string organisation, string folder)
        {
             ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl> localVarResponse = GetPipelineFolderByOrgWithHttpInfo(organisation, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve pipeline folder for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>ApiResponse of IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl</returns>
        public ApiResponse< IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl > GetPipelineFolderByOrgWithHttpInfo (string organisation, string folder)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetPipelineFolderByOrg");
            // verify the required parameter 'folder' is set
            if (folder == null)
                throw new ApiException(400, "Missing required parameter 'folder' when calling BlueOceanApi->GetPipelineFolderByOrg");

            var localVarPath = "/blue/rest/organizations/{organisation}/pipelines/{folder}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter
            if (folder != null) localVarPathParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineFolderByOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl)));
        }

        /// <summary>
        ///  Retrieve pipeline folder for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>Task of IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl</returns>
        public async System.Threading.Tasks.Task<IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl> GetPipelineFolderByOrgAsync (string organisation, string folder)
        {
             ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl> localVarResponse = await GetPipelineFolderByOrgAsyncWithHttpInfo(organisation, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve pipeline folder for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>Task of ApiResponse (IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl>> GetPipelineFolderByOrgAsyncWithHttpInfo (string organisation, string folder)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetPipelineFolderByOrg");
            // verify the required parameter 'folder' is set
            if (folder == null)
                throw new ApiException(400, "Missing required parameter 'folder' when calling BlueOceanApi->GetPipelineFolderByOrg");

            var localVarPath = "/blue/rest/organizations/{organisation}/pipelines/{folder}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter
            if (folder != null) localVarPathParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineFolderByOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl)));
        }

        /// <summary>
        ///  Retrieve pipeline details for an organisation folder
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>IojenkinsblueoceanserviceembeddedrestPipelineImpl</returns>
        public IojenkinsblueoceanserviceembeddedrestPipelineImpl GetPipelineFolderByOrg_0 (string organisation, string pipeline, string folder)
        {
             ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineImpl> localVarResponse = GetPipelineFolderByOrg_0WithHttpInfo(organisation, pipeline, folder);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve pipeline details for an organisation folder
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>ApiResponse of IojenkinsblueoceanserviceembeddedrestPipelineImpl</returns>
        public ApiResponse< IojenkinsblueoceanserviceembeddedrestPipelineImpl > GetPipelineFolderByOrg_0WithHttpInfo (string organisation, string pipeline, string folder)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetPipelineFolderByOrg_0");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineFolderByOrg_0");
            // verify the required parameter 'folder' is set
            if (folder == null)
                throw new ApiException(400, "Missing required parameter 'folder' when calling BlueOceanApi->GetPipelineFolderByOrg_0");

            var localVarPath = "/blue/rest/organizations/{organisation}/pipelines/{folder}/pipelines/{pipeline}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (folder != null) localVarPathParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineFolderByOrg_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IojenkinsblueoceanserviceembeddedrestPipelineImpl) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IojenkinsblueoceanserviceembeddedrestPipelineImpl)));
        }

        /// <summary>
        ///  Retrieve pipeline details for an organisation folder
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>Task of IojenkinsblueoceanserviceembeddedrestPipelineImpl</returns>
        public async System.Threading.Tasks.Task<IojenkinsblueoceanserviceembeddedrestPipelineImpl> GetPipelineFolderByOrg_0Async (string organisation, string pipeline, string folder)
        {
             ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineImpl> localVarResponse = await GetPipelineFolderByOrg_0AsyncWithHttpInfo(organisation, pipeline, folder);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve pipeline details for an organisation folder
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="pipeline">Name of the pipeline</param>
        /// <param name="folder">Name of the folder</param>
        /// <returns>Task of ApiResponse (IojenkinsblueoceanserviceembeddedrestPipelineImpl)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineImpl>> GetPipelineFolderByOrg_0AsyncWithHttpInfo (string organisation, string pipeline, string folder)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetPipelineFolderByOrg_0");
            // verify the required parameter 'pipeline' is set
            if (pipeline == null)
                throw new ApiException(400, "Missing required parameter 'pipeline' when calling BlueOceanApi->GetPipelineFolderByOrg_0");
            // verify the required parameter 'folder' is set
            if (folder == null)
                throw new ApiException(400, "Missing required parameter 'folder' when calling BlueOceanApi->GetPipelineFolderByOrg_0");

            var localVarPath = "/blue/rest/organizations/{organisation}/pipelines/{folder}/pipelines/{pipeline}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter
            if (pipeline != null) localVarPathParams.Add("pipeline", Configuration.ApiClient.ParameterToString(pipeline)); // path parameter
            if (folder != null) localVarPathParams.Add("folder", Configuration.ApiClient.ParameterToString(folder)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelineFolderByOrg_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IojenkinsblueoceanserviceembeddedrestPipelineImpl>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IojenkinsblueoceanserviceembeddedrestPipelineImpl) Configuration.ApiClient.Deserialize(localVarResponse, typeof(IojenkinsblueoceanserviceembeddedrestPipelineImpl)));
        }

        /// <summary>
        ///  Retrieve all pipelines details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>GetPipelines</returns>
        public GetPipelines GetPipelinesByOrg (string organisation)
        {
             ApiResponse<GetPipelines> localVarResponse = GetPipelinesByOrgWithHttpInfo(organisation);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve all pipelines details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>ApiResponse of GetPipelines</returns>
        public ApiResponse< GetPipelines > GetPipelinesByOrgWithHttpInfo (string organisation)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetPipelinesByOrg");

            var localVarPath = "/blue/rest/organizations/{organisation}/pipelines/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelinesByOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPipelines>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPipelines) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPipelines)));
        }

        /// <summary>
        ///  Retrieve all pipelines details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>Task of GetPipelines</returns>
        public async System.Threading.Tasks.Task<GetPipelines> GetPipelinesByOrgAsync (string organisation)
        {
             ApiResponse<GetPipelines> localVarResponse = await GetPipelinesByOrgAsyncWithHttpInfo(organisation);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve all pipelines details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>Task of ApiResponse (GetPipelines)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GetPipelines>> GetPipelinesByOrgAsyncWithHttpInfo (string organisation)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetPipelinesByOrg");

            var localVarPath = "/blue/rest/organizations/{organisation}/pipelines/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPipelinesByOrg", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GetPipelines>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GetPipelines) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GetPipelines)));
        }

        /// <summary>
        ///  Retrieve user details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="user">Name of the user</param>
        /// <returns>SwaggyjenkinsUser</returns>
        public SwaggyjenkinsUser GetUser (string organisation, string user)
        {
             ApiResponse<SwaggyjenkinsUser> localVarResponse = GetUserWithHttpInfo(organisation, user);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve user details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="user">Name of the user</param>
        /// <returns>ApiResponse of SwaggyjenkinsUser</returns>
        public ApiResponse< SwaggyjenkinsUser > GetUserWithHttpInfo (string organisation, string user)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetUser");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling BlueOceanApi->GetUser");

            var localVarPath = "/blue/rest/organizations/{organisation}/users/{user}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter
            if (user != null) localVarPathParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwaggyjenkinsUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SwaggyjenkinsUser) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwaggyjenkinsUser)));
        }

        /// <summary>
        ///  Retrieve user details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="user">Name of the user</param>
        /// <returns>Task of SwaggyjenkinsUser</returns>
        public async System.Threading.Tasks.Task<SwaggyjenkinsUser> GetUserAsync (string organisation, string user)
        {
             ApiResponse<SwaggyjenkinsUser> localVarResponse = await GetUserAsyncWithHttpInfo(organisation, user);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve user details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <param name="user">Name of the user</param>
        /// <returns>Task of ApiResponse (SwaggyjenkinsUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SwaggyjenkinsUser>> GetUserAsyncWithHttpInfo (string organisation, string user)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetUser");
            // verify the required parameter 'user' is set
            if (user == null)
                throw new ApiException(400, "Missing required parameter 'user' when calling BlueOceanApi->GetUser");

            var localVarPath = "/blue/rest/organizations/{organisation}/users/{user}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter
            if (user != null) localVarPathParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUser", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwaggyjenkinsUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SwaggyjenkinsUser) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwaggyjenkinsUser)));
        }

        /// <summary>
        ///  Retrieve users details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>SwaggyjenkinsUser</returns>
        public SwaggyjenkinsUser GetUsers (string organisation)
        {
             ApiResponse<SwaggyjenkinsUser> localVarResponse = GetUsersWithHttpInfo(organisation);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Retrieve users details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>ApiResponse of SwaggyjenkinsUser</returns>
        public ApiResponse< SwaggyjenkinsUser > GetUsersWithHttpInfo (string organisation)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetUsers");

            var localVarPath = "/blue/rest/organizations/{organisation}/users/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwaggyjenkinsUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SwaggyjenkinsUser) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwaggyjenkinsUser)));
        }

        /// <summary>
        ///  Retrieve users details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>Task of SwaggyjenkinsUser</returns>
        public async System.Threading.Tasks.Task<SwaggyjenkinsUser> GetUsersAsync (string organisation)
        {
             ApiResponse<SwaggyjenkinsUser> localVarResponse = await GetUsersAsyncWithHttpInfo(organisation);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Retrieve users details for an organisation
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="organisation">Name of the organisation</param>
        /// <returns>Task of ApiResponse (SwaggyjenkinsUser)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SwaggyjenkinsUser>> GetUsersAsyncWithHttpInfo (string organisation)
        {
            // verify the required parameter 'organisation' is set
            if (organisation == null)
                throw new ApiException(400, "Missing required parameter 'organisation' when calling BlueOceanApi->GetUsers");

            var localVarPath = "/blue/rest/organizations/{organisation}/users/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (organisation != null) localVarPathParams.Add("organisation", Configuration.ApiClient.ParameterToString(organisation)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetUsers", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SwaggyjenkinsUser>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (SwaggyjenkinsUser) Configuration.ApiClient.Deserialize(localVarResponse, typeof(SwaggyjenkinsUser)));
        }

        /// <summary>
        ///  Get classes details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <returns>string</returns>
        public string Search (string q)
        {
             ApiResponse<string> localVarResponse = SearchWithHttpInfo(q);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Get classes details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > SearchWithHttpInfo (string q)
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new ApiException(400, "Missing required parameter 'q' when calling BlueOceanApi->Search");

            var localVarPath = "/blue/rest/classes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Get classes details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SearchAsync (string q)
        {
             ApiResponse<string> localVarResponse = await SearchAsyncWithHttpInfo(q);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Get classes details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string containing an array of class names</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SearchAsyncWithHttpInfo (string q)
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new ApiException(400, "Missing required parameter 'q' when calling BlueOceanApi->Search");

            var localVarPath = "/blue/rest/classes/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Search for any resource details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <returns>string</returns>
        public string Search_0 (string q)
        {
             ApiResponse<string> localVarResponse = Search_0WithHttpInfo(q);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Search for any resource details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > Search_0WithHttpInfo (string q)
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new ApiException(400, "Missing required parameter 'q' when calling BlueOceanApi->Search_0");

            var localVarPath = "/blue/rest/search/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

        /// <summary>
        ///  Search for any resource details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> Search_0Async (string q)
        {
             ApiResponse<string> localVarResponse = await Search_0AsyncWithHttpInfo(q);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Search for any resource details
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="q">Query string</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> Search_0AsyncWithHttpInfo (string q)
        {
            // verify the required parameter 'q' is set
            if (q == null)
                throw new ApiException(400, "Missing required parameter 'q' when calling BlueOceanApi->Search_0");

            var localVarPath = "/blue/rest/search/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (q != null) localVarQueryParams.Add("q", Configuration.ApiClient.ParameterToString(q)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("Search_0", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
        }

    }
}
