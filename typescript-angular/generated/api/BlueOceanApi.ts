/**
 * Swaggy Jenkins
 * Jenkins API clients generated from Swagger / Open API specification
 *
 * OpenAPI spec version: 0.1.0
 * Contact: blah@cliffano.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import * as models from '../model/models';

/* tslint:disable:no-unused-variable member-ordering */

export class BlueOceanApi {
    protected basePath = 'http://localhost';
    public defaultHeaders : any = {};

    static $inject: string[] = ['$http', '$httpParamSerializer', 'basePath'];

    constructor(protected $http: ng.IHttpService, protected $httpParamSerializer?: (d: any) => any, basePath?: string) {
        if (basePath !== undefined) {
            this.basePath = basePath;
        }
    }

    /**
        * 
        * Retrieve authenticated user details for an organisation
        * @param organisation Name of the organisation
        */
    public getAuthenticatedUser (organisation: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SwaggyjenkinsUser> {
        const localVarPath = this.basePath + '/blue/rest/organizations/{organisation}/user/'
            .replace('{' + 'organisation' + '}', String(organisation));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'organisation' is not null or undefined
        if (organisation === null || organisation === undefined) {
            throw new Error('Required parameter organisation was null or undefined when calling getAuthenticatedUser.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * Get a list of class names supported by a given class
        * @param _class Name of the class
        */
    public getClasses (_class: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/blue/rest/classes/{class}'
            .replace('{' + 'class' + '}', String(_class));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter '_class' is not null or undefined
        if (_class === null || _class === undefined) {
            throw new Error('Required parameter _class was null or undefined when calling getClasses.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * Retrieve organisation details
        * @param organisation Name of the organisation
        */
    public getOrganisation (organisation: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SwaggyjenkinsOrganisation> {
        const localVarPath = this.basePath + '/blue/rest/organizations/{organisation}'
            .replace('{' + 'organisation' + '}', String(organisation));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'organisation' is not null or undefined
        if (organisation === null || organisation === undefined) {
            throw new Error('Required parameter organisation was null or undefined when calling getOrganisation.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * Retrieve all organisations details
        */
    public getOrganisations (extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetOrganisations> {
        const localVarPath = this.basePath + '/blue/rest/organizations/';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * Retrieve branch details for an organisation pipeline
        * @param organisation Name of the organisation
        * @param pipeline Name of the pipeline
        * @param branch Name of the branch
        */
    public getPipelineBranchByOrg (organisation: string, pipeline: string, branch: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.IojenkinsblueoceanrestimplpipelineBranchImpl> {
        const localVarPath = this.basePath + '/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches/{branch}/'
            .replace('{' + 'organisation' + '}', String(organisation))
            .replace('{' + 'pipeline' + '}', String(pipeline))
            .replace('{' + 'branch' + '}', String(branch));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'organisation' is not null or undefined
        if (organisation === null || organisation === undefined) {
            throw new Error('Required parameter organisation was null or undefined when calling getPipelineBranchByOrg.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineBranchByOrg.');
        }
        // verify required parameter 'branch' is not null or undefined
        if (branch === null || branch === undefined) {
            throw new Error('Required parameter branch was null or undefined when calling getPipelineBranchByOrg.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * Retrieve all branches details for an organisation pipeline
        * @param organisation Name of the organisation
        * @param pipeline Name of the pipeline
        */
    public getPipelineBranchesByOrg (organisation: string, pipeline: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetMultibranchPipeline> {
        const localVarPath = this.basePath + '/blue/rest/organizations/{organisation}/pipelines/{pipeline}/branches'
            .replace('{' + 'organisation' + '}', String(organisation))
            .replace('{' + 'pipeline' + '}', String(pipeline));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'organisation' is not null or undefined
        if (organisation === null || organisation === undefined) {
            throw new Error('Required parameter organisation was null or undefined when calling getPipelineBranchesByOrg.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineBranchesByOrg.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * Retrieve pipeline details for an organisation
        * @param organisation Name of the organisation
        * @param pipeline Name of the pipeline
        */
    public getPipelineByOrg (organisation: string, pipeline: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SwaggyjenkinsPipeline> {
        const localVarPath = this.basePath + '/blue/rest/organizations/{organisation}/pipelines/{pipeline}'
            .replace('{' + 'organisation' + '}', String(organisation))
            .replace('{' + 'pipeline' + '}', String(pipeline));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'organisation' is not null or undefined
        if (organisation === null || organisation === undefined) {
            throw new Error('Required parameter organisation was null or undefined when calling getPipelineByOrg.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineByOrg.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * Retrieve pipeline folder for an organisation
        * @param organisation Name of the organisation
        * @param folder Name of the folder
        */
    public getPipelineFolderByOrg (organisation: string, folder: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.IojenkinsblueoceanserviceembeddedrestPipelineFolderImpl> {
        const localVarPath = this.basePath + '/blue/rest/organizations/{organisation}/pipelines/{folder}/'
            .replace('{' + 'organisation' + '}', String(organisation))
            .replace('{' + 'folder' + '}', String(folder));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'organisation' is not null or undefined
        if (organisation === null || organisation === undefined) {
            throw new Error('Required parameter organisation was null or undefined when calling getPipelineFolderByOrg.');
        }
        // verify required parameter 'folder' is not null or undefined
        if (folder === null || folder === undefined) {
            throw new Error('Required parameter folder was null or undefined when calling getPipelineFolderByOrg.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * Retrieve pipeline details for an organisation folder
        * @param organisation Name of the organisation
        * @param pipeline Name of the pipeline
        * @param folder Name of the folder
        */
    public getPipelineFolderByOrg_1 (organisation: string, pipeline: string, folder: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.IojenkinsblueoceanserviceembeddedrestPipelineImpl> {
        const localVarPath = this.basePath + '/blue/rest/organizations/{organisation}/pipelines/{folder}/pipelines/{pipeline}'
            .replace('{' + 'organisation' + '}', String(organisation))
            .replace('{' + 'pipeline' + '}', String(pipeline))
            .replace('{' + 'folder' + '}', String(folder));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'organisation' is not null or undefined
        if (organisation === null || organisation === undefined) {
            throw new Error('Required parameter organisation was null or undefined when calling getPipelineFolderByOrg_1.');
        }
        // verify required parameter 'pipeline' is not null or undefined
        if (pipeline === null || pipeline === undefined) {
            throw new Error('Required parameter pipeline was null or undefined when calling getPipelineFolderByOrg_1.');
        }
        // verify required parameter 'folder' is not null or undefined
        if (folder === null || folder === undefined) {
            throw new Error('Required parameter folder was null or undefined when calling getPipelineFolderByOrg_1.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * Retrieve all pipelines details for an organisation
        * @param organisation Name of the organisation
        */
    public getPipelinesByOrg (organisation: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.GetPipelines> {
        const localVarPath = this.basePath + '/blue/rest/organizations/{organisation}/pipelines/'
            .replace('{' + 'organisation' + '}', String(organisation));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'organisation' is not null or undefined
        if (organisation === null || organisation === undefined) {
            throw new Error('Required parameter organisation was null or undefined when calling getPipelinesByOrg.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * Retrieve user details for an organisation
        * @param organisation Name of the organisation
        * @param user Name of the user
        */
    public getUser (organisation: string, user: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SwaggyjenkinsUser> {
        const localVarPath = this.basePath + '/blue/rest/organizations/{organisation}/users/{user}'
            .replace('{' + 'organisation' + '}', String(organisation))
            .replace('{' + 'user' + '}', String(user));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'organisation' is not null or undefined
        if (organisation === null || organisation === undefined) {
            throw new Error('Required parameter organisation was null or undefined when calling getUser.');
        }
        // verify required parameter 'user' is not null or undefined
        if (user === null || user === undefined) {
            throw new Error('Required parameter user was null or undefined when calling getUser.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * Retrieve users details for an organisation
        * @param organisation Name of the organisation
        */
    public getUsers (organisation: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<models.SwaggyjenkinsUser> {
        const localVarPath = this.basePath + '/blue/rest/organizations/{organisation}/users/'
            .replace('{' + 'organisation' + '}', String(organisation));

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'organisation' is not null or undefined
        if (organisation === null || organisation === undefined) {
            throw new Error('Required parameter organisation was null or undefined when calling getUsers.');
        }
        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * Get classes details
        * @param q Query string containing an array of class names
        */
    public search (q: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/blue/rest/classes/';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'q' is not null or undefined
        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling search.');
        }
        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
    /**
        * 
        * Search for any resource details
        * @param q Query string
        */
    public search_2 (q: string, extraHttpRequestParams?: any ) : ng.IHttpPromise<string> {
        const localVarPath = this.basePath + '/blue/rest/search/';

        let queryParameters: any = {};
        let headerParams: any = (<any>Object).assign({}, this.defaultHeaders);
        // verify required parameter 'q' is not null or undefined
        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling search_2.');
        }
        if (q !== undefined) {
            queryParameters['q'] = q;
        }

        let httpRequestParams: ng.IRequestConfig = {
            method: 'GET',
            url: localVarPath,
                                    params: queryParameters,
            headers: headerParams
        };

        if (extraHttpRequestParams) {
            httpRequestParams = (<any>Object).assign(httpRequestParams, extraHttpRequestParams);
        }

        return this.$http(httpRequestParams);
    }
}
